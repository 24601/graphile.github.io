webpackJsonp([0xf77167642f30],{467:function(e,n){e.exports={data:{remark:{html:'<h2 id="usage---schema-only"><a href="#usage---schema-only" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage - Schema Only</h2>\n<p>The PostGraphile middleware gives you a lot of excellent features for running\nyour own GraphQL server. However, if you want to execute a PostGraphile query\nin Node.js without having to go through HTTP you can use some other exported\nfunctions that PostGraphile provides.</p>\n<p>The first function you will need is <code class="language-text">createPostGraphileSchema</code> (or\n<code class="language-text">watchPostGraphileSchema</code> if you want to get a new schema each time the\ndatabase is updated) which creates your PostGraphile GraphQL schema by\nintrospecting your database.</p>\n<p>The function takes very similar arguments to <a href="/postgraphile/usage-library/">the <code class="language-text">postgraphile</code>\nmiddleware</a>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token function">createPostGraphileSchema</span><span class="token punctuation">(</span>\n  process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DATABASE_URL</span> <span class="token operator">||</span> <span class="token string">\'postgres:///\'</span>\n<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>schema <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Now that you have your schema, in order to execute a GraphQL query you must\nsupply an (authenticated) <code class="language-text">pgClient</code> on the context object. The preferred way\nto do this is via the asynchronous <code class="language-text">withPostGraphileContext</code> function. The\ncontext object will contain a PostgreSQL client which has its own transaction\nwith the correct permission levels for the associated user.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> Pool <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'pg\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> graphql <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'graphql\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> withPostGraphileContext <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postgraphile\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> myPgPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pool</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">performQuery</span><span class="token punctuation">(</span>\n  schema<span class="token punctuation">,</span>\n  query<span class="token punctuation">,</span>\n  variables<span class="token punctuation">,</span>\n  jwtToken<span class="token punctuation">,</span>\n  operationName\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">withPostGraphileContext</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span>\n      pgPool<span class="token punctuation">:</span> myPgPool<span class="token punctuation">,</span>\n      jwtToken<span class="token punctuation">:</span> jwtToken<span class="token punctuation">,</span>\n      jwtSecret<span class="token punctuation">:</span> <span class="token string">"..."</span><span class="token punctuation">,</span>\n      pgDefaultRole<span class="token punctuation">:</span> <span class="token string">"..."</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token keyword">async</span> context <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// Execute your GraphQL query in this function with the provided</span>\n      <span class="token comment">// `context` object, which should NOT be used outside of this</span>\n      <span class="token comment">// function.</span>\n      <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">graphql</span><span class="token punctuation">(</span>\n        schema<span class="token punctuation">,</span> <span class="token comment">// The schema from `createPostGraphileSchema`</span>\n        query<span class="token punctuation">,</span>\n        <span class="token keyword">null</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> <span class="token operator">...</span>context <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// You can add more to context if you like</span>\n        variables<span class="token punctuation">,</span>\n        operationName\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>(The <code class="language-text">await</code> keywords after the <code class="language-text">return</code> statements aren\'t required, they\'re just there to clarify the results are promises.)</p>\n<h4 id="api-createpostgraphileschemapgconfig-schemaname-options"><a href="#api-createpostgraphileschemapgconfig-schemaname-options" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>API: <code class="language-text">createPostGraphileSchema(pgConfig, schemaName, options)</code></h4>\n<p>This function takes three arguments (all are optional) and returns a promise to a GraphQLSchema object.</p>\n<p>The returned GraphQLSchema will <strong>not</strong> be updated when your database changes - if you require "watch" functionality, please use <code class="language-text">watchPostGraphileSchema</code> instead (see below).</p>\n<ul>\n<li><strong><code class="language-text">pgConfig</code></strong>: An object or string that will be passed to the <a href=""><code class="language-text">pg</code></a> library and used to connect to a PostgreSQL backend. If you already have a client or pool instance, when using this function you may also pass a <code class="language-text">pg</code> client or a <code class="language-text">pg-pool</code> instance directly instead of a config.</li>\n<li><strong><code class="language-text">schemaName</code></strong>: A string which specifies the PostgreSQL schema that PostGraphile will use to create a GraphQL schema. The default schema is the <code class="language-text">public</code> schema. May be an array for multiple schemas. For users who want to run the Postgres introspection query ahead of time, you may also pass in a <code class="language-text">PgCatalog</code> instance directly.</li>\n<li>\n<p><strong><code class="language-text">options</code></strong>: An object containing other miscellaneous options. Most options are shared with the <code class="language-text">postgraphile</code> middleware function. Options could be: <!-- SCHEMA_DOCBLOCK_BEGIN --></p>\n<ul>\n<li><code class="language-text">pgDefaultRole</code>: The default Postgres role to use. If no role was provided in a provided JWT token, this role will be used.</li>\n<li><code class="language-text">dynamicJson</code>: By default, JSON and JSONB fields are presented as strings (JSON encoded) from the GraphQL schema. Setting this to <code class="language-text">true</code> (recommended) enables raw JSON input and output, saving the need to parse / stringify JSON manually.</li>\n<li><code class="language-text">setofFunctionsContainNulls</code>: If none of your <code class="language-text">RETURNS SETOF compound_type</code> functions mix NULLs with the results then you may set this true to reduce the nullables in the GraphQL schema.</li>\n<li><code class="language-text">classicIds</code>: Enables classic ids for Relay support. Instead of using the field name <code class="language-text">nodeId</code> for globally unique ids, PostGraphile will instead use the field name <code class="language-text">id</code> for its globally unique ids. This means that table <code class="language-text">id</code> columns will also get renamed to <code class="language-text">rowId</code>.</li>\n<li><code class="language-text">disableDefaultMutations</code>: Setting this to <code class="language-text">true</code> will prevent the creation of the default mutation types &#x26; fields. Database mutation will only be possible through Postgres functions.</li>\n<li><code class="language-text">ignoreRBAC</code>: Set false (recommended) to exclude fields, queries and mutations that the user isn\'t permitted to access from the generated GraphQL schema; set this option true to skip these checks and create GraphQL fields and types for everything. The default is <code class="language-text">true</code>, in v5 the default will change to <code class="language-text">false</code>.</li>\n<li><code class="language-text">includeExtensionResources</code>: By default, tables and functions that come from extensions are excluded from the generated GraphQL schema as general applications don\'t need them to be exposed to the end user. You can use this flag to include them in the generated schema (not recommended).</li>\n<li><code class="language-text">showErrorStack</code>: Enables adding a <code class="language-text">stack</code> field to the error response.  Can be either the boolean <code class="language-text">true</code> (which results in a single stack string) or the string <code class="language-text">json</code> (which causes the stack to become an array with elements for each line of the stack). Recommended in development, not recommended in production.</li>\n<li><code class="language-text">extendedErrors</code>: Extends the error response with additional details from the Postgres error.  Can be any combination of <code class="language-text">[&#39;hint&#39;, &#39;detail&#39;, &#39;errcode&#39;]</code>. Default is <code class="language-text">[]</code>.</li>\n<li><code class="language-text">appendPlugins</code>: An array of <a href="/graphile-build/plugins/">Graphile Build</a> plugins to load after the default plugins.</li>\n<li><code class="language-text">prependPlugins</code>: An array of <a href="/graphile-build/plugins/">Graphile Build</a> plugins to load before the default plugins (you probably don\'t want this).</li>\n<li><code class="language-text">replaceAllPlugins</code>: The full array of <a href="/graphile-build/plugins/">Graphile Build</a> plugins to use for schema generation (you almost definitely don\'t want this!).</li>\n<li><code class="language-text">skipPlugins</code>: An array of <a href="/graphile-build/plugins/">Graphile Build</a> plugins to skip.</li>\n<li><code class="language-text">readCache</code>: A file path string. Reads cached values from local cache file to improve startup time (you may want to do this in production).</li>\n<li><code class="language-text">writeCache</code>: A file path string. Writes computed values to local cache file so startup can be faster (do this during the build phase).</li>\n<li><code class="language-text">jwtSecret</code>: The secret for your JSON web tokens. This will be used to verify tokens in the <code class="language-text">Authorization</code> header, and signing JWT tokens you return in procedures.</li>\n<li><code class="language-text">jwtPgTypeIdentifier</code>: The Postgres type identifier for the compound type which will be signed as a JWT token if ever found as the return type of a procedure. Can be of the form: <code class="language-text">my_schema.my_type</code>. You may use quotes as needed: <code class="language-text">&quot;my-special-schema&quot;.my_type</code>.</li>\n<li><code class="language-text">legacyRelations</code>: Some one-to-one relations were previously detected as one-to-many - should we export \'only\' the old relation shapes, both new and old but mark the old ones as \'deprecated\' (default), or \'omit\' (recommended) the old relation shapes entirely.</li>\n<li><code class="language-text">legacyJsonUuid</code>: ONLY use this option if you require the v3 typenames \'Json\' and \'Uuid\' over \'JSON\' and \'UUID\'.</li>\n<li><code class="language-text">simpleCollections</code>: Should we use relay pagination, or simple collections? "omit" (default) - relay connections only, "only" (not recommended) - simple collections only (no Relay connections), "both" - both</li>\n</ul>\n</li>\n</ul>\n<!-- SCHEMA_DOCBLOCK_END -->\n<h4 id="api-watchpostgraphileschemapgconfig-schemaname-options-onnewschema"><a href="#api-watchpostgraphileschemapgconfig-schemaname-options-onnewschema" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>API: <code class="language-text">watchPostGraphileSchema(pgConfig, schemaName, options, onNewSchema)</code></h4>\n<p>This function is takes the same options as <code class="language-text">createPostGraphileSchema</code>; but with\none addition: a function <code class="language-text">onNewSchema</code> that is called every time a new schema\nis generated, passing the new schema as the first argument. <code class="language-text">onNewSchema</code> is\nguaranteed to be called before the <code class="language-text">watchPostGraphileSchema</code> promise resolves.\nIt resolves to an asynchronus function that can be called to stop listening for\nschema changes.</p>\n<!-- // TODO: check this works! -->\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> graphqlSchema<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> releaseWatcher <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">watchPostGraphileSchema</span><span class="token punctuation">(</span>\n    pgPool<span class="token punctuation">,</span>\n    pgSchemas<span class="token punctuation">,</span>\n    options<span class="token punctuation">,</span>\n    newSchema <span class="token operator">=></span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Generated new GraphQL schema"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      graphqlSchema <span class="token operator">=</span> newSchema<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// graphqlSchema is **guaranteed** to be set here.</span>\n\n  <span class="token comment">// ... do stuff with graphqlSchema</span>\n\n  <span class="token keyword">await</span> <span class="token function">releaseWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h4 id="api-withpostgraphilecontextoptions-callback"><a href="#api-withpostgraphilecontextoptions-callback" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>API: <code class="language-text">withPostGraphileContext(options, callback)</code></h4>\n<p>This function sets up a PostGraphile context, calls (and resolves) the callback\nfunction within this context, and then tears the context back down again\nfinally resolving to the result of your function (which should be a\nGraphQLExecutionResult from executing a <code class="language-text">graphql()</code> query).</p>\n<ul>\n<li>\n<p><strong><code class="language-text">options</code></strong>: An object of options that are used to create the context object that gets passed into <code class="language-text">callback</code>.</p>\n<ul>\n<li><code class="language-text">pgPool</code>: A required instance of a Postgres pool from <a href="https://www.npmjs.com/package/pg-pool"><code class="language-text">pg-pool</code></a>. A Postgres client will be connected from this pool.</li>\n<li><code class="language-text">jwtToken</code>: An optional JWT token string. This JWT token represents the viewer of your PostGraphile schema. You might get this from the Authorization header.</li>\n<li><code class="language-text">jwtSecret</code>: see \'jwtSecret\' above</li>\n<li><code class="language-text">jwtAudiences</code>: see \'jwtAudiences\' above</li>\n<li><code class="language-text">jwtRole</code>: see \'jwtRole\' in the library documentation</li>\n<li><code class="language-text">jwtVerifyOptions</code>: see \'jwtVerifyOptions\' in the library documentation</li>\n<li><code class="language-text">pgDefaultRole</code>: see \'pgDefaultRole\' in the library documentation</li>\n<li><code class="language-text">pgSettings</code>: A plain object specifying custom config values to set in the PostgreSQL transaction (accessed via <code class="language-text">current_setting(&#39;my.custom.setting&#39;)</code>) - do <em>NOT</em> provide a function unlike with the library options</li>\n</ul>\n</li>\n<li><strong><code class="language-text">callback</code></strong>: The function which is called with the <code class="language-text">context</code> object which was created. Whatever the return value of this function is will be the return value of <code class="language-text">withPostGraphileContext</code>.</li>\n</ul>\n<h3 id="even-lower-level-access"><a href="#even-lower-level-access" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Even lower level access</h3>\n<p>If you really want to get into the nitty-gritty of what\'s going on, then take a\nlook at the <code class="language-text">postgraphile-core</code> and <code class="language-text">graphile-build-pg</code> modules.</p>',frontmatter:{path:"/postgraphile/usage-schema/",title:"Graphile-Build-PG Usage",showExamples:null}},nav:{edges:[{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [0] >>> JSON",name:"news",sections:[{id:"main",title:"Archive"},{id:"about",title:"About"}],pages:[{to:"/news/postgraphile-version-4/",title:"Version 4 Announcement",sectionId:"main",subpages:null},{to:"/news/press-kit/",title:"Press Kit",sectionId:"about",subpages:null}]}},{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [1] >>> JSON",name:"graphile-build",sections:[{id:"guides",title:"Overview"},{id:"library-reference",title:"Using the Library"},{id:"plugin-reference",title:"Building a Plugin"}],pages:[{to:"/graphile-build/getting-started/",title:"Getting Started",sectionId:"guides",subpages:[]},{to:"/graphile-build/plugins/",title:"Plugins",sectionId:"guides",subpages:[]},{to:"/graphile-build/hooks/",title:"Hooks",sectionId:"guides",subpages:[]},{to:"/graphile-build/look-ahead/",title:"Look Ahead",sectionId:"guides",subpages:[]},{to:"/graphile-build/graphile-build/",title:"graphile-build",sectionId:"library-reference",subpages:[]},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"library-reference",subpages:[]},{to:"/graphile-build/plugin-options/",title:"Options",sectionId:"library-reference",subpages:[]},{to:"/graphile-build/default-plugins/",title:"Default Plugins",sectionId:"library-reference",subpages:[]},{to:"/graphile-build/omitting-plugins/",title:"Omitting Plugins",sectionId:"guides",subpages:[]},{to:"/graphile-build/all-hooks/",title:"All Hooks",sectionId:"plugin-reference",subpages:[]},{to:"/graphile-build/build-object/",title:"Build Object",sectionId:"plugin-reference",subpages:[]},{to:"/graphile-build/context-object/",title:"Context Object",sectionId:"plugin-reference",subpages:[]},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"plugin-reference",subpages:[]}]}},{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [2] >>> JSON",name:"postgraphile",sections:[{id:"overview",title:"Overview"},{id:"basics",title:"Operation"},{id:"customising",title:"Customising"},{id:"guides",title:"Guides"},{id:"community",title:"Community"},{id:"faq",title:"FAQ"}],pages:[{to:"/postgraphile/introduction/",title:"Introduction",sectionId:"overview",subpages:[]},{to:"/postgraphile/examples/",title:"EXAMPLES",sectionId:"overview",subpages:[]},{to:"/postgraphile/usage/",title:"Usage",sectionId:"overview",subpages:[{to:"/postgraphile/usage-cli/",title:"CLI Usage",sectionId:"overview"},{to:"/postgraphile/usage-library/",title:"Library Usage",sectionId:"overview"},{to:"/postgraphile/usage-schema/",title:"Schema-only Usage",sectionId:"overview"}]},{to:"/postgraphile/performance/",title:"Performance",sectionId:"overview",subpages:[]},{to:"/postgraphile/requirements/",title:"Requirements",sectionId:"overview",subpages:[]},{to:"/postgraphile/quick-start-guide/",title:"Quick Start Guide",sectionId:"basics",subpages:[]},{to:"/postgraphile/namespaces/",title:"Namespaces",sectionId:"basics",subpages:null},{to:"/postgraphile/inflection/",title:"Inflection",sectionId:"basics",subpages:null},{to:"/postgraphile/tables/",title:"Tables",sectionId:"basics",subpages:[{to:"/postgraphile/relations/",title:"Relations",sectionId:"basics"},{to:"/postgraphile/connections/",title:"Connections",sectionId:"basics"},{to:"/postgraphile/filtering/",title:"Filtering",sectionId:"basics"},{to:"/postgraphile/crud-mutations/",title:"CRUD Mutations",sectionId:"basics"},{to:"/postgraphile/node-id/",title:"nodeId / id",sectionId:"basics"}]},{to:"/postgraphile/functions/",title:"Functions",sectionId:"basics",subpages:[{to:"/postgraphile/computed-columns/",title:"Computed Columns",sectionId:"basics"},{to:"/postgraphile/custom-queries/",title:"Custom Queries",sectionId:"basics"},{to:"/postgraphile/custom-mutations/",title:"Custom Mutations",sectionId:"basics"},{to:"/postgraphile/function-restrictions/",title:"Function Restrictions",sectionId:"basics"}]},{to:"/postgraphile/postgresql-indexes/",title:"PostgreSQL Indexes",sectionId:"basics",subpages:[]},{to:"/postgraphile/security/",title:"Security",sectionId:"basics",subpages:[]},{to:"/postgraphile/subscriptions/",title:"Subscriptions",sectionId:"basics",subpages:[]},{to:"/postgraphile/reserved-keywords/",title:"Reserved Keywords",sectionId:"basics",subpages:[]},{to:"/postgraphile/debugging/",title:"Debugging",sectionId:"basics",subpages:[]},{to:"/postgraphile/smart-comments/",title:"Smart Comments",sectionId:"customising",subpages:[]},{to:"/postgraphile/extending/",title:"Schema Plugins",sectionId:"customising",subpages:[{to:"/postgraphile/make-extend-schema-plugin/",title:"makeExtendSchemaPlugin",sectionId:"customising"},{to:"/postgraphile/make-add-inflectors-plugin/",title:"makeAddInflectorsPlugin",sectionId:"customising"},{to:"/postgraphile/extending-raw/",title:"Graphile Engine",sectionId:"customising"},{to:"/postgraphile/plugin-gallery/",title:"Plugin Gallery",sectionId:"customising"}]},{to:"/postgraphile/plugins/",title:"Server Plugins",sectionId:"customising",subpages:[]},{to:"/postgraphile/evaluating/",title:"Evaluating for your Project",sectionId:"guides",subpages:[]},{to:"/postgraphile/postgresql-schema-design/",title:"PostgreSQL Schema Design",sectionId:"guides",subpages:[]},{to:"/postgraphile/production/",title:"Production Considerations",sectionId:"guides",subpages:[]},{to:"/postgraphile/jwt-guide/",title:"PostGraphile JWT Guide",sectionId:"guides",subpages:[]},{to:"/postgraphile/default-role/",title:"The Default Role",sectionId:"guides",subpages:[]},{to:"/postgraphile/v4-new-features/",title:"v4 Feature Guide",sectionId:"guides",subpages:[]},{to:"/postgraphile/v3-migration/",title:"v3 → v4 Migration Guide",sectionId:"guides",subpages:[]},{to:"/postgraphile/testing-jest/",title:"Testing with Jest",sectionId:"guides",subpages:[]},{to:"/postgraphile/community-plugins/",title:"Community Plugins",sectionId:"community",subpages:[]},{to:"/postgraphile/community-chat/",title:"Community Chat",sectionId:"community",subpages:[]},{to:"/postgraphile/code-of-conduct/",title:"Code of Conduct",sectionId:"community",subpages:[]},{to:"/postgraphile/introspection/",title:"Introspection?",sectionId:"faq",subpages:[]},{to:"/postgraphile/why-nullable/",title:"Why is it nullable?",sectionId:"faq",subpages:[]}]}},{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [3] >>> JSON",name:"graphile-build-pg",sections:[{id:"overview",title:"Usage"}],pages:[{to:"/graphile-build-pg/settings/",title:"Settings",sectionId:"overview",subpages:[]}]}}]},examples:{edges:[{node:{category:"plugins",id:"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [0] >>> JSON",title:"Inflector",examples:[{title:"PgRenamePatchToChangeSetPlugin",example:'/**\n * Simply renames the `UserPatch` and `PostPatch` type names to be called\n * `UserChangeSet` and `PostChangeSet` instead.\n *\n * Not particularly useful, just an example.\n *\n * Replaces this inflector:\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L309-L311\n */\nconst { makeAddInflectorsPlugin } = require("graphile-utils");\n\nmodule.exports = makeAddInflectorsPlugin({\n  patchType(typeName) {\n    // return this.upperCamelCase(`${typeName}-patch`);\n    return this.upperCamelCase(`${typeName}-change-set`);\n  },\n});\n',exampleLanguage:"javascript",result:"",resultLanguage:""},{title:"PgShortenAllRowsInflectorPlugin",example:'/**\n * Simply renames the `allUsers` and `allPosts` Query fields to `users` and\n * `posts` respectively.\n *\n * Not particularly useful, just an example.\n *\n * Replaces this inflector:\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L460-L464\n */\nconst { makeAddInflectorsPlugin } = require("graphile-utils");\n\nmodule.exports = makeAddInflectorsPlugin({\n  allRows(table) {\n    return this.camelCase(\n      // Was: `all-${this.pluralize(this._singularizedTableName(table))}`\n      // Now:\n      this.pluralize(this._singularizedTableName(table))\n    );\n  },\n});\n',exampleLanguage:"javascript",result:"",resultLanguage:""}]}},{node:{category:"plugins",id:"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [1] >>> JSON",title:"Types",examples:[{title:"PgNumericToFloatPlugin",example:'/**\n * Use of this plugin is NOT recommended, please see\n * PgSmallNumericToFloatPlugin for a more appropriate replacement if you need\n * one.\n *\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\n * for *all* DECIMAL / NUMERIC values, for making PostGraphile v4 slightly more\n * backwards-compatible with v3.\n *\n * It\'s generally a bad idea to use floating point numbers to represent\n * arbitrary precision numbers such as NUMERIC because loss of precision can\n * occur.\n */\nmodule.exports = function PgNumericToFloatPlugin(builder) {\n  builder.hook("init", (_init, build) => {\n    // Register a type handler for NUMERIC / DECIMAL (oid = 1700), always\n    // returning the GraphQLFloat type\n    build.pgRegisterGqlTypeByTypeId("1700", () => build.graphql.GraphQLFloat);\n    return _init;\n  });\n};\n',exampleLanguage:"javascript",result:"",resultLanguage:""},{title:"PgSmallNumericToFloatPlugin",example:'/**\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\n * for DECIMAL / NUMERIC values that have a precision and scale under the given\n * limits (currently 12 and 2 respectively).\n *\n * It\'s generally a bad idea to use floating point numbers to represent\n * arbitrary precision numbers such as NUMERIC because loss of precision can\n * occur; however some systems are okay with this compromise.\n */\nmodule.exports = function PgSmallNumericToFloatPlugin(\n  builder,\n  { pgNumericToFloatPrecisionCap = 12, pgNumericToFloatScaleCap = 2 }\n) {\n  builder.hook("init", (_init, build) => {\n    // Register a type handler for NUMERIC / DECIMAL (oid = 1700)\n    build.pgRegisterGqlTypeByTypeId("1700", (_set, modifier) => {\n      if (modifier && typeof modifier === "number" && modifier > 0) {\n        // Ref: https://stackoverflow.com/a/3351120/141284\n        const precision = ((modifier - 4) >> 16) & 65535;\n        const scale = (modifier - 4) & 65535;\n        if (\n          precision <= pgNumericToFloatPrecisionCap &&\n          scale <= pgNumericToFloatScaleCap\n        ) {\n          // This number is no more precise than our cap, so we\'re declaring\n          // that we can handle it as a float:\n          return build.graphql.GraphQLFloat;\n        }\n      }\n      // If all else fails, let PostGraphile do it\'s default handling - i.e.\n      // BigFloat\n      return null;\n    });\n\n    // We didn\'t modify _init, but we still must return it.\n    return _init;\n  });\n};\n',
exampleLanguage:"javascript",result:"",resultLanguage:""}]}},{node:{category:"queries",id:"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [2] >>> JSON",title:"Basic",examples:[{title:"Forums",example:"{\n  allForums {\n    nodes {\n      nodeId\n      id\n      slug\n      name\n      description\n    }\n  }\n}\n",exampleLanguage:"graphql",result:'{\n  "allForums": {\n    "nodes": [\n      {\n        "nodeId": "WyJmb3J1bXMiLDFd",\n        "id": 1,\n        "slug": "cat-life",\n        "name": "Cat Life",\n        "description":\n          "A forum all about cats and how fluffy they are and how they completely ignore their owners unless there is food. Or yarn."\n      },\n      {\n        "nodeId": "WyJmb3J1bXMiLDJd",\n        "id": 2,\n        "slug": "dog-life",\n        "name": "Dog Life",\n        "description": ""\n      },\n      {\n        "nodeId": "WyJmb3J1bXMiLDNd",\n        "id": 3,\n        "slug": "slug-life",\n        "name": "Slug Life",\n        "description": ""\n      }\n    ]\n  }\n}\n',resultLanguage:"json"},{title:"Forum by slug",example:'{\n  forumBySlug(slug: "slug-life") {\n    nodeId\n    id\n    slug\n    name\n    description\n  }\n}\n',exampleLanguage:"graphql",result:'{\n  "forumBySlug": {\n    "nodeId": "WyJmb3J1bXMiLDNd",\n    "id": 3,\n    "slug": "slug-life",\n    "name": "Slug Life",\n    "description": ""\n  }\n}\n',resultLanguage:"json"}]}},{node:{category:"queries",id:"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [3] >>> JSON",title:"Collections",examples:[{title:"First offset",example:"{\n  allForums(first: 1, offset: 1) {\n    nodes {\n      nodeId\n      id\n      name\n    }\n  }\n}\n",exampleLanguage:"graphql",result:'{\n  "allForums": {\n    "nodes": [\n      {\n        "nodeId": "WyJmb3J1bXMiLDJd",\n        "id": 2,\n        "name": "Dog Life"\n      }\n    ]\n  }\n}\n',resultLanguage:"json"},{title:"Relation condition",example:'{\n  forumBySlug(slug: "cat-life") {\n    nodeId\n    id\n    name\n    topics(\n      condition: { authorId: 1 }\n    ) {\n      nodes {\n        nodeId\n        id\n        title\n      }\n    }\n  }\n}\n',exampleLanguage:"graphql",result:'{\n  "forumBySlug": {\n    "nodeId": "WyJmb3J1bXMiLDFd",\n    "id": 1,\n    "name": "Cat Life",\n    "topics": {\n      "nodes": [\n        {\n          "nodeId":\n            "WyJ0b3BpY3MiLDFd",\n          "id": 1,\n          "title": "cats cats cats"\n        },\n        {\n          "nodeId":\n            "WyJ0b3BpY3MiLDJd",\n          "id": 2,\n          "title": "snooze life"\n        },\n        {\n          "nodeId":\n            "WyJ0b3BpY3MiLDNd",\n          "id": 3,\n          "title": "too hot"\n        }\n      ]\n    }\n  }\n}\n',resultLanguage:"json"}]}},{node:{category:"queries",id:"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [4] >>> JSON",title:"Relations",examples:[{title:"Forums topics posts",example:"{\n  forumById(id: 1) {\n    name\n    topics(\n      first: 1\n      orderBy: [CREATED_AT_ASC]\n    ) {\n      nodes {\n        id\n        title\n        bodySummary\n        author {\n          id\n          username\n        }\n        posts(\n          first: 1\n          orderBy: [ID_DESC]\n        ) {\n          nodes {\n            id\n            author {\n              id\n              username\n            }\n            body\n          }\n        }\n      }\n    }\n  }\n}\n",exampleLanguage:"graphql",result:'{\n  "forumById": {\n    "name": "Cat Life",\n    "topics": {\n      "nodes": [\n        {\n          "id": 1,\n          "title": "cats cats cats",\n          "bodySummary":\n            "lets discuss cats because t...",\n          "author": {\n            "id": 1,\n            "username": "user"\n          },\n          "posts": {\n            "nodes": [\n              {\n                "id": 3,\n                "author": {\n                  "id": 1,\n                  "username": "user"\n                },\n                "body":\n                  "I love it when they completely ignore you until they want something. So much better than dogs am I rite?"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n',resultLanguage:"json"}]}},{node:{category:"queries",id:"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [5] >>> JSON",title:"Mutations",examples:[{title:"Create",example:'mutation {\n  createTopic(\n    input: {\n      topic: {\n        forumId: 1\n        title: "My question relates to mutations..."\n        body: "How do you write them?"\n      }\n    }\n  ) {\n    topic {\n      nodeId\n      id\n      forumId\n      title\n      body\n    }\n  }\n}\n',exampleLanguage:"graphql",result:'{\n  "createTopic": {\n    "topic": {\n      "nodeId": "WyJ0b3BpY3MiLDRd",\n      "id": 4,\n      "forumId": 1,\n      "title":\n        "My question relates to mutations...",\n      "body": "How do you write them?"\n    }\n  }\n}\n',resultLanguage:"json"},{title:"Update",example:"mutation {\n  updateTopicById(\n    input: {\n      id: 1\n      topicPatch: {\n        title: \"My (edited) title\"\n      }\n    }\n  ) {\n    topic {\n      nodeId\n      id\n      title\n      body\n    }\n  }\n}\n\n# Works for a table like:\n#\n#   create table app_public.topics (\n#     id serial primary key,\n#     forum_id integer NOT NULL references app_public.forums on delete cascade,\n#     title text NOT NULL,\n#     body text DEFAULT ''::text NOT NULL\n#   );\n",exampleLanguage:"graphql",result:'{\n  "updateTopicById": {\n    "topic": {\n      "nodeId": "WyJ0b3BpY3MiLDFd",\n      "id": 1,\n      "title": "My (edited) title",\n      "body":\n        "lets discuss cats because theyre totally cool"\n    }\n  }\n}\n',resultLanguage:"json"},{title:"Delete",example:"mutation {\n  deleteTopicById(input: { id: 1 }) {\n    deletedTopicId\n  }\n}\n",exampleLanguage:"graphql",result:'{\n  "deleteTopicById": {\n    "deletedTopicId":\n      "WyJ0b3BpY3MiLDFd"\n  }\n}\n',resultLanguage:"json"}]}},{node:{category:"queries",id:"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [6] >>> JSON",title:"Custom queries",examples:[{title:"Single scalar",example:"{\n  randomNumber\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.random_number() returns int\n#  language sql stable\n#  as $$\n#    select 4; -- Chosen by fair dice roll. Guaranteed to be random. XKCD#221\n#  $$;\n#\n",exampleLanguage:"graphql",result:'{ "randomNumber": 4 }\n',resultLanguage:"json"},{title:"Single row",example:"{\n  currentUser {\n    nodeId\n    id\n    username\n  }\n}\n\n# Added to the GraphQL schema via\n# this SQL:\n#\n#   create function current_user()\n#   returns app_public.users\n#   language sql stable\n#   as $$\n#     select users.*\n#     from app_public.users\n#     where id = current_user_id();\n#   $$;\n",exampleLanguage:"graphql",result:'{\n  "currentUser": {\n    "nodeId": "WyJ1c2VycyIsMV0=",\n    "id": 1,\n    "username": "user"\n  }\n}\n',resultLanguage:"json"},{title:"Rows connection",example:"{\n  forumsAboutCats {\n    nodes {\n      nodeId\n      id\n      name\n      slug\n    }\n  }\n}\n\n# Created from SQL like:\n#\n#  create function app_public.forums_about_cats()\n#  returns setof app_public.forums\n#  language sql stable\n#  as $$\n#    select *\n#    from app_public.forums\n#    where slug like 'cat-%';\n#  $$;\n",exampleLanguage:"graphql",result:'{\n  "forumsAboutCats": {\n    "nodes": [\n      {\n        "nodeId": "WyJmb3J1bXMiLDFd",\n        "id": 1,\n        "name": "Cat Life",\n        "slug": "cat-life"\n      }\n    ]\n  }\n}\n',resultLanguage:"json"}]}},{node:{category:"queries",id:"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [7] >>> JSON",title:"Custom mutations",examples:[{title:"Forgot password",example:"mutation {\n  forgotPassword(\n    input: {\n      email: \"user@example.com\"\n    }\n  ) {\n    success\n  }\n}\n\n# Generated with SQL like this:\n#\n#  create function forgot_password(email text)\n#  returns boolean\n#  language plpgsql volatile\n#  as $$\n#    ...\n#  $$;\n#\n#  -- Optionally rename the result field:\n#  comment on function\n#    forgot_password(email text)\n#    is '@resultFieldName success';\n",exampleLanguage:"graphql",result:'{\n  "forgotPassword": {\n    "success": true\n  }\n}\n',resultLanguage:"json"}]}},{node:{category:"queries",id:"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [8] >>> JSON",title:"Computed columns",examples:[{title:"Topic summary",example:"{\n  topicById(id: 2) {\n    body\n    bodySummary\n  }\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.topics_body_summary(\n#    t app_public.topics,\n#    max_length int = 30\n#  )\n#  returns text\n#  language sql stable\n#  as $$\n#    select case\n#      when length(t.body) > max_length\n#      then left(t.body, max_length - 3)\n#             || '...'\n#      else t.body\n#      end;\n#  $$;\n",exampleLanguage:"graphql",result:'{\n  "topicById": {\n    "body":\n      "do you find your cat just sleeps everywhere",\n    "bodySummary":\n      "do you find your cat just s..."\n  }\n}\n',resultLanguage:"json"},{title:"Topic summary with arg",example:"{\n  topicById(id: 2) {\n    body\n    bodySummary(maxLength: 20)\n  }\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.topics_body_summary(\n#    t app_public.topics,\n#    max_length int = 30\n#  )\n#  returns text\n#  language sql stable\n#  as $$\n#    select case\n#      when length(t.body) > max_length\n#      then left(t.body, max_length - 3)\n#             || '...'\n#      else t.body\n#      end;\n#  $$;\n",exampleLanguage:"graphql",result:'{\n  "topicById": {\n    "body":\n      "do you find your cat just sleeps everywhere",\n    "bodySummary":\n      "do you find your ..."\n  }\n}\n',resultLanguage:"json"}]}}]}},pathContext:{layout:"page"}}}});
//# sourceMappingURL=path---postgraphile-usage-schema-39c462667afdf5764f5d.js.map