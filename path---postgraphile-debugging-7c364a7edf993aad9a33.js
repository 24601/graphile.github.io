webpackJsonp([58450730530065],{396:function(e,t){e.exports={data:{remark:{html:'<h2 id="debugging"><a href="#debugging" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Debugging</h2>\n<p>When something\'s wrong with your app it can be hugely frustrating; so we want to make\nit as easy as we can for you to get to the bottom of these issues!</p>\n<h3 id="step-1-check-youre-requesting-what-you-think-youre-requesting"><a href="#step-1-check-youre-requesting-what-you-think-youre-requesting" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Step 1: check you\'re requesting what you think you\'re requesting</h3>\n<p>Often issues occur because your client code isn\'t doing what you think it\'s\ndoing. The first step here is to determine exactly what\'s being sent over the\nnetwork. If you\'re building a website you can easily use Google Chrome\'s\nNetwork Devtools to see exactly what\'s being sent and received.</p>\n<ol>\n<li>Open your website in Chrome</li>\n<li>Right click, and select \'Inspect\'</li>\n<li>Select the \'Network\' tab in the developer tools</li>\n<li>In the filter box, enter \'/graphql\' (or whatever path you have configured your API to use)</li>\n<li>Ensure that \'All\' is selected to the right of the filter box</li>\n<li>Trigger your GraphQL request (either by reloading the page or by clicking the relevant element on the screen)</li>\n<li>Review the network requests that have arrived to ensure they\'re what you\'d expect, that no variables are unexpectedly null, that the relevant access tokens are being set in the request headers, etc</li>\n</ol>\n<h3 id="step-2-try-your-query-in-graphiql"><a href="#step-2-try-your-query-in-graphiql" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Step 2: try your query in GraphiQL</h3>\n<p>It sometimes helps to try doing the same thing a different way, and this is\nwhere GraphiQL comes in handy. Take the query you\'re running and execute it via\nGraphiQL. Is it producing the same issue? Note that we currently do not support\nsetting headers in GraphiQL (although it is set to use <code class="language-text">Credentials:\nsame-origin</code> which is helpful if you\'re using cookie-based sessions).</p>\n<h3 id="step-3-viewing-the-generated-sql"><a href="#step-3-viewing-the-generated-sql" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Step 3: viewing the generated SQL</h3>\n<p>Assuming that the error is coming from within the database, you can see what\nSQL statements PostGraphile is generating. To do so, restart PostGraphile,\nbeing sure to set the relevant <a href="https://github.com/visionmedia/debug">DEBUG</a>\nenvironmental variable first. For example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">export</span> DEBUG<span class="token operator">=</span><span class="token string">"postgraphile:postgres"</span></code></pre>\n      </div>\n<p>Note that this works with PostGraphile CLI and also when using PostGraphile as an express middleware.</p>\n<p>To find details of any errors thrown whilst executing SQL, use:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">export</span> DEBUG<span class="token operator">=</span><span class="token string">"postgraphile:postgres,postgraphile:postgres:error"</span>\n<span class="token comment"># or:</span>\n<span class="token function">export</span> DEBUG<span class="token operator">=</span><span class="token string">"postgraphile:postgres*"</span></code></pre>\n      </div>\n<h3 id="debug-envvars"><a href="#debug-envvars" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DEBUG envvars</h3>\n<p>We use a lot of DEBUG envvars for different parts of the system. Here\'s some of the ones you might care about:</p>\n<ul>\n<li><code class="language-text">postgraphile:cli</code> - informs about plugins being loaded</li>\n<li><code class="language-text">postgraphile:graphql</code> - prints out the full GraphQL query after validation and before execution</li>\n<li><code class="language-text">postgraphile:request</code> - prints out statuses during the HTTP request life-cycle</li>\n<li><code class="language-text">postgraphile:postgres</code> - prints out every SQL statement that\'s issued to the database (does not include placeholder values)</li>\n<li><code class="language-text">postgraphile:postgres:error</code> - outputs any errors generated whilst executing SQL statements</li>\n<li><code class="language-text">graphile-builder</code> - desperately in need of renaming, this hook is extremely useful for understanding the order in which hooks execute, and how hook executions can nest - a must for people getting started with graphile-build plugins</li>\n<li><code class="language-text">graphile-build-pg</code> - prints out various things, many of which should not occur. Also used to output errors from the update/delete mutations (where <code class="language-text">null</code> is returned to GraphQL)</li>\n<li><code class="language-text">graphile-build-pg:warn</code> - prints out warnings that occur during schema generation; these warnings might hint at field conflicts and similar issues</li>\n<li><code class="language-text">graphile-build-pg:sql</code> - prints out <em>some</em> SQL statements, you probably want <code class="language-text">postgraphile:postgres</code> instead</li>\n<li><code class="language-text">graphql-parse-resolve-info</code> - far more information than you could possibly need regarding how we process the resolveInfo / AST</li>\n</ul>\n<p>To enable these DEBUG modes, join them with commas when setting a DEBUG envvar, then run PostGraphile or your Node.js server in the same terminal:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">export</span> DEBUG<span class="token operator">=</span><span class="token string">"postgraphile:graphql,postgraphile:request,postgraphile:postgres*"</span>\npostgraphile -c postgres://<span class="token punctuation">..</span>.</code></pre>\n      </div>\n<h3 id="advanced-getting-your-hands-dirty"><a href="#advanced-getting-your-hands-dirty" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Advanced: getting your hands dirty</h3>\n<p>If you\'re a plugin author, you think you\'ve discovered an issue in\nPostGraphile, or you just like seeing how things work, you can use the Chrome\nDebug tools to debug the node process - add breakpoints, break on exceptions,\nand step through code execution.</p>\n<ol>\n<li>Visit <code class="language-text">chrome://inspect</code> in Google Chrome (we can\'t hyperlink it for security reasons).</li>\n<li>Select \'Open dedicated DevTools for Node\', a new devtools window should open - don\'t close this!</li>\n<li>Run your server or PostGraphile via Node.js directly, in <code class="language-text">--inspect</code> mode, e.g.:</li>\n</ol>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text"># For globally installed PostGraphile:\nnode --inspect `which postgraphile`\n\n# or for locally installed PostGraphile:\nnode --inspect node_modules/.bin/postgraphile\n\n# or, if you have your own Node.js app in `server.js`:\nnode --inspect server.js</code></pre>\n      </div>',frontmatter:{path:"/postgraphile/debugging/",title:"Debugging"}},nav:{edges:[{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [0] >>> JSON",name:"graphile-build",sections:[{id:"guides",title:"Overview"},{id:"library-reference",title:"Using the Library"},{id:"plugin-reference",title:"Building a Plugin"}],pages:[{to:"/graphile-build/getting-started/",title:"Getting Started",sectionId:"guides"},{to:"/graphile-build/plugins/",title:"Plugins",sectionId:"guides"},{to:"/graphile-build/hooks/",title:"Hooks",sectionId:"guides"},{to:"/graphile-build/look-ahead/",title:"Look Ahead",sectionId:"guides"},{to:"/graphile-build/graphile-build/",title:"graphile-build",sectionId:"library-reference"},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"library-reference"},{to:"/graphile-build/plugin-options/",title:"Options",sectionId:"library-reference"},{to:"/graphile-build/default-plugins/",title:"Default Plugins",sectionId:"library-reference"},{to:"/graphile-build/omitting-plugins/",title:"Omitting Plugins",sectionId:"guides"},{to:"/graphile-build/all-hooks/",title:"All Hooks",sectionId:"plugin-reference"},{to:"/graphile-build/build-object/",title:"Build Object",sectionId:"plugin-reference"},{to:"/graphile-build/context-object/",title:"Context Object",sectionId:"plugin-reference"},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"plugin-reference"}]}},{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [1] >>> JSON",name:"postgraphile",sections:[{id:"overview",title:"Overview"},{id:"guides",title:"Guides"},{id:"usage",title:"Usage"}],pages:[{to:"/postgraphile/introduction/",title:"Introduction",sectionId:"overview"},{to:"/postgraphile/quick-start-guide/",title:"Quick Start Guide",sectionId:"overview"},{to:"/postgraphile/evaluating/",title:"Evaluating for your Project",sectionId:"guides"},{to:"/postgraphile/requirements/",title:"Requirements",sectionId:"overview"},{to:"/postgraphile/performance/",title:"Performance",sectionId:"overview"},{to:"/postgraphile/connections/",title:"Connections",sectionId:"overview"},{to:"/postgraphile/filtering/",title:"Filtering",sectionId:"overview"},{to:"/postgraphile/relations/",title:"Relations",sectionId:"overview"},{to:"/postgraphile/crud-mutations/",title:"CRUD Mutations",sectionId:"overview"},{to:"/postgraphile/computed-columns/",title:"Computed Columns",sectionId:"overview"},{to:"/postgraphile/custom-queries/",title:"Custom Queries",sectionId:"overview"},{to:"/postgraphile/custom-mutations/",title:"Custom Mutations",sectionId:"overview"},{to:"/postgraphile/smart-comments/",title:"Smart Comments",sectionId:"overview"},{to:"/postgraphile/security/",title:"Security",sectionId:"overview"},{to:"/postgraphile/introspection/",title:"Introspection",sectionId:"overview"},{to:"/postgraphile/extending/",title:"Schema Plugins",sectionId:"overview"},{to:"/postgraphile/plugins/",title:"Server Plugins",sectionId:"overview"},{to:"/postgraphile/subscriptions/",title:"Subscriptions",sectionId:"overview"},{to:"/postgraphile/production/",title:"Production Considerations",sectionId:"overview"},{to:"/postgraphile/reserved-keywords/",title:"Reserved Keywords",sectionId:"overview"},{to:"/postgraphile/debugging/",title:"Debugging",sectionId:"overview"},{to:"/postgraphile/jwt-guide/",title:"PostGraphile JWT Guide",sectionId:"guides"},{to:"/postgraphile/default-role/",title:"The Default Role",sectionId:"guides"},{to:"/postgraphile/procedures/",title:"PostgreSQL Procedures",sectionId:"guides"},{to:"/postgraphile/postgresql-schema-design/",title:"PostgreSQL Schema Design",sectionId:"guides"},{to:"/postgraphile/postgresql-indexes/",title:"PostgreSQL Indexes",sectionId:"guides"},{to:"/postgraphile/v4-new-features/",title:"v4 Feature Guide",sectionId:"guides"},{to:"/postgraphile/v3-migration/",title:"v3 → v4 Migration Guide",sectionId:"guides"},{to:"/postgraphile/usage-cli/",title:"CLI Usage",sectionId:"usage"},{to:"/postgraphile/usage-library/",title:"Library Usage",sectionId:"usage"},{to:"/postgraphile/usage-schema/",title:"Schema-only Usage",sectionId:"usage"}]}},{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [2] >>> JSON",name:"graphile-build-pg",sections:[{id:"usage",title:"Usage"}],pages:[{to:"/postgraphile/settings/",title:"Settings",sectionId:"usage"}]}}]}},pathContext:{layout:"page"}}}});
//# sourceMappingURL=path---postgraphile-debugging-7c364a7edf993aad9a33.js.map