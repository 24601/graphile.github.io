{"version":3,"sources":["webpack:///path---docs-hooks-612b6438d9b4912064ad.js","webpack:///./.cache/json/docs-hooks.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/docs-hooks.json","module","exports","data","remark","html","frontmatter","path","title","nav","edges","node","id","to","pathContext","layout"],"mappings":"AAAAA,cAAc,qBAERC,oEACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,QACAC,KAAA,04kBACAC,aACAC,KAAA,eACAC,MAAA,UAGAC,KACAC,QAEAC,MACAC,GAAA,uGACAC,GAAA,yBACAL,MAAA,qBAIAG,MACAC,GAAA,uGACAC,GAAA,iBACAL,MAAA,aAIAG,MACAC,GAAA,uGACAC,GAAA,eACAL,MAAA,WAIAG,MACAC,GAAA,uGACAC,GAAA,oBACAL,MAAA,kBAMAM,aACAC,OAAA","file":"path---docs-hooks-612b6438d9b4912064ad.js","sourcesContent":["webpackJsonp([7614518986689938000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/docs-hooks.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"remark\": {\n\t\t\t\t\"html\": \"<h2 id=\\\"hooks\\\"><a href=\\\"#hooks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hooks</h2>\\n<p>The most common thing for a plugin to do is to add hooks to the builder. Hooks\\nallow you to manipulate the specification that is being passed to the GraphQL\\nconstructors before the objects are constructed - therefore bypassing the need\\nto fiddle with the private interfaces to GraphQL.</p>\\n<p>Hooks are registered via a call to <code>builder.hook(hookName, hookFunction)</code>.</p>\\n<p>Every <code>hookFunction</code> must synchronously return a value - either the value that it was passed\\nin or a derivative of it.</p>\\n<p>You can think of hooks as wrappers around the original object spec, like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> MyType <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">newWithHooks</span><span class=\\\"token punctuation\\\">(</span>GraphQLObjectType<span class=\\\"token punctuation\\\">,</span> spec<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// is equivalent to:</span>\\n\\n<span class=\\\"token keyword\\\">const</span> MyType <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">GraphQLObjectType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">hook3</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">hook2</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">hook1</span><span class=\\\"token punctuation\\\">(</span>spec<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"hook-names\\\"><a href=\\\"#hook-names\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hook names</h3>\\n<p>The following hooks are currently supported, but more may be added in future.\\nTrying to add a hook for a hook name that does not exist will result in an\\nerror.</p>\\n<p><a href=\\\"https://github.com/benjie/graphql-build/blob/996e28f0af68f53e264170bd4528b6500ff3ef25/packages/graphql-build/SchemaBuilder.js#L11-L59\\\">(See hooks in the source)</a></p>\\n<ul>\\n<li>\\n<p><code>build</code>: The build object represents the current schema build and is passed\\nto all hooks, hook the 'build' event to extend this object.</p>\\n</li>\\n<li>\\n<p><code>init</code>: The init event is triggered after <code>build</code> (which should not generate\\nany GraphQL objects) and can be used to build common object types that may be\\nuseful later. The argument to this is an empty object and should be passed\\nthrough unmodified (it is ignored currently).</p>\\n</li>\\n<li>\\n<p><code>GraphQLSchema</code>: This event defines the root-level schema; hook it to add <code>query</code>,\\n<code>mutation</code>, <code>subscription</code> or similar GraphQL fields.</p>\\n</li>\\n<li>\\n<p><code>GraphQLObjectType*</code>: When creating a GraphQLObjectType via\\n<code>newWithHooks</code>, we'll execute, the following hooks:</p>\\n<ul>\\n<li><code>GraphQLObjectType</code> to add any root-level attributes, e.g. add a description</li>\\n<li><code>GraphQLObjectType:interfaces</code> to add additional interfaces to this object type</li>\\n<li><code>GraphQLObjectType:fields</code> to add additional fields to this object type (is\\nran asynchronously and gets a reference to the final GraphQL Object as\\n<code>Self</code> in the context)</li>\\n<li><code>GraphQLObjectType:fields:field</code>: to add any root-level attributes to an\\nindividual field, e.g. add a description</li>\\n<li><code>GraphQLObjectType:fields:field:args</code> to add arguments to an individual field</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>GraphQLInputObjectType*</code>: When creating a GraphQLInputObjectType via\\n<code>newWithHooks</code>, we'll execute, the following hooks:</p>\\n<ul>\\n<li><code>GraphQLInputObjectType</code> to add any root-level attributes, e.g. add a description</li>\\n<li><code>GraphQLInputObjectType:fields</code> to add additional fields to this object type (is\\nran asynchronously and gets a reference to the final GraphQL Object as\\n<code>Self</code> in the context)</li>\\n<li><code>GraphQLInputObjectType:fields:field</code>: to customize an individual field from above</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>GraphQLEnumType*</code>: When creating a GraphQLEnumType via <code>newWithHooks</code>,\\nwe'll execute, the following hooks:</p>\\n<ul>\\n<li><code>GraphQLEnumType</code> to add any root-level attributes, e.g. add a description</li>\\n<li><code>GraphQLEnumType:values</code> to add additional values</li>\\n</ul>\\n</li>\\n</ul>\\n<h3 id=\\\"hook-arguments\\\"><a href=\\\"#hook-arguments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hook arguments</h3>\\n<p>The <code>hookFunction</code> that you register via <code>builder.hook(hookName, hookFunction)</code> will be called with 3 arguments:</p>\\n<ol>\\n<li>The input object (e.g. the spec that would be passed to the GraphQLObjectType constructor)</li>\\n<li>The <code>Build</code> object (see below)</li>\\n<li>The <code>Context</code> object (see below) which contains a <code>scope</code> property</li>\\n</ol>\\n<h4 id=\\\"input-object\\\"><a href=\\\"#input-object\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Input object</h4>\\n<p>Depending on the hook being called the input object might be an array (as in\\nthe case of <code>GraphQLObjectType:interfaces</code>) or an object (as in all other\\ncases, currently). More specifically, the types for each hook are:</p>\\n<ul>\\n<li>\\n<p>build - a <code>Build</code> object (see below)</p>\\n</li>\\n<li>\\n<p>init - an opaque object, please just return it verbatim</p>\\n</li>\\n<li>\\n<p>GraphQLSchema - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlschema\\\"><code>GraphQLSchemaConfig</code></a></p>\\n</li>\\n<li>\\n<p>GraphQLObjectType - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlobjecttype\\\"><code>GraphQLObjectTypeConfig</code></a></p>\\n</li>\\n<li>\\n<p>GraphQLObjectType:interfaces - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlinterfacetype\\\">array of <code>GraphQLInterfaceType</code> instances</a></p>\\n</li>\\n<li>\\n<p>GraphQLObjectType:fields - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlobjecttype\\\"><code>GraphQLFieldConfigMap</code></a></p>\\n</li>\\n<li>\\n<p>GraphQLObjectType:fields:field - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlobjecttype\\\"><code>GraphQLFieldConfig</code></a></p>\\n</li>\\n<li>\\n<p>GraphQLObjectType:fields:field:args - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlobjecttype\\\"><code>GraphQLFieldConfigArgumentMap</code></a></p>\\n</li>\\n<li>\\n<p>GraphQLInputObjectType - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlinputobjecttype\\\"><code>GraphQLInputObjectTypeConfig</code></a></p>\\n</li>\\n<li>\\n<p>GraphQLInputObjectType:fields - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlinputobjecttype\\\"><code>GraphQLInputObjectConfigFieldMap</code></a></p>\\n</li>\\n<li>\\n<p>GraphQLInputObjectType:fields:field - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlinputobjecttype\\\"><code>GraphQLInputObjectFieldConfig</code></a></p>\\n</li>\\n<li>\\n<p>GraphQLEnumType - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlenumtype\\\"><code>GraphQLEnumTypeConfig</code></a></p>\\n</li>\\n<li>\\n<p>GraphQLEnumType:values - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlenumtype\\\"><code>GraphQLEnumValueConfigMap</code></a></p>\\n</li>\\n</ul>\\n<h4 id=\\\"build-object-build\\\"><a href=\\\"#build-object-build\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Build object (<code>Build</code>)</h4>\\n<p>The build object starts out with the following properties/methods, but plugins may extend it via the <code>build</code> hook.</p>\\n<h5 id=\\\"newwithhookstype-spec-scope\\\"><a href=\\\"#newwithhookstype-spec-scope\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>newWithHooks(type, spec, scope)</code></h5>\\n<p>The bread-and-butter of GraphQL-Build, this method is how we build hooked GraphQL objects:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> MyType <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">newWithHooks</span><span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">,</span> spec<span class=\\\"token punctuation\\\">,</span> scope<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li><code>type</code> is a GraphQL object type, such as <code>GraphQLEnumType</code> or <code>GraphQLInputObjectType</code></li>\\n<li><code>spec</code> is a valid specification that will be passed through the relevant\\nhooks before ultimately being passed to the constructor of the aforementioned\\n<code>type</code> and returning an instance of that type</li>\\n<li><code>scope</code> is where you can add scope information that will be available through\\nthe <code>scope</code> property in the context object passed to hooks (see <code>Context</code>\\nbelow)</li>\\n</ul>\\n<h5 id=\\\"buildextendinput-extensions\\\"><a href=\\\"#buildextendinput-extensions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>build.extend(input, extensions)</code></h5>\\n<p>Returns a new object by merging the properties of <code>input</code> and <code>extensions</code>\\n<strong>without overwriting</strong>. If any clashes occur an error will be throw. It is\\nadvisable to use this instead of <code>Object.assign</code> or <code>{...input, ...extensions}</code>\\nbecause it will warn you if you're accidentally overwriting something.</p>\\n<h5 id=\\\"buildgraphql\\\"><a href=\\\"#buildgraphql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>build.graphql</code></h5>\\n<p>Equivalent to <code>require('graphql')</code>, by using this property you don't have to\\nimport graphql and you're less likely to get version conflicts which are hard\\nto diagnose and resolve. Use of this property over importing <code>graphql</code> yourself\\nis highly recommended.</p>\\n<h4 id=\\\"gettypebynametypename\\\"><a href=\\\"#gettypebynametypename\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>getTypeByName(typeName)</code></h4>\\n<p>Returns the GraphQL type associated with the given name, if it is known to the\\ncurrent build, or <code>null</code> otherwise. Objects built with <code>newWithHooks</code> are\\nautomatically registered, but external objects must be registered via:</p>\\n<h5 id=\\\"buildaddtypetype-graphqlnamedtype\\\"><a href=\\\"#buildaddtypetype-graphqlnamedtype\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>build.addType(type: GraphQLNamedType)</code></h5>\\n<p>Registers an external (un-hooked) GraphQL type with the system so that it may\\nbe referenced via <code>getTypeByName()</code></p>\\n<h5 id=\\\"getaliasfromresolveinforesolveinfo\\\"><a href=\\\"#getaliasfromresolveinforesolveinfo\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>getAliasFromResolveInfo(resolveInfo)</code></h5>\\n<p>Use this in your resolver to quickly retrieve the alias that this field was\\nrequested as.</p>\\n<p>From <a href=\\\"https://github.com/postgraphql/graphql-build/tree/master/packages/graphql-parse-resolve-info#getaliasfromresolveinforesolveinfo\\\"><code>graphql-parse-resolve-info</code></a></p>\\n<p>TODO: example</p>\\n<h5 id=\\\"buildresolvealias\\\"><a href=\\\"#buildresolvealias\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>build.resolveAlias</code></h5>\\n<p>Can be used in place of the <code>resolve</code> method for a field if you wish it to resolve to the alias the field was requested as (as opposed to its name).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">resolveAlias</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> _args<span class=\\\"token punctuation\\\">,</span> _context<span class=\\\"token punctuation\\\">,</span> resolveInfo<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> alias <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getAliasFromResolveInfo</span><span class=\\\"token punctuation\\\">(</span>resolveInfo<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> data<span class=\\\"token punctuation\\\">[</span>alias<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"namespaces\\\"><a href=\\\"#namespaces\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Namespaces</h3>\\n<p>Properties added to the <code>Build</code> object or set on the <code>scope</code> should be\\nnamespaced so that they do not conflict; for example <code>graphql-build-pg</code> uses\\nthe <code>pg</code> namespace: <code>pgSql</code>, <code>pgIntrospection</code>, <code>isPgTableType</code>, etc</p>\\n<p>TODO: expand</p>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"path\": \"/docs/hooks/\",\n\t\t\t\t\t\"title\": \"Hooks\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"nav\": {\n\t\t\t\t\"edges\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"id\": \"/Users/benjiegillam/Documents/graphql-build.github.io/src/data/nav.json absPath of file [0] >>> JSON\",\n\t\t\t\t\t\t\t\"to\": \"/docs/getting-started/\",\n\t\t\t\t\t\t\t\"title\": \"Getting Started\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"id\": \"/Users/benjiegillam/Documents/graphql-build.github.io/src/data/nav.json absPath of file [1] >>> JSON\",\n\t\t\t\t\t\t\t\"to\": \"/docs/plugins/\",\n\t\t\t\t\t\t\t\"title\": \"Plugins\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"id\": \"/Users/benjiegillam/Documents/graphql-build.github.io/src/data/nav.json absPath of file [2] >>> JSON\",\n\t\t\t\t\t\t\t\"to\": \"/docs/hooks/\",\n\t\t\t\t\t\t\t\"title\": \"Hooks\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"id\": \"/Users/benjiegillam/Documents/graphql-build.github.io/src/data/nav.json absPath of file [3] >>> JSON\",\n\t\t\t\t\t\t\t\"to\": \"/docs/look-ahead/\",\n\t\t\t\t\t\t\t\"title\": \"Look Ahead\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"layout\": \"page\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-hooks-612b6438d9b4912064ad.js","module.exports = {\n\t\"data\": {\n\t\t\"remark\": {\n\t\t\t\"html\": \"<h2 id=\\\"hooks\\\"><a href=\\\"#hooks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hooks</h2>\\n<p>The most common thing for a plugin to do is to add hooks to the builder. Hooks\\nallow you to manipulate the specification that is being passed to the GraphQL\\nconstructors before the objects are constructed - therefore bypassing the need\\nto fiddle with the private interfaces to GraphQL.</p>\\n<p>Hooks are registered via a call to <code>builder.hook(hookName, hookFunction)</code>.</p>\\n<p>Every <code>hookFunction</code> must synchronously return a value - either the value that it was passed\\nin or a derivative of it.</p>\\n<p>You can think of hooks as wrappers around the original object spec, like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> MyType <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">newWithHooks</span><span class=\\\"token punctuation\\\">(</span>GraphQLObjectType<span class=\\\"token punctuation\\\">,</span> spec<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// is equivalent to:</span>\\n\\n<span class=\\\"token keyword\\\">const</span> MyType <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">GraphQLObjectType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">hook3</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">hook2</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">hook1</span><span class=\\\"token punctuation\\\">(</span>spec<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"hook-names\\\"><a href=\\\"#hook-names\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hook names</h3>\\n<p>The following hooks are currently supported, but more may be added in future.\\nTrying to add a hook for a hook name that does not exist will result in an\\nerror.</p>\\n<p><a href=\\\"https://github.com/benjie/graphql-build/blob/996e28f0af68f53e264170bd4528b6500ff3ef25/packages/graphql-build/SchemaBuilder.js#L11-L59\\\">(See hooks in the source)</a></p>\\n<ul>\\n<li>\\n<p><code>build</code>: The build object represents the current schema build and is passed\\nto all hooks, hook the 'build' event to extend this object.</p>\\n</li>\\n<li>\\n<p><code>init</code>: The init event is triggered after <code>build</code> (which should not generate\\nany GraphQL objects) and can be used to build common object types that may be\\nuseful later. The argument to this is an empty object and should be passed\\nthrough unmodified (it is ignored currently).</p>\\n</li>\\n<li>\\n<p><code>GraphQLSchema</code>: This event defines the root-level schema; hook it to add <code>query</code>,\\n<code>mutation</code>, <code>subscription</code> or similar GraphQL fields.</p>\\n</li>\\n<li>\\n<p><code>GraphQLObjectType*</code>: When creating a GraphQLObjectType via\\n<code>newWithHooks</code>, we'll execute, the following hooks:</p>\\n<ul>\\n<li><code>GraphQLObjectType</code> to add any root-level attributes, e.g. add a description</li>\\n<li><code>GraphQLObjectType:interfaces</code> to add additional interfaces to this object type</li>\\n<li><code>GraphQLObjectType:fields</code> to add additional fields to this object type (is\\nran asynchronously and gets a reference to the final GraphQL Object as\\n<code>Self</code> in the context)</li>\\n<li><code>GraphQLObjectType:fields:field</code>: to add any root-level attributes to an\\nindividual field, e.g. add a description</li>\\n<li><code>GraphQLObjectType:fields:field:args</code> to add arguments to an individual field</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>GraphQLInputObjectType*</code>: When creating a GraphQLInputObjectType via\\n<code>newWithHooks</code>, we'll execute, the following hooks:</p>\\n<ul>\\n<li><code>GraphQLInputObjectType</code> to add any root-level attributes, e.g. add a description</li>\\n<li><code>GraphQLInputObjectType:fields</code> to add additional fields to this object type (is\\nran asynchronously and gets a reference to the final GraphQL Object as\\n<code>Self</code> in the context)</li>\\n<li><code>GraphQLInputObjectType:fields:field</code>: to customize an individual field from above</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>GraphQLEnumType*</code>: When creating a GraphQLEnumType via <code>newWithHooks</code>,\\nwe'll execute, the following hooks:</p>\\n<ul>\\n<li><code>GraphQLEnumType</code> to add any root-level attributes, e.g. add a description</li>\\n<li><code>GraphQLEnumType:values</code> to add additional values</li>\\n</ul>\\n</li>\\n</ul>\\n<h3 id=\\\"hook-arguments\\\"><a href=\\\"#hook-arguments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hook arguments</h3>\\n<p>The <code>hookFunction</code> that you register via <code>builder.hook(hookName, hookFunction)</code> will be called with 3 arguments:</p>\\n<ol>\\n<li>The input object (e.g. the spec that would be passed to the GraphQLObjectType constructor)</li>\\n<li>The <code>Build</code> object (see below)</li>\\n<li>The <code>Context</code> object (see below) which contains a <code>scope</code> property</li>\\n</ol>\\n<h4 id=\\\"input-object\\\"><a href=\\\"#input-object\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Input object</h4>\\n<p>Depending on the hook being called the input object might be an array (as in\\nthe case of <code>GraphQLObjectType:interfaces</code>) or an object (as in all other\\ncases, currently). More specifically, the types for each hook are:</p>\\n<ul>\\n<li>\\n<p>build - a <code>Build</code> object (see below)</p>\\n</li>\\n<li>\\n<p>init - an opaque object, please just return it verbatim</p>\\n</li>\\n<li>\\n<p>GraphQLSchema - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlschema\\\"><code>GraphQLSchemaConfig</code></a></p>\\n</li>\\n<li>\\n<p>GraphQLObjectType - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlobjecttype\\\"><code>GraphQLObjectTypeConfig</code></a></p>\\n</li>\\n<li>\\n<p>GraphQLObjectType:interfaces - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlinterfacetype\\\">array of <code>GraphQLInterfaceType</code> instances</a></p>\\n</li>\\n<li>\\n<p>GraphQLObjectType:fields - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlobjecttype\\\"><code>GraphQLFieldConfigMap</code></a></p>\\n</li>\\n<li>\\n<p>GraphQLObjectType:fields:field - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlobjecttype\\\"><code>GraphQLFieldConfig</code></a></p>\\n</li>\\n<li>\\n<p>GraphQLObjectType:fields:field:args - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlobjecttype\\\"><code>GraphQLFieldConfigArgumentMap</code></a></p>\\n</li>\\n<li>\\n<p>GraphQLInputObjectType - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlinputobjecttype\\\"><code>GraphQLInputObjectTypeConfig</code></a></p>\\n</li>\\n<li>\\n<p>GraphQLInputObjectType:fields - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlinputobjecttype\\\"><code>GraphQLInputObjectConfigFieldMap</code></a></p>\\n</li>\\n<li>\\n<p>GraphQLInputObjectType:fields:field - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlinputobjecttype\\\"><code>GraphQLInputObjectFieldConfig</code></a></p>\\n</li>\\n<li>\\n<p>GraphQLEnumType - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlenumtype\\\"><code>GraphQLEnumTypeConfig</code></a></p>\\n</li>\\n<li>\\n<p>GraphQLEnumType:values - <a href=\\\"http://graphql.org/graphql-js/type/#graphqlenumtype\\\"><code>GraphQLEnumValueConfigMap</code></a></p>\\n</li>\\n</ul>\\n<h4 id=\\\"build-object-build\\\"><a href=\\\"#build-object-build\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Build object (<code>Build</code>)</h4>\\n<p>The build object starts out with the following properties/methods, but plugins may extend it via the <code>build</code> hook.</p>\\n<h5 id=\\\"newwithhookstype-spec-scope\\\"><a href=\\\"#newwithhookstype-spec-scope\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>newWithHooks(type, spec, scope)</code></h5>\\n<p>The bread-and-butter of GraphQL-Build, this method is how we build hooked GraphQL objects:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> MyType <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">newWithHooks</span><span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">,</span> spec<span class=\\\"token punctuation\\\">,</span> scope<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li><code>type</code> is a GraphQL object type, such as <code>GraphQLEnumType</code> or <code>GraphQLInputObjectType</code></li>\\n<li><code>spec</code> is a valid specification that will be passed through the relevant\\nhooks before ultimately being passed to the constructor of the aforementioned\\n<code>type</code> and returning an instance of that type</li>\\n<li><code>scope</code> is where you can add scope information that will be available through\\nthe <code>scope</code> property in the context object passed to hooks (see <code>Context</code>\\nbelow)</li>\\n</ul>\\n<h5 id=\\\"buildextendinput-extensions\\\"><a href=\\\"#buildextendinput-extensions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>build.extend(input, extensions)</code></h5>\\n<p>Returns a new object by merging the properties of <code>input</code> and <code>extensions</code>\\n<strong>without overwriting</strong>. If any clashes occur an error will be throw. It is\\nadvisable to use this instead of <code>Object.assign</code> or <code>{...input, ...extensions}</code>\\nbecause it will warn you if you're accidentally overwriting something.</p>\\n<h5 id=\\\"buildgraphql\\\"><a href=\\\"#buildgraphql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>build.graphql</code></h5>\\n<p>Equivalent to <code>require('graphql')</code>, by using this property you don't have to\\nimport graphql and you're less likely to get version conflicts which are hard\\nto diagnose and resolve. Use of this property over importing <code>graphql</code> yourself\\nis highly recommended.</p>\\n<h4 id=\\\"gettypebynametypename\\\"><a href=\\\"#gettypebynametypename\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>getTypeByName(typeName)</code></h4>\\n<p>Returns the GraphQL type associated with the given name, if it is known to the\\ncurrent build, or <code>null</code> otherwise. Objects built with <code>newWithHooks</code> are\\nautomatically registered, but external objects must be registered via:</p>\\n<h5 id=\\\"buildaddtypetype-graphqlnamedtype\\\"><a href=\\\"#buildaddtypetype-graphqlnamedtype\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>build.addType(type: GraphQLNamedType)</code></h5>\\n<p>Registers an external (un-hooked) GraphQL type with the system so that it may\\nbe referenced via <code>getTypeByName()</code></p>\\n<h5 id=\\\"getaliasfromresolveinforesolveinfo\\\"><a href=\\\"#getaliasfromresolveinforesolveinfo\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>getAliasFromResolveInfo(resolveInfo)</code></h5>\\n<p>Use this in your resolver to quickly retrieve the alias that this field was\\nrequested as.</p>\\n<p>From <a href=\\\"https://github.com/postgraphql/graphql-build/tree/master/packages/graphql-parse-resolve-info#getaliasfromresolveinforesolveinfo\\\"><code>graphql-parse-resolve-info</code></a></p>\\n<p>TODO: example</p>\\n<h5 id=\\\"buildresolvealias\\\"><a href=\\\"#buildresolvealias\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>build.resolveAlias</code></h5>\\n<p>Can be used in place of the <code>resolve</code> method for a field if you wish it to resolve to the alias the field was requested as (as opposed to its name).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">resolveAlias</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> _args<span class=\\\"token punctuation\\\">,</span> _context<span class=\\\"token punctuation\\\">,</span> resolveInfo<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> alias <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getAliasFromResolveInfo</span><span class=\\\"token punctuation\\\">(</span>resolveInfo<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> data<span class=\\\"token punctuation\\\">[</span>alias<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"namespaces\\\"><a href=\\\"#namespaces\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Namespaces</h3>\\n<p>Properties added to the <code>Build</code> object or set on the <code>scope</code> should be\\nnamespaced so that they do not conflict; for example <code>graphql-build-pg</code> uses\\nthe <code>pg</code> namespace: <code>pgSql</code>, <code>pgIntrospection</code>, <code>isPgTableType</code>, etc</p>\\n<p>TODO: expand</p>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"path\": \"/docs/hooks/\",\n\t\t\t\t\"title\": \"Hooks\"\n\t\t\t}\n\t\t},\n\t\t\"nav\": {\n\t\t\t\"edges\": [\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"id\": \"/Users/benjiegillam/Documents/graphql-build.github.io/src/data/nav.json absPath of file [0] >>> JSON\",\n\t\t\t\t\t\t\"to\": \"/docs/getting-started/\",\n\t\t\t\t\t\t\"title\": \"Getting Started\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"id\": \"/Users/benjiegillam/Documents/graphql-build.github.io/src/data/nav.json absPath of file [1] >>> JSON\",\n\t\t\t\t\t\t\"to\": \"/docs/plugins/\",\n\t\t\t\t\t\t\"title\": \"Plugins\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"id\": \"/Users/benjiegillam/Documents/graphql-build.github.io/src/data/nav.json absPath of file [2] >>> JSON\",\n\t\t\t\t\t\t\"to\": \"/docs/hooks/\",\n\t\t\t\t\t\t\"title\": \"Hooks\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"id\": \"/Users/benjiegillam/Documents/graphql-build.github.io/src/data/nav.json absPath of file [3] >>> JSON\",\n\t\t\t\t\t\t\"to\": \"/docs/look-ahead/\",\n\t\t\t\t\t\t\"title\": \"Look Ahead\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"layout\": \"page\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-hooks.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/docs-hooks.json\n// module chunks = 7614518986689938000"],"sourceRoot":""}