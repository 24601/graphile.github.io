{"version":3,"sources":["webpack:///path---postgraphile-custom-queries-ecdf06d93afc61e40138.js","webpack:///./.cache/json/postgraphile-custom-queries.json"],"names":["webpackJsonp","403","module","exports","data","remark","html","frontmatter","path","title","nav","edges","node","id","name","sections","pages","to","sectionId","pathContext","layout"],"mappings":"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","file":"path---postgraphile-custom-queries-ecdf06d93afc61e40138.js","sourcesContent":["webpackJsonp([262226386268176],{\n\n/***/ 403:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"remark\":{\"html\":\"<h2 id=\\\"custom-queries\\\"><a href=\\\"#custom-queries\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Custom Queries</h2>\\n<p>Like <a href=\\\"/postgraphile/computed-columns/\\\">computed columns</a>, you can also add\\nroot-level Query fields by creating a <a href=\\\"/postgraphile/procedures/\\\">PostgreSQL function</a>. The arguments to\\nthese functions will be exposed via GraphQL also - named arguments are\\npreferred, if your arguments are not named we will assign them an\\nauto-generated name such as <code class=\\\"language-text\\\">arg1</code>. The rules that apply to these are the\\nfollowing:</p>\\n<ul>\\n<li>if the function accepts arguments, the first argument must NOT be a table type (see computed columns above)</li>\\n<li>must return a named type - we do not currently support anonymous types</li>\\n<li>must NOT return <code class=\\\"language-text\\\">VOID</code></li>\\n<li>must be marked as <code class=\\\"language-text\\\">STABLE</code></li>\\n<li>must be defined in one of the introspected schemas</li>\\n</ul>\\n<h3 id=\\\"example\\\"><a href=\\\"#example\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Example</h3>\\n<p>So let’s write a search query for our <a href=\\\"https://github.com/graphile/postgraphile/tree/master/examples/forum\\\">forum example</a> using the PostgreSQL\\n<a href=\\\"http://www.postgresql.org/docs/current/static/functions-matching.html\\\"><code class=\\\"language-text\\\">LIKE</code></a> operator (we’ll actually use <code class=\\\"language-text\\\">ILIKE</code> because it is case\\ninsensitive). The custom query we create is included in the forum example’s\\nschema, so if you want to run that example locally you can try it out.</p>\\n<p>The procedure would look like the following. Indentation is non-standard so we can fit in comments to explain what’s going on.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code class=\\\"language-sql\\\"><span class=\\\"token comment\\\">-- Our `post` table is created with the following columns. Columns unnecessary</span>\\n<span class=\\\"token comment\\\">-- to this demo were omitted. You can find the full table in our forum example.</span>\\n<span class=\\\"token keyword\\\">create</span> <span class=\\\"token keyword\\\">table</span> post <span class=\\\"token punctuation\\\">(</span>\\n  …\\n  headline         <span class=\\\"token keyword\\\">text</span> <span class=\\\"token operator\\\">not</span> <span class=\\\"token boolean\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  body             <span class=\\\"token keyword\\\">text</span><span class=\\\"token punctuation\\\">,</span>\\n  …\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">-- Create the function named `search_posts` with a text argument named `search`.</span>\\n<span class=\\\"token keyword\\\">create</span> <span class=\\\"token keyword\\\">function</span> search_posts<span class=\\\"token punctuation\\\">(</span>search <span class=\\\"token keyword\\\">text</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">-- This function will return a set of posts from the `post` table. The</span>\\n  <span class=\\\"token comment\\\">-- `setof` part is important to PostGraphile, check out our procedure docs to</span>\\n  <span class=\\\"token comment\\\">-- learn why.</span>\\n  <span class=\\\"token keyword\\\">returns</span> setof post <span class=\\\"token keyword\\\">as</span> $$\\n    <span class=\\\"token comment\\\">-- Write our advanced query as a SQL query!</span>\\n    <span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span>\\n    <span class=\\\"token keyword\\\">from</span> post\\n    <span class=\\\"token keyword\\\">where</span>\\n      <span class=\\\"token comment\\\">-- Use the `ILIKE` operator on both the `headline` and `body` columns. If</span>\\n      <span class=\\\"token comment\\\">-- either return true, return the post.</span>\\n      headline ilike <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'%'</span> <span class=\\\"token operator\\\">||</span> search <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">'%'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">or</span>\\n      body ilike <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'%'</span> <span class=\\\"token operator\\\">||</span> search <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">'%'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">-- End the function declaring the language we used as SQL and add the</span>\\n  <span class=\\\"token comment\\\">-- `STABLE` marker so PostGraphile knows its a query and not a mutation.</span>\\n  $$ <span class=\\\"token keyword\\\">language</span> <span class=\\\"token keyword\\\">sql</span> stable<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>And that’s it! You can now use this function in your GraphQL like so:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token punctuation\\\">{</span>\\n  searchPosts<span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">search</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Hello world\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token attr-name\\\">first</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    pageInfo <span class=\\\"token punctuation\\\">{</span>\\n      hasNextPage\\n    <span class=\\\"token punctuation\\\">}</span>\\n    totalCount\\n    nodes <span class=\\\"token punctuation\\\">{</span>\\n      headline\\n      body\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\",\"frontmatter\":{\"path\":\"/postgraphile/custom-queries/\",\"title\":\"Custom Queries\"}},\"nav\":{\"edges\":[{\"node\":{\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [0] >>> JSON\",\"name\":\"graphile-build\",\"sections\":[{\"id\":\"guides\",\"title\":\"Overview\"},{\"id\":\"library-reference\",\"title\":\"Using the Library\"},{\"id\":\"plugin-reference\",\"title\":\"Building a Plugin\"}],\"pages\":[{\"to\":\"/graphile-build/getting-started/\",\"title\":\"Getting Started\",\"sectionId\":\"guides\"},{\"to\":\"/graphile-build/plugins/\",\"title\":\"Plugins\",\"sectionId\":\"guides\"},{\"to\":\"/graphile-build/hooks/\",\"title\":\"Hooks\",\"sectionId\":\"guides\"},{\"to\":\"/graphile-build/look-ahead/\",\"title\":\"Look Ahead\",\"sectionId\":\"guides\"},{\"to\":\"/graphile-build/graphile-build/\",\"title\":\"graphile-build\",\"sectionId\":\"library-reference\"},{\"to\":\"/graphile-build/schema-builder/\",\"title\":\"SchemaBuilder\",\"sectionId\":\"library-reference\"},{\"to\":\"/graphile-build/plugin-options/\",\"title\":\"Options\",\"sectionId\":\"library-reference\"},{\"to\":\"/graphile-build/default-plugins/\",\"title\":\"Default Plugins\",\"sectionId\":\"library-reference\"},{\"to\":\"/graphile-build/omitting-plugins/\",\"title\":\"Omitting Plugins\",\"sectionId\":\"guides\"},{\"to\":\"/graphile-build/all-hooks/\",\"title\":\"All Hooks\",\"sectionId\":\"plugin-reference\"},{\"to\":\"/graphile-build/build-object/\",\"title\":\"Build Object\",\"sectionId\":\"plugin-reference\"},{\"to\":\"/graphile-build/context-object/\",\"title\":\"Context Object\",\"sectionId\":\"plugin-reference\"},{\"to\":\"/graphile-build/schema-builder/\",\"title\":\"SchemaBuilder\",\"sectionId\":\"plugin-reference\"}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [1] >>> JSON\",\"name\":\"postgraphile\",\"sections\":[{\"id\":\"overview\",\"title\":\"Overview\"},{\"id\":\"guides\",\"title\":\"Guides\"},{\"id\":\"usage\",\"title\":\"Usage\"}],\"pages\":[{\"to\":\"/postgraphile/introduction/\",\"title\":\"Introduction\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/quick-start-guide/\",\"title\":\"Quick Start Guide\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/evaluating/\",\"title\":\"Evaluating for your Project\",\"sectionId\":\"guides\"},{\"to\":\"/postgraphile/requirements/\",\"title\":\"Requirements\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/performance/\",\"title\":\"Performance\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/connections/\",\"title\":\"Connections\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/filtering/\",\"title\":\"Filtering\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/relations/\",\"title\":\"Relations\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/crud-mutations/\",\"title\":\"CRUD Mutations\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/computed-columns/\",\"title\":\"Computed Columns\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/custom-queries/\",\"title\":\"Custom Queries\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/custom-mutations/\",\"title\":\"Custom Mutations\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/smart-comments/\",\"title\":\"Smart Comments\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/security/\",\"title\":\"Security\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/introspection/\",\"title\":\"Introspection\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/extending/\",\"title\":\"Schema Plugins\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/plugins/\",\"title\":\"Server Plugins\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/subscriptions/\",\"title\":\"Subscriptions\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/production/\",\"title\":\"Production Considerations\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/reserved-keywords/\",\"title\":\"Reserved Keywords\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/debugging/\",\"title\":\"Debugging\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/jwt-guide/\",\"title\":\"PostGraphile JWT Guide\",\"sectionId\":\"guides\"},{\"to\":\"/postgraphile/default-role/\",\"title\":\"The Default Role\",\"sectionId\":\"guides\"},{\"to\":\"/postgraphile/procedures/\",\"title\":\"PostgreSQL Procedures\",\"sectionId\":\"guides\"},{\"to\":\"/postgraphile/postgresql-schema-design/\",\"title\":\"PostgreSQL Schema Design\",\"sectionId\":\"guides\"},{\"to\":\"/postgraphile/postgresql-indexes/\",\"title\":\"PostgreSQL Indexes\",\"sectionId\":\"guides\"},{\"to\":\"/postgraphile/v4-new-features/\",\"title\":\"v4 Feature Guide\",\"sectionId\":\"guides\"},{\"to\":\"/postgraphile/v3-migration/\",\"title\":\"v3 → v4 Migration Guide\",\"sectionId\":\"guides\"},{\"to\":\"/postgraphile/usage-cli/\",\"title\":\"CLI Usage\",\"sectionId\":\"usage\"},{\"to\":\"/postgraphile/usage-library/\",\"title\":\"Library Usage\",\"sectionId\":\"usage\"},{\"to\":\"/postgraphile/usage-schema/\",\"title\":\"Schema-only Usage\",\"sectionId\":\"usage\"}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [2] >>> JSON\",\"name\":\"graphile-build-pg\",\"sections\":[{\"id\":\"usage\",\"title\":\"Usage\"}],\"pages\":[{\"to\":\"/postgraphile/settings/\",\"title\":\"Settings\",\"sectionId\":\"usage\"}]}}]}},\"pathContext\":{\"layout\":\"page\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---postgraphile-custom-queries-ecdf06d93afc61e40138.js","module.exports = {\"data\":{\"remark\":{\"html\":\"<h2 id=\\\"custom-queries\\\"><a href=\\\"#custom-queries\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Custom Queries</h2>\\n<p>Like <a href=\\\"/postgraphile/computed-columns/\\\">computed columns</a>, you can also add\\nroot-level Query fields by creating a <a href=\\\"/postgraphile/procedures/\\\">PostgreSQL function</a>. The arguments to\\nthese functions will be exposed via GraphQL also - named arguments are\\npreferred, if your arguments are not named we will assign them an\\nauto-generated name such as <code class=\\\"language-text\\\">arg1</code>. The rules that apply to these are the\\nfollowing:</p>\\n<ul>\\n<li>if the function accepts arguments, the first argument must NOT be a table type (see computed columns above)</li>\\n<li>must return a named type - we do not currently support anonymous types</li>\\n<li>must NOT return <code class=\\\"language-text\\\">VOID</code></li>\\n<li>must be marked as <code class=\\\"language-text\\\">STABLE</code></li>\\n<li>must be defined in one of the introspected schemas</li>\\n</ul>\\n<h3 id=\\\"example\\\"><a href=\\\"#example\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Example</h3>\\n<p>So let’s write a search query for our <a href=\\\"https://github.com/graphile/postgraphile/tree/master/examples/forum\\\">forum example</a> using the PostgreSQL\\n<a href=\\\"http://www.postgresql.org/docs/current/static/functions-matching.html\\\"><code class=\\\"language-text\\\">LIKE</code></a> operator (we’ll actually use <code class=\\\"language-text\\\">ILIKE</code> because it is case\\ninsensitive). The custom query we create is included in the forum example’s\\nschema, so if you want to run that example locally you can try it out.</p>\\n<p>The procedure would look like the following. Indentation is non-standard so we can fit in comments to explain what’s going on.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code class=\\\"language-sql\\\"><span class=\\\"token comment\\\">-- Our `post` table is created with the following columns. Columns unnecessary</span>\\n<span class=\\\"token comment\\\">-- to this demo were omitted. You can find the full table in our forum example.</span>\\n<span class=\\\"token keyword\\\">create</span> <span class=\\\"token keyword\\\">table</span> post <span class=\\\"token punctuation\\\">(</span>\\n  …\\n  headline         <span class=\\\"token keyword\\\">text</span> <span class=\\\"token operator\\\">not</span> <span class=\\\"token boolean\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  body             <span class=\\\"token keyword\\\">text</span><span class=\\\"token punctuation\\\">,</span>\\n  …\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">-- Create the function named `search_posts` with a text argument named `search`.</span>\\n<span class=\\\"token keyword\\\">create</span> <span class=\\\"token keyword\\\">function</span> search_posts<span class=\\\"token punctuation\\\">(</span>search <span class=\\\"token keyword\\\">text</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">-- This function will return a set of posts from the `post` table. The</span>\\n  <span class=\\\"token comment\\\">-- `setof` part is important to PostGraphile, check out our procedure docs to</span>\\n  <span class=\\\"token comment\\\">-- learn why.</span>\\n  <span class=\\\"token keyword\\\">returns</span> setof post <span class=\\\"token keyword\\\">as</span> $$\\n    <span class=\\\"token comment\\\">-- Write our advanced query as a SQL query!</span>\\n    <span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span>\\n    <span class=\\\"token keyword\\\">from</span> post\\n    <span class=\\\"token keyword\\\">where</span>\\n      <span class=\\\"token comment\\\">-- Use the `ILIKE` operator on both the `headline` and `body` columns. If</span>\\n      <span class=\\\"token comment\\\">-- either return true, return the post.</span>\\n      headline ilike <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'%'</span> <span class=\\\"token operator\\\">||</span> search <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">'%'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">or</span>\\n      body ilike <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'%'</span> <span class=\\\"token operator\\\">||</span> search <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">'%'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">-- End the function declaring the language we used as SQL and add the</span>\\n  <span class=\\\"token comment\\\">-- `STABLE` marker so PostGraphile knows its a query and not a mutation.</span>\\n  $$ <span class=\\\"token keyword\\\">language</span> <span class=\\\"token keyword\\\">sql</span> stable<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>And that’s it! You can now use this function in your GraphQL like so:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token punctuation\\\">{</span>\\n  searchPosts<span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">search</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Hello world\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token attr-name\\\">first</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    pageInfo <span class=\\\"token punctuation\\\">{</span>\\n      hasNextPage\\n    <span class=\\\"token punctuation\\\">}</span>\\n    totalCount\\n    nodes <span class=\\\"token punctuation\\\">{</span>\\n      headline\\n      body\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\",\"frontmatter\":{\"path\":\"/postgraphile/custom-queries/\",\"title\":\"Custom Queries\"}},\"nav\":{\"edges\":[{\"node\":{\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [0] >>> JSON\",\"name\":\"graphile-build\",\"sections\":[{\"id\":\"guides\",\"title\":\"Overview\"},{\"id\":\"library-reference\",\"title\":\"Using the Library\"},{\"id\":\"plugin-reference\",\"title\":\"Building a Plugin\"}],\"pages\":[{\"to\":\"/graphile-build/getting-started/\",\"title\":\"Getting Started\",\"sectionId\":\"guides\"},{\"to\":\"/graphile-build/plugins/\",\"title\":\"Plugins\",\"sectionId\":\"guides\"},{\"to\":\"/graphile-build/hooks/\",\"title\":\"Hooks\",\"sectionId\":\"guides\"},{\"to\":\"/graphile-build/look-ahead/\",\"title\":\"Look Ahead\",\"sectionId\":\"guides\"},{\"to\":\"/graphile-build/graphile-build/\",\"title\":\"graphile-build\",\"sectionId\":\"library-reference\"},{\"to\":\"/graphile-build/schema-builder/\",\"title\":\"SchemaBuilder\",\"sectionId\":\"library-reference\"},{\"to\":\"/graphile-build/plugin-options/\",\"title\":\"Options\",\"sectionId\":\"library-reference\"},{\"to\":\"/graphile-build/default-plugins/\",\"title\":\"Default Plugins\",\"sectionId\":\"library-reference\"},{\"to\":\"/graphile-build/omitting-plugins/\",\"title\":\"Omitting Plugins\",\"sectionId\":\"guides\"},{\"to\":\"/graphile-build/all-hooks/\",\"title\":\"All Hooks\",\"sectionId\":\"plugin-reference\"},{\"to\":\"/graphile-build/build-object/\",\"title\":\"Build Object\",\"sectionId\":\"plugin-reference\"},{\"to\":\"/graphile-build/context-object/\",\"title\":\"Context Object\",\"sectionId\":\"plugin-reference\"},{\"to\":\"/graphile-build/schema-builder/\",\"title\":\"SchemaBuilder\",\"sectionId\":\"plugin-reference\"}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [1] >>> JSON\",\"name\":\"postgraphile\",\"sections\":[{\"id\":\"overview\",\"title\":\"Overview\"},{\"id\":\"guides\",\"title\":\"Guides\"},{\"id\":\"usage\",\"title\":\"Usage\"}],\"pages\":[{\"to\":\"/postgraphile/introduction/\",\"title\":\"Introduction\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/quick-start-guide/\",\"title\":\"Quick Start Guide\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/evaluating/\",\"title\":\"Evaluating for your Project\",\"sectionId\":\"guides\"},{\"to\":\"/postgraphile/requirements/\",\"title\":\"Requirements\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/performance/\",\"title\":\"Performance\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/connections/\",\"title\":\"Connections\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/filtering/\",\"title\":\"Filtering\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/relations/\",\"title\":\"Relations\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/crud-mutations/\",\"title\":\"CRUD Mutations\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/computed-columns/\",\"title\":\"Computed Columns\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/custom-queries/\",\"title\":\"Custom Queries\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/custom-mutations/\",\"title\":\"Custom Mutations\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/smart-comments/\",\"title\":\"Smart Comments\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/security/\",\"title\":\"Security\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/introspection/\",\"title\":\"Introspection\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/extending/\",\"title\":\"Schema Plugins\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/plugins/\",\"title\":\"Server Plugins\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/subscriptions/\",\"title\":\"Subscriptions\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/production/\",\"title\":\"Production Considerations\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/reserved-keywords/\",\"title\":\"Reserved Keywords\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/debugging/\",\"title\":\"Debugging\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/jwt-guide/\",\"title\":\"PostGraphile JWT Guide\",\"sectionId\":\"guides\"},{\"to\":\"/postgraphile/default-role/\",\"title\":\"The Default Role\",\"sectionId\":\"guides\"},{\"to\":\"/postgraphile/procedures/\",\"title\":\"PostgreSQL Procedures\",\"sectionId\":\"guides\"},{\"to\":\"/postgraphile/postgresql-schema-design/\",\"title\":\"PostgreSQL Schema Design\",\"sectionId\":\"guides\"},{\"to\":\"/postgraphile/postgresql-indexes/\",\"title\":\"PostgreSQL Indexes\",\"sectionId\":\"guides\"},{\"to\":\"/postgraphile/v4-new-features/\",\"title\":\"v4 Feature Guide\",\"sectionId\":\"guides\"},{\"to\":\"/postgraphile/v3-migration/\",\"title\":\"v3 → v4 Migration Guide\",\"sectionId\":\"guides\"},{\"to\":\"/postgraphile/usage-cli/\",\"title\":\"CLI Usage\",\"sectionId\":\"usage\"},{\"to\":\"/postgraphile/usage-library/\",\"title\":\"Library Usage\",\"sectionId\":\"usage\"},{\"to\":\"/postgraphile/usage-schema/\",\"title\":\"Schema-only Usage\",\"sectionId\":\"usage\"}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [2] >>> JSON\",\"name\":\"graphile-build-pg\",\"sections\":[{\"id\":\"usage\",\"title\":\"Usage\"}],\"pages\":[{\"to\":\"/postgraphile/settings/\",\"title\":\"Settings\",\"sectionId\":\"usage\"}]}}]}},\"pathContext\":{\"layout\":\"page\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/postgraphile-custom-queries.json\n// module id = 403\n// module chunks = 262226386268176"],"sourceRoot":""}