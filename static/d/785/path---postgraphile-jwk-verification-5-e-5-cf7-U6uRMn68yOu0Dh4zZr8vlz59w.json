{"data":{"remark":{"html":"<h2 id=\"postgraphile-jwtjwk-verification-quickstart\"><a href=\"#postgraphile-jwtjwk-verification-quickstart\" aria-label=\"postgraphile jwtjwk verification quickstart permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PostGraphile JWT/JWK Verification Quickstart</h2>\n<p>This guide is an adaption of the official quickstart tutorial\nfor Node (Express) provided by\n<a href=\"https://auth0.com/docs/quickstart/backend/nodejs/01-authorization\">Auth0</a>.\nThe code illustrates how to intercept and verify a\n<a href=\"https://auth0.com/docs/jwt\">JWT Access Token</a> via a\n<a href=\"https://auth0.com/docs/jwks\">JWKS (JSON Web Key Set)</a> using\n<a href=\"https://auth0.com/\">Auth0</a>.</p>\n<p>Although this code should work, we make no claims as to its validity\nor fit for production use. We disclaim all liability.</p>\n<h3 id=\"dependencies\"><a href=\"#dependencies\" aria-label=\"dependencies permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dependencies</h3>\n<p>This guide uses the <a href=\"https://www.npmjs.com/package/express\"><code class=\"language-text\">express</code></a>\nHTTP framework and supporting Node packages authored and maintained by Auth0:</p>\n<ul>\n<li><a href=\"https://github.com/auth0/express-jwt\"><code class=\"language-text\">express-jwt</code></a> -\n<em>Middleware that validates a JWT and copies its contents to <code class=\"language-text\">req.user</code></em></li>\n<li><a href=\"https://github.com/auth0/node-jwks-rsa\"><code class=\"language-text\">jwks-rsa</code></a> -\n<em>A library to retrieve RSA public keys from a JWKS (JSON Web Key Set) endpoint</em></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> express express-jwt jwks-rsa\n<span class=\"token comment\"># Or:</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save express express-jwt jwks-rsa</code></pre></div>\n<h3 id=\"prior-knowledge--context\"><a href=\"#prior-knowledge--context\" aria-label=\"prior knowledge  context permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prior Knowledge &#x26; Context</h3>\n<p>As a developer, the three essential aspects of Auth0 are:</p>\n<ul>\n<li><a href=\"https://auth0.com/docs/apis\"><em>APIs</em></a> and\n<a href=\"https://auth0.com/docs/applications\"><em>Applications</em></a></li>\n<li><a href=\"https://auth0.com/docs/tokens\"><em>JWT types</em></a>\n(e.g. <em>ID Token</em> vs. <em>Access Token</em>)</li>\n<li>Authentication and Authorization <a href=\"https://auth0.com/docs/flows\"><em>Flows</em></a></li>\n</ul>\n<p>To keep it simple, in this guide we will be dealing with an\n<a href=\"https://auth0.com/docs/tokens/overview-access-tokens\">Access Token</a>\ngranted by an API which we will need to verify.</p>\n<h2 id=\"getting-started\"><a href=\"#getting-started\" aria-label=\"getting started permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting Started</h2>\n<p>You will need two values from your Auth0 configuration: The Auth0 <em>tenant\ndomain name</em>, and the API <em>identifier.</em></p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express-jwt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> jwksRsa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jwks-rsa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token comment\">// Authentication middleware. When used, the</span>\n<span class=\"token comment\">// Access Token must exist and be verified against</span>\n<span class=\"token comment\">// the Auth0 JSON Web Key Set.</span>\n<span class=\"token comment\">// On successful verification, the payload of the</span>\n<span class=\"token comment\">// decrypted Access Token is appended to the</span>\n<span class=\"token comment\">// request (`req`) as a `user` parameter.</span>\n<span class=\"token keyword\">const</span> checkJwt <span class=\"token operator\">=</span> <span class=\"token function\">jwt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Dynamically provide a signing key</span>\n  <span class=\"token comment\">// based on the `kid` in the header and</span>\n  <span class=\"token comment\">// the signing keys provided by the JWKS endpoint.</span>\n  secret<span class=\"token punctuation\">:</span> jwksRsa<span class=\"token punctuation\">.</span><span class=\"token function\">expressJwtSecret</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    cache<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    rateLimit<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    jwksRequestsPerMinute<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    jwksUri<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`https://YOUR_DOMAIN/.well-known/jwks.json`</span></span><span class=\"token punctuation\">,</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Validate the audience and the issuer.</span>\n<span class=\"gatsby-highlight-code-line\">  audience<span class=\"token punctuation\">:</span> <span class=\"token string\">\"YOUR_API_IDENTIFIER\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  issuer<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`https://YOUR_DOMAIN/`</span></span><span class=\"token punctuation\">,</span></span>  algorithms<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"RS256\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>(note: if we were processing an <a href=\"https://auth0.com/docs/tokens/id-token\">ID Token</a>\ninstead of an Access Token, the <em>audience</em> would be the <em>Client ID</em> instead)</p>\n<p>Remember that a JWT has <a href=\"https://jwt.io/introduction/\">three <em>period-separated</em> sections</a>: header, payload,\nand signature. On successful verification, the payload will be available for\nus to save inside the PostGraphile request via the\n<a href=\"/postgraphile/usage-library/#exposing-http-request-data-to-postgresql\"><code class=\"language-text\">pgSettings</code></a>\nfunction.</p>\n<p>Let's look at an example payload:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"iss\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://YOUR_DOMAIN/\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"sub\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CLIENT_ID@clients\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"aud\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"YOUR_API_IDENTIFIER\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"iat\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1555808706</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exp\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1555895106</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"azp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CLIENT_ID\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token property\">\"scope\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"read:schema\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// scopes a.k.a. permissions</span></span>  <span class=\"token property\">\"gty\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"client-credentials\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example payload, we can see that the only scope the API has made\navailable is <code class=\"language-text\">read:schema</code>. Our user can perform no mutations, nor can they\nperform any queries, they are limited to fetching the schema.\nNot all tokens will have such simple payloads, but, in this example, the only\nmeaningful data is in the <code class=\"language-text\">scope</code> value.</p>\n<p>Now let's make use of the <code class=\"language-text\">checkJwt</code> middleware function:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> postgraphile <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postgraphile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express-jwt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> jwksRsa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jwks-rsa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">const</span> checkJwt <span class=\"token operator\">=</span> <span class=\"token function\">jwt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  secret<span class=\"token punctuation\">:</span> jwksRsa<span class=\"token punctuation\">.</span><span class=\"token function\">expressJwtSecret</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    cache<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    rateLimit<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    jwksRequestsPerMinute<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n    jwksUri<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`https://YOUR_DOMAIN/.well-known/jwks.json`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  audience<span class=\"token punctuation\">:</span> <span class=\"token string\">\"YOUR_API_IDENTIFIER\"</span><span class=\"token punctuation\">,</span>\n  issuer<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`https://YOUR_DOMAIN/`</span></span><span class=\"token punctuation\">,</span>\n  algorithms<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"RS256\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// Apply checkJwt to our graphql endpoint</span></span><span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/graphql\"</span><span class=\"token punctuation\">,</span> checkJwt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">postgraphile</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_URL</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_SCHEMA</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function-variable function\">pgSettings</span><span class=\"token punctuation\">:</span> <span class=\"token parameter\">req</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> settings <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        settings<span class=\"token punctuation\">[</span><span class=\"token string\">\"user.permissions\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>scopes<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> settings<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// any other PostGraphile options go here</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>PostGraphile applies everything returned by\n<a href=\"/postgraphile/usage-library/#pgsettings-function\">pgSettings</a> to the\n<a href=\"https://www.postgresql.org/docs/current/functions-admin.html#FUNCTIONS-ADMIN-SET\">current session</a>\nwith <code class=\"language-text\">set_config($key, $value, true)</code>. So inside Postgres we can read\nthe current value of <code class=\"language-text\">user.permissions</code> by\n<code class=\"language-text\">select current_setting(&#39;user.permissions&#39;, true)::text;</code>.</p>\n<h2 id=\"basic-error-handling\"><a href=\"#basic-error-handling\" aria-label=\"basic error handling permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basic Error Handling</h2>\n<p>By default, if there is an error in the JWT verification process,\nthe <code class=\"language-text\">express-jwt</code> package will send a 401 status with an\nHTML-formatted error message as a response.\nInstead, we want to follow the pattern of PostGraphile and return errors\nproperly formatted in a <a href=\"http://graphql.github.io/graphql-spec/June2018/#sec-Errors\">GraphQL-compliant</a> JSON response.</p>\n<p>Let's create a basic Express middleware for handling the errors which\nour <code class=\"language-text\">checkJwt</code> function will throw:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">authErrors</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">\"UnauthorizedError\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// You will still want to log the error...</span>\n    <span class=\"token comment\">// but we don't want to send back internal operation details</span>\n    <span class=\"token comment\">// like a stack trace to the client!</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> errors<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> message<span class=\"token punctuation\">:</span> err<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Apply error handling to the graphql endpoint</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/graphql\"</span><span class=\"token punctuation\">,</span> authErrors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So, now, for example, if someone tries to connect to our GraphQL service\nwithout any token at all, we still get a 401 status, but with the\nappropriate and succinct response:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"errors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"No authorization token was found\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><em>This article was written by <a href=\"http://gitlab.com/benjamin-rood\">BR</a>.</em></p>","frontmatter":{"path":"/postgraphile/jwk-verification/","title":"PostGraphile JWT/JWK Verification Quickstart","showExamples":null}},"nav":{"edges":[{"node":{"id":"9bbe991b-c663-586e-8e81-7b2e8de70cff","name":"news","sections":[{"id":"main","title":"Archive"},{"id":"about","title":"About"}],"pages":[{"to":"/news/postgraphile-version-4-4/","title":"Version 4.4 - Real-time","sectionId":"main","subpages":null},{"to":"/news/postgraphile-version-4-1/","title":"Version 4.1 - Better Webpackability","sectionId":"main","subpages":null},{"to":"/news/postgraphile-version-4/","title":"Version 4 - Fantastic Performance","sectionId":"main","subpages":null},{"to":"/news/press-kit/","title":"Press Kit","sectionId":"about","subpages":null}]}},{"node":{"id":"c381a13f-6887-5a2b-9a97-0a1b838ea122","name":"graphile-build","sections":[{"id":"guides","title":"Overview"},{"id":"library-reference","title":"Using the Library"},{"id":"plugin-reference","title":"Building a Plugin"}],"pages":[{"to":"/graphile-build/getting-started/","title":"Getting Started","sectionId":"guides","subpages":[]},{"to":"/graphile-build/plugins/","title":"Plugins","sectionId":"guides","subpages":[]},{"to":"/graphile-build/hooks/","title":"Hooks","sectionId":"guides","subpages":[]},{"to":"/graphile-build/look-ahead/","title":"Look Ahead","sectionId":"guides","subpages":[]},{"to":"/graphile-build/graphile-build/","title":"graphile-build","sectionId":"library-reference","subpages":[]},{"to":"/graphile-build/schema-builder/","title":"SchemaBuilder","sectionId":"library-reference","subpages":[]},{"to":"/graphile-build/plugin-options/","title":"Options","sectionId":"library-reference","subpages":[]},{"to":"/graphile-build/default-plugins/","title":"Default Plugins","sectionId":"library-reference","subpages":[]},{"to":"/graphile-build/omitting-plugins/","title":"Omitting Plugins","sectionId":"guides","subpages":[]},{"to":"/graphile-build/all-hooks/","title":"All Hooks","sectionId":"plugin-reference","subpages":[]},{"to":"/graphile-build/build-object/","title":"Build Object","sectionId":"plugin-reference","subpages":[]},{"to":"/graphile-build/context-object/","title":"Context Object","sectionId":"plugin-reference","subpages":[]},{"to":"/graphile-build/schema-builder/","title":"SchemaBuilder","sectionId":"plugin-reference","subpages":[]}]}},{"node":{"id":"880fa42f-04a9-5f12-b32b-0c0b09e34af0","name":"postgraphile","sections":[{"id":"overview","title":"Overview"},{"id":"basics","title":"Operation"},{"id":"customising","title":"Customising"},{"id":"guides","title":"Guides"},{"id":"community","title":"Community"},{"id":"faq","title":"FAQ"}],"pages":[{"to":"/postgraphile/introduction/","title":"Introduction","sectionId":"overview","subpages":[]},{"to":"/postgraphile/examples/","title":"Example Gallery","sectionId":"overview","subpages":[]},{"to":"/postgraphile/usage/","title":"Usage","sectionId":"overview","subpages":[{"to":"/postgraphile/usage-cli/","title":"CLI Usage","sectionId":"overview"},{"to":"/postgraphile/usage-library/","title":"Library Usage","sectionId":"overview"},{"to":"/postgraphile/usage-schema/","title":"Schema-only Usage","sectionId":"overview"}]},{"to":"/postgraphile/performance/","title":"Performance","sectionId":"overview","subpages":[]},{"to":"/postgraphile/requirements/","title":"Requirements","sectionId":"overview","subpages":[]},{"to":"/postgraphile/quick-start-guide/","title":"Quick Start Guide","sectionId":"basics","subpages":[]},{"to":"/postgraphile/namespaces/","title":"Namespaces","sectionId":"basics","subpages":null},{"to":"/postgraphile/inflection/","title":"Inflection","sectionId":"basics","subpages":null},{"to":"/postgraphile/tables/","title":"Tables","sectionId":"basics","subpages":[{"to":"/postgraphile/relations/","title":"Relations","sectionId":"basics"},{"to":"/postgraphile/connections/","title":"Connections","sectionId":"basics"},{"to":"/postgraphile/filtering/","title":"Filtering","sectionId":"basics"},{"to":"/postgraphile/crud-mutations/","title":"CRUD Mutations","sectionId":"basics"},{"to":"/postgraphile/node-id/","title":"nodeId / id","sectionId":"basics"}]},{"to":"/postgraphile/functions/","title":"Functions","sectionId":"basics","subpages":[{"to":"/postgraphile/computed-columns/","title":"Computed Columns","sectionId":"basics"},{"to":"/postgraphile/custom-queries/","title":"Custom Queries","sectionId":"basics"},{"to":"/postgraphile/custom-mutations/","title":"Custom Mutations","sectionId":"basics"},{"to":"/postgraphile/function-restrictions/","title":"Function Restrictions","sectionId":"basics"},{"to":"/postgraphile/function-gallery/","title":"Function Gallery","sectionId":"customising"}]},{"to":"/postgraphile/views/","title":"Views","sectionId":"basics","subpages":[]},{"to":"/postgraphile/aggregates/","title":"Aggregates","sectionId":"basics","subpages":[]},{"to":"/postgraphile/postgresql-indexes/","title":"PostgreSQL Indexes","sectionId":"basics","subpages":[]},{"to":"/postgraphile/security/","title":"Security","sectionId":"basics","subpages":[]},{"to":"/postgraphile/realtime/","title":"Realtime","sectionId":"basics","subpages":[{"to":"/postgraphile/subscriptions/","title":"Subscriptions","sectionId":"basics"},{"to":"/postgraphile/live-queries/","title":"Live Queries","sectionId":"basics"}]},{"to":"/postgraphile/reserved-keywords/","title":"Reserved Keywords","sectionId":"basics","subpages":[]},{"to":"/postgraphile/debugging/","title":"Debugging","sectionId":"basics","subpages":[]},{"to":"/postgraphile/smart-comments/","title":"Smart Comments","sectionId":"customising","subpages":[]},{"to":"/postgraphile/extending/","title":"Schema Plugins","sectionId":"customising","subpages":[{"to":"/postgraphile/make-add-inflectors-plugin/","title":"makeAddInflectorsPlugin","sectionId":"customising"},{"to":"/postgraphile/make-change-nullability-plugin/","title":"makeChangeNullabilityPlugin","sectionId":"customising"},{"to":"/postgraphile/make-extend-schema-plugin/","title":"makeExtendSchemaPlugin","sectionId":"customising"},{"to":"/postgraphile/make-process-schema-plugin/","title":"makeProcessSchemaPlugin","sectionId":"customising"},{"to":"/postgraphile/make-wrap-resolvers-plugin/","title":"makeWrapResolversPlugin","sectionId":"customising"},{"to":"/postgraphile/make-plugin-by-combining-plugins/","title":"makePluginByCombiningPlugins","sectionId":"customising"},{"to":"/postgraphile/extending-raw/","title":"Graphile Engine","sectionId":"customising"},{"to":"/postgraphile/plugin-gallery/","title":"Plugin Gallery","sectionId":"customising"},{"to":"/postgraphile/community-plugins/","title":"Community Plugins","sectionId":"customising"}]},{"to":"/postgraphile/plugins/","title":"Server Plugins","sectionId":"customising","subpages":[]},{"to":"/postgraphile/postgresql-schema-design/","title":"PostgreSQL Schema Design","sectionId":"guides","subpages":[]},{"to":"/postgraphile/evaluating/","title":"Evaluating for your Project","sectionId":"guides","subpages":[]},{"to":"/postgraphile/best-practices/","title":"Best Practices","sectionId":"guides","subpages":[]},{"to":"/postgraphile/production/","title":"Production Considerations","sectionId":"guides","subpages":[]},{"to":"/postgraphile/jwt-guide/","title":"PostGraphile JWT Guide","sectionId":"guides","subpages":[]},{"to":"/postgraphile/jwk-verification/","title":"JWK Verification (e.g. Auth0)","sectionId":"guides","subpages":[]},{"to":"/postgraphile/default-role/","title":"The Default Role","sectionId":"guides","subpages":[]},{"to":"/postgraphile/pg-pubsub-migration/","title":"@graphile/pg-pubsub Migration Guide","sectionId":"guides","subpages":[]},{"to":"/postgraphile/v4-new-features/","title":"v4 Feature Guide","sectionId":"guides","subpages":[]},{"to":"/postgraphile/v3-migration/","title":"v3 → v4 Migration Guide","sectionId":"guides","subpages":[]},{"to":"/postgraphile/testing-jest/","title":"Testing with Jest","sectionId":"guides","subpages":[]},{"to":"/postgraphile/community-contributions/","title":"Community Contributions","sectionId":"community","subpages":[]},{"to":"/postgraphile/community-chat/","title":"Community Chat","sectionId":"community","subpages":[]},{"to":"/postgraphile/code-of-conduct/","title":"Code of Conduct","sectionId":"community","subpages":[]},{"to":"/postgraphile/introspection/","title":"Introspection?","sectionId":"faq","subpages":[]},{"to":"/postgraphile/why-nullable/","title":"Why is it nullable?","sectionId":"faq","subpages":[]},{"to":"/postgraphile/versioning-policy/","title":"Versioning policy?","sectionId":"faq","subpages":[]}]}},{"node":{"id":"3e71fc2f-bdc0-5e8d-a1d7-aba118117d0f","name":"graphile-build-pg","sections":[{"id":"overview","title":"Usage"}],"pages":[{"to":"/graphile-build-pg/settings/","title":"Settings","sectionId":"overview","subpages":[]}]}}]},"examples":{"edges":[{"node":{"category":"functions","id":"48d3e146-a69f-590f-ab77-e7937a84bf62","title":"Custom queries","examples":[{"title":"Logged in user field","example":"create function viewer()\nreturns users\nas $$\n  select *\n  from users\n  where id = current_user_id();\n  /*\n   * current_user_id() is a function\n   * that returns the logged in user's\n   * id, e.g. by extracting from the JWT\n   * or indicated via pgSettings.\n   */\n$$ language sql stable set search_path from current;\n","exampleLanguage":"sql","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1793,6 +1793,7 @@\n \n   \"\"\"Chosen by fair dice roll. Guaranteed to be random. XKCD#221\"\"\"\n   randomNumber: Int\n+  viewer: User\n \n   \"\"\"Reads a single `Forum` using its globally unique `ID`.\"\"\"\n   forumByNodeId(\n","resultLanguage":"diff"}]}},{"node":{"category":"functions","id":"dd364008-19c3-5692-9e91-a23e830f1df7","title":"Computed columns","examples":[{"title":"User primary email","example":"/*\n * Returns the primary email of the\n * current user; for all other users\n * this function will return null.\n */\ncreate function \"users_primaryEmail\"(u users)\nreturns text\nas $$\n  select email\n  from user_emails\n  where user_id = current_user_id()\n  and user_id = u.id\n  and is_verified is true\n  order by id asc\n  limit 1;\n$$ language sql stable set search_path from current;\n","exampleLanguage":"sql","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -3128,6 +3128,7 @@\n     \"\"\"\n     condition: QuizEntryCondition\n   ): QuizEntriesConnection!\n+  primaryEmail: String\n }\n \n \"\"\"\n","resultLanguage":"diff"}]}},{"node":{"category":"functions","id":"480e1844-694a-50cf-8d45-86fb89ec6627","title":"Custom mutations","examples":[{"title":"Insert multiple records","example":"/**\n * Occasionally you'll want to create a bunch of rows in different tables in a\n * single mutation. Here's an example of how to do that.\n *\n * Pretend we're registering quiz entries, and we want to store each answer in\n * its own table as we want to be able to operate on the answers independently\n * later.\n *\n * This means we want:\n *\n *  1. A mutation that takes input data for inserting one quiz entry and\n *  multiple answers.\n *  2. A function that inserts a new quiz entry, inserts an answer for each\n *  answer provided in the input data, and connects each answer to the created\n *  quiz entry.\n *  3. Finally, we want the function to return the inserted quiz entry itself.\n */\n\n/**\n * This type is used for input in the mutation\n */\ncreate type quiz_entry_input as (\n  question text,\n  answer int\n);\n\n/**\n * Here's the function that gets turned into a \"custom mutation\"\n */\ncreate function add_quiz_entry(\n  quiz_id int,\n  answers quiz_entry_input[]\n)\nreturns quiz_entry\nas $$\n  declare\n    q quiz_entry;\n    a quiz_entry_answer;\n  begin\n    insert into quiz_entry(user_id, quiz_id)\n      values(current_user_id(), quiz_id)\n      returning * into q;\n\n    foreach a in array answers loop\n      insert into quiz_entry_answer(quiz_entry_id, question, answer)\n        values (quiz_id, a.question, a.answer);\n    end loop;\n\n    return q;\n  end;\n$$ language plpgsql volatile strict set search_path from current;\n","exampleLanguage":"sql","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1,3 +1,41 @@\n+\"\"\"All input for the `addQuizEntry` mutation.\"\"\"\n+input AddQuizEntryInput {\n+  \"\"\"\n+  An arbitrary string value with no semantic meaning. Will be included in the\n+  payload verbatim. May be used to track mutations by the client.\n+  \"\"\"\n+  clientMutationId: String\n+  quizId: Int!\n+  answers: [QuizEntryInputRecordInput]!\n+}\n+\n+\"\"\"The output of our `addQuizEntry` mutation.\"\"\"\n+type AddQuizEntryPayload {\n+  \"\"\"\n+  The exact same `clientMutationId` that was provided in the mutation input,\n+  unchanged and unused. May be used by a client to track mutations.\n+  \"\"\"\n+  clientMutationId: String\n+  quizEntry: QuizEntry\n+\n+  \"\"\"\n+  Our root query field type. Allows us to run any query from our mutation payload.\n+  \"\"\"\n+  query: Query\n+\n+  \"\"\"Reads a single `User` that is related to this `QuizEntry`.\"\"\"\n+  user: User\n+\n+  \"\"\"Reads a single `Quiz` that is related to this `QuizEntry`.\"\"\"\n+  quiz: Quiz\n+\n+  \"\"\"An edge for our `QuizEntry`. May be used by Relay 1.\"\"\"\n+  quizEntryEdge(\n+    \"\"\"The method to use when ordering `QuizEntry`.\"\"\"\n+    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\n+  ): QuizEntriesEdge\n+}\n+\n \"\"\"\n A floating point number that requires more precision than IEEE 754 binary 64\n \"\"\"\n@@ -1470,6 +1508,12 @@\n     \"\"\"\n     input: DeleteUserByUsernameInput!\n   ): DeleteUserPayload\n+  addQuizEntry(\n+    \"\"\"\n+    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    \"\"\"\n+    input: AddQuizEntryInput!\n+  ): AddQuizEntryPayload\n \n   \"\"\"\n   If you've forgotten your password, give us one of your email addresses and we'\n@@ -2113,6 +2157,12 @@\n   quizId: Int!\n }\n \n+\"\"\"An input for mutations affecting `QuizEntryInputRecord`\"\"\"\n+input QuizEntryInputRecordInput {\n+  question: String\n+  answer: Int\n+}\n+\n \"\"\"\n Represents an update to a `QuizEntry`. Fields that are set will be updated.\n \"\"\"\n","resultLanguage":"diff"}]}},{"node":{"category":"plugins","id":"ad2344bd-bebf-561f-8cb0-69db1270c9bb","title":"Inflector","examples":[{"title":"PgRenamePatchToPatchSetPlugin","example":"/**\n * Simply renames the `UserPatch` and `PostPatch` type names to be called\n * `UserPatchSet` and `PostPatchSet` instead.\n *\n * Not particularly useful, just an example. ('PatchSet' chosen to minimise\n * diff to make example clearer.)\n *\n * Replaces this inflector:\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L309-L311\n */\nmodule.exports = function PgRenamePatchToPatchSetPlugin(\n  builder\n) {\n  builder.hook(\n    \"inflection\",\n    inflector => ({\n      // Retain the existing inflectors\n      ...inflector,\n\n      // Override the patchType inflector\n      patchType(typeName) {\n        // return this.upperCamelCase(`${typeName}-patch`);\n        return this.upperCamelCase(\n          `${typeName}-patch-set`\n        );\n      },\n    })\n  );\n};\n","exampleLanguage":"javascript","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -979,7 +979,7 @@\n \"\"\"\n Represents an update to a `Forum`. Fields that are set will be updated.\n \"\"\"\n-input ForumPatch {\n+input ForumPatchSet {\n   id: Int\n \n   \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n@@ -1571,7 +1571,7 @@\n }\n \n \"\"\"Represents an update to a `Post`. Fields that are set will be updated.\"\"\"\n-input PostPatch {\n+input PostPatchSet {\n   \"\"\"The body of the `Topic`, which Posts reply to.\"\"\"\n   body: String\n }\n@@ -2041,7 +2041,7 @@\n \"\"\"\n Represents an update to a `QuizEntryAnswer`. Fields that are set will be updated.\n \"\"\"\n-input QuizEntryAnswerPatch {\n+input QuizEntryAnswerPatchSet {\n   id: Int\n   quizEntryId: Int\n   question: String\n@@ -2116,7 +2116,7 @@\n \"\"\"\n Represents an update to a `QuizEntry`. Fields that are set will be updated.\n \"\"\"\n-input QuizEntryPatch {\n+input QuizEntryPatchSet {\n   id: Int\n   userId: Int\n   quizId: Int\n@@ -2132,7 +2132,7 @@\n }\n \n \"\"\"Represents an update to a `Quiz`. Fields that are set will be updated.\"\"\"\n-input QuizPatch {\n+input QuizPatchSet {\n   id: Int\n   name: String\n   updatedAt: Datetime\n@@ -2315,7 +2315,7 @@\n \"\"\"\n Represents an update to a `Topic`. Fields that are set will be updated.\n \"\"\"\n-input TopicPatch {\n+input TopicPatchSet {\n   id: Int\n   forumId: Int\n   authorId: Int\n@@ -2392,7 +2392,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Forum` being updated.\n   \"\"\"\n-  patch: ForumPatch!\n+  patch: ForumPatchSet!\n }\n \n \"\"\"All input for the `updateForumBySlug` mutation.\"\"\"\n@@ -2406,7 +2406,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Forum` being updated.\n   \"\"\"\n-  patch: ForumPatch!\n+  patch: ForumPatchSet!\n \n   \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n   slug: String!\n@@ -2423,7 +2423,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Forum` being updated.\n   \"\"\"\n-  patch: ForumPatch!\n+  patch: ForumPatchSet!\n   id: Int!\n }\n \n@@ -2466,7 +2466,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Post` being updated.\n   \"\"\"\n-  patch: PostPatch!\n+  patch: PostPatchSet!\n }\n \n \"\"\"All input for the `updatePost` mutation.\"\"\"\n@@ -2480,7 +2480,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Post` being updated.\n   \"\"\"\n-  patch: PostPatch!\n+  patch: PostPatchSet!\n   id: Int!\n }\n \n@@ -2529,7 +2529,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Quiz` being updated.\n   \"\"\"\n-  patch: QuizPatch!\n+  patch: QuizPatchSet!\n }\n \n \"\"\"All input for the `updateQuizEntryAnswerByNodeId` mutation.\"\"\"\n@@ -2548,7 +2548,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n   \"\"\"\n-  patch: QuizEntryAnswerPatch!\n+  patch: QuizEntryAnswerPatchSet!\n }\n \n \"\"\"All input for the `updateQuizEntryAnswer` mutation.\"\"\"\n@@ -2562,7 +2562,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n   \"\"\"\n-  patch: QuizEntryAnswerPatch!\n+  patch: QuizEntryAnswerPatchSet!\n   id: Int!\n }\n \n@@ -2608,7 +2608,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `QuizEntry` being updated.\n   \"\"\"\n-  patch: QuizEntryPatch!\n+  patch: QuizEntryPatchSet!\n }\n \n \"\"\"All input for the `updateQuizEntry` mutation.\"\"\"\n@@ -2622,7 +2622,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `QuizEntry` being updated.\n   \"\"\"\n-  patch: QuizEntryPatch!\n+  patch: QuizEntryPatchSet!\n   id: Int!\n }\n \n@@ -2666,7 +2666,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Quiz` being updated.\n   \"\"\"\n-  patch: QuizPatch!\n+  patch: QuizPatchSet!\n   id: Int!\n }\n \n@@ -2709,7 +2709,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Topic` being updated.\n   \"\"\"\n-  patch: TopicPatch!\n+  patch: TopicPatchSet!\n }\n \n \"\"\"All input for the `updateTopic` mutation.\"\"\"\n@@ -2723,7 +2723,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Topic` being updated.\n   \"\"\"\n-  patch: TopicPatch!\n+  patch: TopicPatchSet!\n   id: Int!\n }\n \n@@ -2772,7 +2772,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserAuthentication` being updated.\n   \"\"\"\n-  patch: UserAuthenticationPatch!\n+  patch: UserAuthenticationPatchSet!\n }\n \n \"\"\"\n@@ -2788,7 +2788,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserAuthentication` being updated.\n   \"\"\"\n-  patch: UserAuthenticationPatch!\n+  patch: UserAuthenticationPatchSet!\n \n   \"\"\"The login service used, e.g. `twitter` or `github`.\"\"\"\n   service: String!\n@@ -2808,7 +2808,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserAuthentication` being updated.\n   \"\"\"\n-  patch: UserAuthenticationPatch!\n+  patch: UserAuthenticationPatchSet!\n   id: Int!\n }\n \n@@ -2851,7 +2851,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `User` being updated.\n   \"\"\"\n-  patch: UserPatch!\n+  patch: UserPatchSet!\n }\n \n \"\"\"All input for the `updateUserByUsername` mutation.\"\"\"\n@@ -2865,7 +2865,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `User` being updated.\n   \"\"\"\n-  patch: UserPatch!\n+  patch: UserPatchSet!\n \n   \"\"\"Public-facing username (or 'handle') of the user.\"\"\"\n   username: String!\n@@ -2887,7 +2887,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserEmail` being updated.\n   \"\"\"\n-  patch: UserEmailPatch!\n+  patch: UserEmailPatchSet!\n }\n \n \"\"\"All input for the `updateUserEmailByUserIdAndEmail` mutation.\"\"\"\n@@ -2901,7 +2901,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserEmail` being updated.\n   \"\"\"\n-  patch: UserEmailPatch!\n+  patch: UserEmailPatchSet!\n   userId: Int!\n \n   \"\"\"The users email address, in `a@b.c` format.\"\"\"\n@@ -2919,7 +2919,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserEmail` being updated.\n   \"\"\"\n-  patch: UserEmailPatch!\n+  patch: UserEmailPatchSet!\n   id: Int!\n }\n \n@@ -2960,7 +2960,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `User` being updated.\n   \"\"\"\n-  patch: UserPatch!\n+  patch: UserPatchSet!\n \n   \"\"\"Unique identifier for the user.\"\"\"\n   id: Int!\n@@ -3165,7 +3165,7 @@\n \"\"\"\n Represents an update to a `UserAuthentication`. Fields that are set will be updated.\n \"\"\"\n-input UserAuthenticationPatch {\n+input UserAuthenticationPatchSet {\n   id: Int\n \n   \"\"\"The login service used, e.g. `twitter` or `github`.\"\"\"\n@@ -3271,7 +3271,7 @@\n \"\"\"\n Represents an update to a `UserEmail`. Fields that are set will be updated.\n \"\"\"\n-input UserEmailPatch {\n+input UserEmailPatchSet {\n   id: Int\n   userId: Int\n \n@@ -3353,7 +3353,7 @@\n }\n \n \"\"\"Represents an update to a `User`. Fields that are set will be updated.\"\"\"\n-input UserPatch {\n+input UserPatchSet {\n   \"\"\"Unique identifier for the user.\"\"\"\n   id: Int\n \n","resultLanguage":"diff"},{"title":"PgShortenAllRowsInflectorPlugin","example":"/**\n * Simply renames the `allUsers` and `allPosts` Query fields to `users` and\n * `posts` respectively.\n *\n * Not particularly useful, just an example.\n *\n * Replaces this inflector:\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L460-L464\n */\nmodule.exports = function PgShortenAllRowsInflectorPlugin(\n  builder\n) {\n  builder.hook(\n    \"inflection\",\n    inflector => ({\n      // Retain the existing inflectors\n      ...inflector,\n\n      // Override the allRows inflector\n      allRows(table) {\n        return this.camelCase(\n          // Was: `all-${this.pluralize(this._singularizedTableName(table))}`\n          // Now:\n          this.pluralize(\n            this._singularizedTableName(\n              table\n            )\n          )\n        );\n      },\n    })\n  );\n};\n","exampleLanguage":"javascript","result":"","resultLanguage":"diff"}]}},{"node":{"category":"plugins","id":"4f96cdae-24d6-5277-a7a3-0df69363b25c","title":"Types","examples":[{"title":"PgNumericToFloatPlugin","example":"/**\n * Use of this plugin is NOT recommended, please see\n * PgSmallNumericToFloatPlugin for a more appropriate replacement if you need\n * one.\n *\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\n * for *all* DECIMAL / NUMERIC values, for making PostGraphile v4 slightly more\n * backwards-compatible with v3.\n *\n * It's generally a bad idea to use floating point numbers to represent\n * arbitrary precision numbers such as NUMERIC because loss of precision can\n * occur.\n */\nmodule.exports = function PgNumericToFloatPlugin(\n  builder\n) {\n  builder.hook(\"build\", build => {\n    // Register a type handler for NUMERIC / DECIMAL (oid = 1700), always\n    // returning the GraphQLFloat type\n    build.pgRegisterGqlTypeByTypeId(\n      \"1700\",\n      () => build.graphql.GraphQLFloat\n    );\n    return build;\n  });\n};\n","exampleLanguage":"javascript","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1,8 +1,3 @@\n-\"\"\"\n-A floating point number that requires more precision than IEEE 754 binary 64\n-\"\"\"\n-scalar BigFloat\n-\n \"\"\"All input for the create `Forum` mutation.\"\"\"\n input CreateForumInput {\n   \"\"\"\n@@ -1861,8 +1856,8 @@\n   id: Int!\n   name: String!\n   updatedAt: Datetime!\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n+  precision12Scale2: Float\n+  precision200Scale100: Float\n \n   \"\"\"Reads and enables pagination through a set of `QuizEntry`.\"\"\"\n   quizEntries(\n@@ -1908,10 +1903,10 @@\n   updatedAt: Datetime\n \n   \"\"\"Checks for equality with the object’s `precision12Scale2` field.\"\"\"\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n \n   \"\"\"Checks for equality with the object’s `precision200Scale100` field.\"\"\"\n-  precision200Scale100: BigFloat\n+  precision200Scale100: Float\n }\n \n \"\"\"A connection to a list of `QuizEntry` values.\"\"\"\n@@ -2127,8 +2122,8 @@\n   id: Int\n   name: String!\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n+  precision12Scale2: Float\n+  precision200Scale100: Float\n }\n \n \"\"\"Represents an update to a `Quiz`. Fields that are set will be updated.\"\"\"\n@@ -2136,8 +2131,8 @@\n   id: Int\n   name: String\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n+  precision12Scale2: Float\n+  precision200Scale100: Float\n }\n \n \"\"\"A connection to a list of `Quiz` values.\"\"\"\n","resultLanguage":"diff"},{"title":"PgSmallNumericToFloatPlugin","example":"/**\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\n * for DECIMAL / NUMERIC values that have a precision and scale under the given\n * limits (currently 12 and 2 respectively).\n *\n * It's generally a bad idea to use floating point numbers to represent\n * arbitrary precision numbers such as NUMERIC because loss of precision can\n * occur; however some systems are okay with this compromise.\n */\nmodule.exports = function PgSmallNumericToFloatPlugin(\n  builder,\n  {\n    pgNumericToFloatPrecisionCap = 12,\n    pgNumericToFloatScaleCap = 2,\n  }\n) {\n  builder.hook(\"build\", build => {\n    // Register a type handler for NUMERIC / DECIMAL (oid = 1700)\n    build.pgRegisterGqlTypeByTypeId(\n      \"1700\",\n      (_set, modifier) => {\n        if (\n          modifier &&\n          typeof modifier ===\n            \"number\" &&\n          modifier > 0\n        ) {\n          // Ref: https://stackoverflow.com/a/3351120/141284\n          const precision =\n            ((modifier - 4) >> 16) &\n            65535;\n          const scale =\n            (modifier - 4) & 65535;\n          if (\n            precision <=\n              pgNumericToFloatPrecisionCap &&\n            scale <=\n              pgNumericToFloatScaleCap\n          ) {\n            // This number is no more precise than our cap, so we're declaring\n            // that we can handle it as a float:\n            return build.graphql\n              .GraphQLFloat;\n          }\n        }\n        // If all else fails, let PostGraphile do it's default handling - i.e.\n        // BigFloat\n        return null;\n      }\n    );\n\n    // We didn't modify _init, but we still must return it.\n    return build;\n  });\n};\n","exampleLanguage":"javascript","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1861,7 +1861,7 @@\n   id: Int!\n   name: String!\n   updatedAt: Datetime!\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n   precision200Scale100: BigFloat\n \n   \"\"\"Reads and enables pagination through a set of `QuizEntry`.\"\"\"\n@@ -1908,7 +1908,7 @@\n   updatedAt: Datetime\n \n   \"\"\"Checks for equality with the object’s `precision12Scale2` field.\"\"\"\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n \n   \"\"\"Checks for equality with the object’s `precision200Scale100` field.\"\"\"\n   precision200Scale100: BigFloat\n@@ -2127,7 +2127,7 @@\n   id: Int\n   name: String!\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n   precision200Scale100: BigFloat\n }\n \n@@ -2136,7 +2136,7 @@\n   id: Int\n   name: String\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n   precision200Scale100: BigFloat\n }\n \n","resultLanguage":"diff"},{"title":"SetInputObjectDefaultValue","example":"/**\n * This plugin sets a defaultValue on all input object fields that match the\n * given criteria (specifically the 'create' input types, for columns named\n * 'name')\n */\nmodule.exports = function SetInputObjectDefaultValue(\n  builder\n) {\n  builder.hook(\n    \"GraphQLInputObjectType:fields:field\",\n    (field, build, context) => {\n      const {\n        scope: {\n          isPgRowType,\n          isInputType,\n          isPgPatch,\n          pgFieldIntrospection: attr,\n        },\n      } = context;\n      if (\n        !isPgRowType ||\n        !isInputType ||\n        isPgPatch ||\n        !attr ||\n        attr.kind !== \"attribute\" ||\n        attr.name !== \"name\"\n      ) {\n        return field;\n      }\n\n      return {\n        ...field,\n        type: build.graphql.getNamedType(\n          field.type\n        ), // Since it has a default, it can be nullable\n        defaultValue:\n          // attr.tags.defaultValue: enables overriding this with a\n          // `@defaultValue Alice Smith` smart comment\n          attr.tags.defaultValue ||\n          \"Bobby Tables\",\n      };\n    }\n  );\n};\n","exampleLanguage":"javascript","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -968,7 +968,7 @@\n   slug: String!\n \n   \"\"\"The name of the `Forum` (indicates its subject matter).\"\"\"\n-  name: String!\n+  name: String = \"Bobby Tables\"\n \n   \"\"\"A brief description of the `Forum` including it's purpose.\"\"\"\n   description: String\n@@ -2125,7 +2125,7 @@\n \"\"\"An input for mutations affecting `Quiz`\"\"\"\n input QuizInput {\n   id: Int\n-  name: String!\n+  name: String = \"Bobby Tables\"\n   updatedAt: Datetime\n   precision12Scale2: BigFloat\n   precision200Scale100: BigFloat\n@@ -3341,7 +3341,7 @@\n   username: String!\n \n   \"\"\"Public-facing name (or pseudonym) of the user.\"\"\"\n-  name: String\n+  name: String = \"Bobby Tables\"\n \n   \"\"\"Optional avatar URL.\"\"\"\n   avatarUrl: String\n","resultLanguage":"diff"}]}},{"node":{"category":"plugins","id":"e26cc8a1-2fc8-5bce-aad0-bc414d60ad34","title":"Mutation wrappers","examples":[{"title":"OverrideArgValuePlugin","example":"/**\n * This plugin sets the `input.quizPatch.updatedAt` to the current timestamp in\n * the `updateQuiz*` mutations IFF it's not already set.\n */\nmodule.exports = function SetInputObjectDefaultValue(\n  builder\n) {\n  builder.hook(\n    \"GraphQLObjectType:fields:field\",\n    (field, build, context) => {\n      const {\n        scope: {\n          isPgUpdateMutationField,\n          pgFieldIntrospection: table,\n        },\n      } = context;\n      if (\n        !isPgUpdateMutationField ||\n        table.kind !== \"class\" ||\n        table.name !== \"quiz\"\n      ) {\n        return field;\n      }\n\n      const oldResolve =\n        field.resolve;\n\n      return {\n        ...field,\n        resolve(\n          _mutation,\n          args,\n          context,\n          info\n        ) {\n          // Override the `updatedAt` field if it's not already set.\n          if (\n            args.input.quizPatch\n              .updatedAt == null\n          ) {\n            args.input.quizPatch.updatedAt = new Date().toISOString();\n          }\n          return oldResolve(\n            _mutation,\n            args,\n            context,\n            info\n          );\n        },\n      };\n    }\n  );\n};\n\n// Tested via:\n// npx postgraphile --append-plugins @graphile-contrib/pg-simplify-inflector,`pwd`/examples/plugins/0300_mutation_wrappers/OverrideArgValuePlugin.js -c graphile_org_demo -s app_public\n","exampleLanguage":"javascript","result":"","resultLanguage":"diff"}]}},{"node":{"category":"plugins","id":"c218e92f-d992-5b34-8876-51135bdda75a","title":"Customisation","examples":[{"title":"OmitMutationsByDefaultPlugin","example":"/**\n * This plugin treats any table that doesn't have an `@omit` comment as if it\n * had `@omit create,update,delete` (thereby disabling mutations).\n *\n * Override it by adding a smart comment to the table. To restore all\n * mutations, do `COMMENT ON my_table IS E'@omit :';` (the `:` is special\n * syntax for \"nothing\").\n */\nmodule.exports = function OmitMutationsByDefaultPlugin(\n  builder\n) {\n  builder.hook(\"build\", build => {\n    const {\n      pgIntrospectionResultsByKind,\n    } = build;\n    pgIntrospectionResultsByKind.class\n      .filter(\n        table =>\n          table.isSelectable &&\n          table.namespace\n      )\n      .forEach(table => {\n        if (!(\"omit\" in table.tags)) {\n          table.tags.omit =\n            \"create,update,delete\";\n        }\n      });\n    return build;\n  });\n};\n\n// Tested via:\n// npx postgraphile --append-plugins @graphile-contrib/pg-simplify-inflector,`pwd`/examples/plugins/0400_customisation/OmitMutationsByDefaultPlugin.js -c graphile_org_demo -s app_public\n","exampleLanguage":"javascript","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -3,41 +3,6 @@\n \"\"\"\n scalar BigFloat\n \n-\"\"\"All input for the create `Forum` mutation.\"\"\"\n-input CreateForumInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Forum` to be created by this mutation.\"\"\"\n-  forum: ForumInput!\n-}\n-\n-\"\"\"The output of our create `Forum` mutation.\"\"\"\n-type CreateForumPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Forum` that was created by this mutation.\"\"\"\n-  forum: Forum\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Forum`. May be used by Relay 1.\"\"\"\n-  forumEdge(\n-    \"\"\"The method to use when ordering `Forum`.\"\"\"\n-    orderBy: [ForumsOrderBy!] = PRIMARY_KEY_ASC\n-  ): ForumsEdge\n-}\n-\n \"\"\"All input for the create `Post` mutation.\"\"\"\n input CreatePostInput {\n   \"\"\"\n@@ -79,120 +44,6 @@\n   ): PostsEdge\n }\n \n-\"\"\"All input for the create `QuizEntryAnswer` mutation.\"\"\"\n-input CreateQuizEntryAnswerInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntryAnswer` to be created by this mutation.\"\"\"\n-  quizEntryAnswer: QuizEntryAnswerInput!\n-}\n-\n-\"\"\"The output of our create `QuizEntryAnswer` mutation.\"\"\"\n-type CreateQuizEntryAnswerPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntryAnswer` that was created by this mutation.\"\"\"\n-  quizEntryAnswer: QuizEntryAnswer\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\"\"\"\n-  quizEntry: QuizEntry\n-\n-  \"\"\"An edge for our `QuizEntryAnswer`. May be used by Relay 1.\"\"\"\n-  quizEntryAnswerEdge(\n-    \"\"\"The method to use when ordering `QuizEntryAnswer`.\"\"\"\n-    orderBy: [QuizEntryAnswersOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntryAnswersEdge\n-}\n-\n-\"\"\"All input for the create `QuizEntry` mutation.\"\"\"\n-input CreateQuizEntryInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntry` to be created by this mutation.\"\"\"\n-  quizEntry: QuizEntryInput!\n-}\n-\n-\"\"\"The output of our create `QuizEntry` mutation.\"\"\"\n-type CreateQuizEntryPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntry` that was created by this mutation.\"\"\"\n-  quizEntry: QuizEntry\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `User` that is related to this `QuizEntry`.\"\"\"\n-  user: User\n-\n-  \"\"\"Reads a single `Quiz` that is related to this `QuizEntry`.\"\"\"\n-  quiz: Quiz\n-\n-  \"\"\"An edge for our `QuizEntry`. May be used by Relay 1.\"\"\"\n-  quizEntryEdge(\n-    \"\"\"The method to use when ordering `QuizEntry`.\"\"\"\n-    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntriesEdge\n-}\n-\n-\"\"\"All input for the create `Quiz` mutation.\"\"\"\n-input CreateQuizInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Quiz` to be created by this mutation.\"\"\"\n-  quiz: QuizInput!\n-}\n-\n-\"\"\"The output of our create `Quiz` mutation.\"\"\"\n-type CreateQuizPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Quiz` that was created by this mutation.\"\"\"\n-  quiz: Quiz\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Quiz`. May be used by Relay 1.\"\"\"\n-  quizEdge(\n-    \"\"\"The method to use when ordering `Quiz`.\"\"\"\n-    orderBy: [QuizzesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizzesEdge\n-}\n-\n \"\"\"All input for the create `Topic` mutation.\"\"\"\n input CreateTopicInput {\n   \"\"\"\n@@ -351,66 +202,6 @@\n \"\"\"\n scalar Datetime\n \n-\"\"\"All input for the `deleteForumByNodeId` mutation.\"\"\"\n-input DeleteForumByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `Forum` to be deleted.\n-  \"\"\"\n-  nodeId: ID!\n-}\n-\n-\"\"\"All input for the `deleteForumBySlug` mutation.\"\"\"\n-input DeleteForumBySlugInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n-  slug: String!\n-}\n-\n-\"\"\"All input for the `deleteForum` mutation.\"\"\"\n-input DeleteForumInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-\"\"\"The output of our delete `Forum` mutation.\"\"\"\n-type DeleteForumPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Forum` that was deleted by this mutation.\"\"\"\n-  forum: Forum\n-  deletedForumNodeId: ID\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Forum`. May be used by Relay 1.\"\"\"\n-  forumEdge(\n-    \"\"\"The method to use when ordering `Forum`.\"\"\"\n-    orderBy: [ForumsOrderBy!] = PRIMARY_KEY_ASC\n-  ): ForumsEdge\n-}\n-\n \"\"\"All input for the `deletePostByNodeId` mutation.\"\"\"\n input DeletePostByNodeIdInput {\n   \"\"\"\n@@ -465,159 +256,6 @@\n   ): PostsEdge\n }\n \n-\"\"\"All input for the `deleteQuizByNodeId` mutation.\"\"\"\n-input DeleteQuizByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `Quiz` to be deleted.\n-  \"\"\"\n-  nodeId: ID!\n-}\n-\n-\"\"\"All input for the `deleteQuizEntryAnswerByNodeId` mutation.\"\"\"\n-input DeleteQuizEntryAnswerByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `QuizEntryAnswer` to be deleted.\n-  \"\"\"\n-  nodeId: ID!\n-}\n-\n-\"\"\"All input for the `deleteQuizEntryAnswer` mutation.\"\"\"\n-input DeleteQuizEntryAnswerInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-\"\"\"The output of our delete `QuizEntryAnswer` mutation.\"\"\"\n-type DeleteQuizEntryAnswerPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntryAnswer` that was deleted by this mutation.\"\"\"\n-  quizEntryAnswer: QuizEntryAnswer\n-  deletedQuizEntryAnswerNodeId: ID\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\"\"\"\n-  quizEntry: QuizEntry\n-\n-  \"\"\"An edge for our `QuizEntryAnswer`. May be used by Relay 1.\"\"\"\n-  quizEntryAnswerEdge(\n-    \"\"\"The method to use when ordering `QuizEntryAnswer`.\"\"\"\n-    orderBy: [QuizEntryAnswersOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntryAnswersEdge\n-}\n-\n-\"\"\"All input for the `deleteQuizEntryByNodeId` mutation.\"\"\"\n-input DeleteQuizEntryByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `QuizEntry` to be deleted.\n-  \"\"\"\n-  nodeId: ID!\n-}\n-\n-\"\"\"All input for the `deleteQuizEntry` mutation.\"\"\"\n-input DeleteQuizEntryInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-\"\"\"The output of our delete `QuizEntry` mutation.\"\"\"\n-type DeleteQuizEntryPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntry` that was deleted by this mutation.\"\"\"\n-  quizEntry: QuizEntry\n-  deletedQuizEntryNodeId: ID\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `User` that is related to this `QuizEntry`.\"\"\"\n-  user: User\n-\n-  \"\"\"Reads a single `Quiz` that is related to this `QuizEntry`.\"\"\"\n-  quiz: Quiz\n-\n-  \"\"\"An edge for our `QuizEntry`. May be used by Relay 1.\"\"\"\n-  quizEntryEdge(\n-    \"\"\"The method to use when ordering `QuizEntry`.\"\"\"\n-    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntriesEdge\n-}\n-\n-\"\"\"All input for the `deleteQuiz` mutation.\"\"\"\n-input DeleteQuizInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-\"\"\"The output of our delete `Quiz` mutation.\"\"\"\n-type DeleteQuizPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Quiz` that was deleted by this mutation.\"\"\"\n-  quiz: Quiz\n-  deletedQuizNodeId: ID\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Quiz`. May be used by Relay 1.\"\"\"\n-  quizEdge(\n-    \"\"\"The method to use when ordering `Quiz`.\"\"\"\n-    orderBy: [QuizzesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizzesEdge\n-}\n-\n \"\"\"All input for the `deleteTopicByNodeId` mutation.\"\"\"\n input DeleteTopicByNodeIdInput {\n   \"\"\"\n@@ -960,40 +598,6 @@\n   updatedAt: Datetime\n }\n \n-\"\"\"An input for mutations affecting `Forum`\"\"\"\n-input ForumInput {\n-  id: Int\n-\n-  \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n-  slug: String!\n-\n-  \"\"\"The name of the `Forum` (indicates its subject matter).\"\"\"\n-  name: String!\n-\n-  \"\"\"A brief description of the `Forum` including it's purpose.\"\"\"\n-  description: String\n-  createdAt: Datetime\n-  updatedAt: Datetime\n-}\n-\n-\"\"\"\n-Represents an update to a `Forum`. Fields that are set will be updated.\n-\"\"\"\n-input ForumPatch {\n-  id: Int\n-\n-  \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n-  slug: String\n-\n-  \"\"\"The name of the `Forum` (indicates its subject matter).\"\"\"\n-  name: String\n-\n-  \"\"\"A brief description of the `Forum` including it's purpose.\"\"\"\n-  description: String\n-  createdAt: Datetime\n-  updatedAt: Datetime\n-}\n-\n \"\"\"A connection to a list of `Forum` values.\"\"\"\n type ForumsConnection {\n   \"\"\"A list of `Forum` objects.\"\"\"\n@@ -1043,14 +647,6 @@\n The root mutation type which contains root level fields which mutate data.\n \"\"\"\n type Mutation {\n-  \"\"\"Creates a single `Forum`.\"\"\"\n-  createForum(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: CreateForumInput!\n-  ): CreateForumPayload\n-\n   \"\"\"Creates a single `Post`.\"\"\"\n   createPost(\n     \"\"\"\n@@ -1059,30 +655,6 @@\n     input: CreatePostInput!\n   ): CreatePostPayload\n \n-  \"\"\"Creates a single `Quiz`.\"\"\"\n-  createQuiz(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: CreateQuizInput!\n-  ): CreateQuizPayload\n-\n-  \"\"\"Creates a single `QuizEntry`.\"\"\"\n-  createQuizEntry(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: CreateQuizEntryInput!\n-  ): CreateQuizEntryPayload\n-\n-  \"\"\"Creates a single `QuizEntryAnswer`.\"\"\"\n-  createQuizEntryAnswer(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: CreateQuizEntryAnswerInput!\n-  ): CreateQuizEntryAnswerPayload\n-\n   \"\"\"Creates a single `Topic`.\"\"\"\n   createTopic(\n     \"\"\"\n@@ -1115,30 +687,6 @@\n     input: CreateUserInput!\n   ): CreateUserPayload\n \n-  \"\"\"Updates a single `Forum` using its globally unique id and a patch.\"\"\"\n-  updateForumByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateForumByNodeIdInput!\n-  ): UpdateForumPayload\n-\n-  \"\"\"Updates a single `Forum` using a unique key and a patch.\"\"\"\n-  updateForum(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateForumInput!\n-  ): UpdateForumPayload\n-\n-  \"\"\"Updates a single `Forum` using a unique key and a patch.\"\"\"\n-  updateForumBySlug(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateForumBySlugInput!\n-  ): UpdateForumPayload\n-\n   \"\"\"Updates a single `Post` using its globally unique id and a patch.\"\"\"\n   updatePostByNodeId(\n     \"\"\"\n@@ -1155,56 +703,6 @@\n     input: UpdatePostInput!\n   ): UpdatePostPayload\n \n-  \"\"\"Updates a single `Quiz` using its globally unique id and a patch.\"\"\"\n-  updateQuizByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizByNodeIdInput!\n-  ): UpdateQuizPayload\n-\n-  \"\"\"Updates a single `Quiz` using a unique key and a patch.\"\"\"\n-  updateQuiz(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizInput!\n-  ): UpdateQuizPayload\n-\n-  \"\"\"Updates a single `QuizEntry` using its globally unique id and a patch.\"\"\"\n-  updateQuizEntryByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizEntryByNodeIdInput!\n-  ): UpdateQuizEntryPayload\n-\n-  \"\"\"Updates a single `QuizEntry` using a unique key and a patch.\"\"\"\n-  updateQuizEntry(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizEntryInput!\n-  ): UpdateQuizEntryPayload\n-\n-  \"\"\"\n-  Updates a single `QuizEntryAnswer` using its globally unique id and a patch.\n-  \"\"\"\n-  updateQuizEntryAnswerByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizEntryAnswerByNodeIdInput!\n-  ): UpdateQuizEntryAnswerPayload\n-\n-  \"\"\"Updates a single `QuizEntryAnswer` using a unique key and a patch.\"\"\"\n-  updateQuizEntryAnswer(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizEntryAnswerInput!\n-  ): UpdateQuizEntryAnswerPayload\n-\n   \"\"\"Updates a single `Topic` using its globally unique id and a patch.\"\"\"\n   updateTopicByNodeId(\n     \"\"\"\n@@ -1254,134 +752,62 @@\n     \"\"\"\n     input: UpdateUserEmailByNodeIdInput!\n   ): UpdateUserEmailPayload\n-\n-  \"\"\"Updates a single `UserEmail` using a unique key and a patch.\"\"\"\n-  updateUserEmail(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateUserEmailInput!\n-  ): UpdateUserEmailPayload\n-\n-  \"\"\"Updates a single `UserEmail` using a unique key and a patch.\"\"\"\n-  updateUserEmailByUserIdAndEmail(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateUserEmailByUserIdAndEmailInput!\n-  ): UpdateUserEmailPayload\n-\n-  \"\"\"Updates a single `User` using its globally unique id and a patch.\"\"\"\n-  updateUserByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateUserByNodeIdInput!\n-  ): UpdateUserPayload\n-\n-  \"\"\"Updates a single `User` using a unique key and a patch.\"\"\"\n-  updateUser(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateUserInput!\n-  ): UpdateUserPayload\n-\n-  \"\"\"Updates a single `User` using a unique key and a patch.\"\"\"\n-  updateUserByUsername(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateUserByUsernameInput!\n-  ): UpdateUserPayload\n-\n-  \"\"\"Deletes a single `Forum` using its globally unique id.\"\"\"\n-  deleteForumByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteForumByNodeIdInput!\n-  ): DeleteForumPayload\n-\n-  \"\"\"Deletes a single `Forum` using a unique key.\"\"\"\n-  deleteForum(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteForumInput!\n-  ): DeleteForumPayload\n-\n-  \"\"\"Deletes a single `Forum` using a unique key.\"\"\"\n-  deleteForumBySlug(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteForumBySlugInput!\n-  ): DeleteForumPayload\n-\n-  \"\"\"Deletes a single `Post` using its globally unique id.\"\"\"\n-  deletePostByNodeId(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeletePostByNodeIdInput!\n-  ): DeletePostPayload\n-\n-  \"\"\"Deletes a single `Post` using a unique key.\"\"\"\n-  deletePost(\n+\n+  \"\"\"Updates a single `UserEmail` using a unique key and a patch.\"\"\"\n+  updateUserEmail(\n     \"\"\"\n     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n     \"\"\"\n-    input: DeletePostInput!\n-  ): DeletePostPayload\n+    input: UpdateUserEmailInput!\n+  ): UpdateUserEmailPayload\n \n-  \"\"\"Deletes a single `Quiz` using its globally unique id.\"\"\"\n-  deleteQuizByNodeId(\n+  \"\"\"Updates a single `UserEmail` using a unique key and a patch.\"\"\"\n+  updateUserEmailByUserIdAndEmail(\n     \"\"\"\n     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n     \"\"\"\n-    input: DeleteQuizByNodeIdInput!\n-  ): DeleteQuizPayload\n+    input: UpdateUserEmailByUserIdAndEmailInput!\n+  ): UpdateUserEmailPayload\n \n-  \"\"\"Deletes a single `Quiz` using a unique key.\"\"\"\n-  deleteQuiz(\n+  \"\"\"Updates a single `User` using its globally unique id and a patch.\"\"\"\n+  updateUserByNodeId(\n     \"\"\"\n     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n     \"\"\"\n-    input: DeleteQuizInput!\n-  ): DeleteQuizPayload\n+    input: UpdateUserByNodeIdInput!\n+  ): UpdateUserPayload\n \n-  \"\"\"Deletes a single `QuizEntry` using its globally unique id.\"\"\"\n-  deleteQuizEntryByNodeId(\n+  \"\"\"Updates a single `User` using a unique key and a patch.\"\"\"\n+  updateUser(\n     \"\"\"\n     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n     \"\"\"\n-    input: DeleteQuizEntryByNodeIdInput!\n-  ): DeleteQuizEntryPayload\n+    input: UpdateUserInput!\n+  ): UpdateUserPayload\n \n-  \"\"\"Deletes a single `QuizEntry` using a unique key.\"\"\"\n-  deleteQuizEntry(\n+  \"\"\"Updates a single `User` using a unique key and a patch.\"\"\"\n+  updateUserByUsername(\n     \"\"\"\n     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n     \"\"\"\n-    input: DeleteQuizEntryInput!\n-  ): DeleteQuizEntryPayload\n+    input: UpdateUserByUsernameInput!\n+  ): UpdateUserPayload\n \n-  \"\"\"Deletes a single `QuizEntryAnswer` using its globally unique id.\"\"\"\n-  deleteQuizEntryAnswerByNodeId(\n+  \"\"\"Deletes a single `Post` using its globally unique id.\"\"\"\n+  deletePostByNodeId(\n     \"\"\"\n     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n     \"\"\"\n-    input: DeleteQuizEntryAnswerByNodeIdInput!\n-  ): DeleteQuizEntryAnswerPayload\n+    input: DeletePostByNodeIdInput!\n+  ): DeletePostPayload\n \n-  \"\"\"Deletes a single `QuizEntryAnswer` using a unique key.\"\"\"\n-  deleteQuizEntryAnswer(\n+  \"\"\"Deletes a single `Post` using a unique key.\"\"\"\n+  deletePost(\n     \"\"\"\n     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n     \"\"\"\n-    input: DeleteQuizEntryAnswerInput!\n-  ): DeleteQuizEntryAnswerPayload\n+    input: DeletePostInput!\n+  ): DeletePostPayload\n \n   \"\"\"Deletes a single `Topic` using its globally unique id.\"\"\"\n   deleteTopicByNodeId(\n@@ -2030,24 +1456,6 @@\n   answer: Int\n }\n \n-\"\"\"An input for mutations affecting `QuizEntryAnswer`\"\"\"\n-input QuizEntryAnswerInput {\n-  id: Int\n-  quizEntryId: Int!\n-  question: String!\n-  answer: Int\n-}\n-\n-\"\"\"\n-Represents an update to a `QuizEntryAnswer`. Fields that are set will be updated.\n-\"\"\"\n-input QuizEntryAnswerPatch {\n-  id: Int\n-  quizEntryId: Int\n-  question: String\n-  answer: Int\n-}\n-\n \"\"\"A connection to a list of `QuizEntryAnswer` values.\"\"\"\n type QuizEntryAnswersConnection {\n   \"\"\"A list of `QuizEntryAnswer` objects.\"\"\"\n@@ -2106,40 +1514,6 @@\n   quizId: Int\n }\n \n-\"\"\"An input for mutations affecting `QuizEntry`\"\"\"\n-input QuizEntryInput {\n-  id: Int\n-  userId: Int!\n-  quizId: Int!\n-}\n-\n-\"\"\"\n-Represents an update to a `QuizEntry`. Fields that are set will be updated.\n-\"\"\"\n-input QuizEntryPatch {\n-  id: Int\n-  userId: Int\n-  quizId: Int\n-}\n-\n-\"\"\"An input for mutations affecting `Quiz`\"\"\"\n-input QuizInput {\n-  id: Int\n-  name: String!\n-  updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n-}\n-\n-\"\"\"Represents an update to a `Quiz`. Fields that are set will be updated.\"\"\"\n-input QuizPatch {\n-  id: Int\n-  name: String\n-  updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n-}\n-\n \"\"\"A connection to a list of `Quiz` values.\"\"\"\n type QuizzesConnection {\n   \"\"\"A list of `Quiz` objects.\"\"\"\n@@ -2376,80 +1750,6 @@\n   PRIMARY_KEY_DESC\n }\n \n-\"\"\"All input for the `updateForumByNodeId` mutation.\"\"\"\n-input UpdateForumByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `Forum` to be updated.\n-  \"\"\"\n-  nodeId: ID!\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `Forum` being updated.\n-  \"\"\"\n-  patch: ForumPatch!\n-}\n-\n-\"\"\"All input for the `updateForumBySlug` mutation.\"\"\"\n-input UpdateForumBySlugInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `Forum` being updated.\n-  \"\"\"\n-  patch: ForumPatch!\n-\n-  \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n-  slug: String!\n-}\n-\n-\"\"\"All input for the `updateForum` mutation.\"\"\"\n-input UpdateForumInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `Forum` being updated.\n-  \"\"\"\n-  patch: ForumPatch!\n-  id: Int!\n-}\n-\n-\"\"\"The output of our update `Forum` mutation.\"\"\"\n-type UpdateForumPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Forum` that was updated by this mutation.\"\"\"\n-  forum: Forum\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Forum`. May be used by Relay 1.\"\"\"\n-  forumEdge(\n-    \"\"\"The method to use when ordering `Forum`.\"\"\"\n-    orderBy: [ForumsOrderBy!] = PRIMARY_KEY_ASC\n-  ): ForumsEdge\n-}\n-\n \"\"\"All input for the `updatePostByNodeId` mutation.\"\"\"\n input UpdatePostByNodeIdInput {\n   \"\"\"\n@@ -2513,186 +1813,6 @@\n   ): PostsEdge\n }\n \n-\"\"\"All input for the `updateQuizByNodeId` mutation.\"\"\"\n-input UpdateQuizByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `Quiz` to be updated.\n-  \"\"\"\n-  nodeId: ID!\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `Quiz` being updated.\n-  \"\"\"\n-  patch: QuizPatch!\n-}\n-\n-\"\"\"All input for the `updateQuizEntryAnswerByNodeId` mutation.\"\"\"\n-input UpdateQuizEntryAnswerByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `QuizEntryAnswer` to be updated.\n-  \"\"\"\n-  nodeId: ID!\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n-  \"\"\"\n-  patch: QuizEntryAnswerPatch!\n-}\n-\n-\"\"\"All input for the `updateQuizEntryAnswer` mutation.\"\"\"\n-input UpdateQuizEntryAnswerInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n-  \"\"\"\n-  patch: QuizEntryAnswerPatch!\n-  id: Int!\n-}\n-\n-\"\"\"The output of our update `QuizEntryAnswer` mutation.\"\"\"\n-type UpdateQuizEntryAnswerPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntryAnswer` that was updated by this mutation.\"\"\"\n-  quizEntryAnswer: QuizEntryAnswer\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\"\"\"\n-  quizEntry: QuizEntry\n-\n-  \"\"\"An edge for our `QuizEntryAnswer`. May be used by Relay 1.\"\"\"\n-  quizEntryAnswerEdge(\n-    \"\"\"The method to use when ordering `QuizEntryAnswer`.\"\"\"\n-    orderBy: [QuizEntryAnswersOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntryAnswersEdge\n-}\n-\n-\"\"\"All input for the `updateQuizEntryByNodeId` mutation.\"\"\"\n-input UpdateQuizEntryByNodeIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `QuizEntry` to be updated.\n-  \"\"\"\n-  nodeId: ID!\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `QuizEntry` being updated.\n-  \"\"\"\n-  patch: QuizEntryPatch!\n-}\n-\n-\"\"\"All input for the `updateQuizEntry` mutation.\"\"\"\n-input UpdateQuizEntryInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `QuizEntry` being updated.\n-  \"\"\"\n-  patch: QuizEntryPatch!\n-  id: Int!\n-}\n-\n-\"\"\"The output of our update `QuizEntry` mutation.\"\"\"\n-type UpdateQuizEntryPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntry` that was updated by this mutation.\"\"\"\n-  quizEntry: QuizEntry\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `User` that is related to this `QuizEntry`.\"\"\"\n-  user: User\n-\n-  \"\"\"Reads a single `Quiz` that is related to this `QuizEntry`.\"\"\"\n-  quiz: Quiz\n-\n-  \"\"\"An edge for our `QuizEntry`. May be used by Relay 1.\"\"\"\n-  quizEntryEdge(\n-    \"\"\"The method to use when ordering `QuizEntry`.\"\"\"\n-    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntriesEdge\n-}\n-\n-\"\"\"All input for the `updateQuiz` mutation.\"\"\"\n-input UpdateQuizInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `Quiz` being updated.\n-  \"\"\"\n-  patch: QuizPatch!\n-  id: Int!\n-}\n-\n-\"\"\"The output of our update `Quiz` mutation.\"\"\"\n-type UpdateQuizPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Quiz` that was updated by this mutation.\"\"\"\n-  quiz: Quiz\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Quiz`. May be used by Relay 1.\"\"\"\n-  quizEdge(\n-    \"\"\"The method to use when ordering `Quiz`.\"\"\"\n-    orderBy: [QuizzesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizzesEdge\n-}\n-\n \"\"\"All input for the `updateTopicByNodeId` mutation.\"\"\"\n input UpdateTopicByNodeIdInput {\n   \"\"\"\n","resultLanguage":"diff"}]}},{"node":{"category":"queries","id":"057de3cd-0bcb-52dd-880f-ca179c7d43c7","title":"Basic","examples":[{"title":"Forums","example":"{\n  forums {\n    nodes {\n      nodeId\n      id\n      slug\n      name\n      description\n    }\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"forums\": {\n    \"nodes\": [\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDFd\",\n        \"id\": 1,\n        \"slug\": \"testimonials\",\n        \"name\": \"Testimonials\",\n        \"description\": \"How do you rate PostGraphile?\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDJd\",\n        \"id\": 2,\n        \"slug\": \"feedback\",\n        \"name\": \"Feedback\",\n        \"description\": \"How are you finding PostGraphile?\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDNd\",\n        \"id\": 3,\n        \"slug\": \"cat-life\",\n        \"name\": \"Cat Life\",\n        \"description\": \"A forum all about cats and how fluffy they are and how they completely ignore their owners unless there is food. Or yarn.\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDRd\",\n        \"id\": 4,\n        \"slug\": \"cat-help\",\n        \"name\": \"Cat Help\",\n        \"description\": \"A forum to seek advice if your cat is becoming troublesome.\"\n      }\n    ]\n  }\n}\n","resultLanguage":"json"},{"title":"Forum by slug","example":"{\n  forumBySlug(slug: \"testimonials\") {\n    nodeId\n    id\n    slug\n    name\n    description\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"forumBySlug\": {\n    \"nodeId\": \"WyJmb3J1bXMiLDFd\",\n    \"id\": 1,\n    \"slug\": \"testimonials\",\n    \"name\": \"Testimonials\",\n    \"description\": \"How do you rate PostGraphile?\"\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"db54ecfc-9a64-59ba-83c5-5ebc75c79366","title":"Collections","examples":[{"title":"First offset","example":"{\n  forums(first: 1, offset: 1) {\n    nodes {\n      nodeId\n      id\n      name\n    }\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"forums\": {\n    \"nodes\": [\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDJd\",\n        \"id\": 2,\n        \"name\": \"Feedback\"\n      }\n    ]\n  }\n}\n","resultLanguage":"json"},{"title":"Relation condition","example":"{\n  forumBySlug(slug: \"testimonials\") {\n    nodeId\n    id\n    name\n    topics(\n      condition: { authorId: 2 }\n    ) {\n      nodes {\n        nodeId\n        id\n        title\n        body\n      }\n    }\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"forumBySlug\": {\n    \"nodeId\": \"WyJmb3J1bXMiLDFd\",\n    \"id\": 1,\n    \"name\": \"Testimonials\",\n    \"topics\": {\n      \"nodes\": [\n        {\n          \"nodeId\": \"WyJ0b3BpY3MiLDFd\",\n          \"id\": 1,\n          \"title\": \"Thank you!\",\n          \"body\": \"500-1500 requests per second on a single server is pretty awesome.\"\n        }\n      ]\n    }\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"c0ebe54e-48a6-5458-8700-62c60595037e","title":"Relations","examples":[{"title":"Forums topics posts","example":"{\n  forumBySlug(slug: \"cat-life\") {\n    name\n    topics(\n      first: 1\n      orderBy: [CREATED_AT_ASC]\n    ) {\n      nodes {\n        id\n        title\n        bodySummary\n        author {\n          id\n          username\n        }\n        posts(\n          first: 1\n          orderBy: [ID_DESC]\n        ) {\n          nodes {\n            id\n            author {\n              id\n              username\n            }\n            body\n          }\n        }\n      }\n    }\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"forumBySlug\": {\n    \"name\": \"Cat Life\",\n    \"topics\": {\n      \"nodes\": [\n        {\n          \"id\": 4,\n          \"title\": \"I love cats!\",\n          \"bodySummary\": \"They're the best!\",\n          \"author\": {\n            \"id\": 1,\n            \"username\": \"user\"\n          },\n          \"posts\": {\n            \"nodes\": [\n              {\n                \"id\": 6,\n                \"author\": {\n                  \"id\": 3,\n                  \"username\": \"Bradley_A\"\n                },\n                \"body\": \"I love it when they completely ignore you until they want something. So much better than dogs am I rite?\"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"834458b4-1b3a-55aa-b3b6-ad6374b85e00","title":"Mutations","examples":[{"title":"Create","example":"mutation {\n  createTopic(\n    input: {\n      topic: {\n        forumId: 2\n        title: \"My question relates to mutations...\"\n        body: \"How do you write them?\"\n      }\n    }\n  ) {\n    topic {\n      nodeId\n      id\n      forumId\n      title\n      body\n    }\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"createTopic\": {\n    \"topic\": {\n      \"nodeId\": \"WyJ0b3BpY3MiLDVd\",\n      \"id\": 5,\n      \"forumId\": 2,\n      \"title\": \"My question relates to mutations...\",\n      \"body\": \"How do you write them?\"\n    }\n  }\n}\n","resultLanguage":"json"},{"title":"Update","example":"mutation {\n  updateTopic(\n    input: {\n      id: 1\n      patch: {\n        title: \"My (edited) title\"\n      }\n    }\n  ) {\n    topic {\n      nodeId\n      id\n      title\n      body\n    }\n  }\n}\n\n# Works for a table like:\n#\n#   create table app_public.topics (\n#     id serial primary key,\n#     forum_id integer NOT NULL references app_public.forums on delete cascade,\n#     title text NOT NULL,\n#     body text DEFAULT ''::text NOT NULL\n#   );\n","exampleLanguage":"graphql","result":"{\n  \"updateTopic\": {\n    \"topic\": {\n      \"nodeId\": \"WyJ0b3BpY3MiLDFd\",\n      \"id\": 1,\n      \"title\": \"My (edited) title\",\n      \"body\": \"500-1500 requests per second on a single server is pretty awesome.\"\n    }\n  }\n}\n","resultLanguage":"json"},{"title":"Delete","example":"mutation {\n  deleteTopic(input: { id: 1 }) {\n    deletedTopicNodeId\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"deleteTopic\": {\n    \"deletedTopicNodeId\": \"WyJ0b3BpY3MiLDFd\"\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"e8e24065-2c08-5002-9a76-ecc5409bb46f","title":"Custom queries","examples":[{"title":"Single scalar","example":"{\n  randomNumber\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.random_number() returns int\n#  language sql stable\n#  as $$\n#    select 4; -- Chosen by fair dice roll. Guaranteed to be random. XKCD#221\n#  $$;\n#\n","exampleLanguage":"graphql","result":"{ \"randomNumber\": 4 }\n","resultLanguage":"json"},{"title":"Single row","example":"{\n  currentUser {\n    nodeId\n    id\n    username\n  }\n}\n\n# Added to the GraphQL schema via\n# this SQL:\n#\n#   create function current_user()\n#   returns app_public.users\n#   language sql stable\n#   as $$\n#     select users.*\n#     from app_public.users\n#     where id = current_user_id();\n#   $$;\n","exampleLanguage":"graphql","result":"{\n  \"currentUser\": {\n    \"nodeId\": \"WyJ1c2VycyIsMV0=\",\n    \"id\": 1,\n    \"username\": \"user\"\n  }\n}\n","resultLanguage":"json"},{"title":"Rows connection","example":"{\n  forumsAboutCats {\n    nodes {\n      nodeId\n      id\n      name\n      slug\n    }\n  }\n}\n\n# Created from SQL like:\n#\n#  create function app_public.forums_about_cats()\n#  returns setof app_public.forums\n#  language sql stable\n#  as $$\n#    select *\n#    from app_public.forums\n#    where slug like 'cat-%';\n#  $$;\n","exampleLanguage":"graphql","result":"{\n  \"forumsAboutCats\": {\n    \"nodes\": [\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDNd\",\n        \"id\": 3,\n        \"name\": \"Cat Life\",\n        \"slug\": \"cat-life\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDRd\",\n        \"id\": 4,\n        \"name\": \"Cat Help\",\n        \"slug\": \"cat-help\"\n      }\n    ]\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"ae7e54b0-0524-5453-becc-8aecdd71a0db","title":"Custom mutations","examples":[{"title":"Forgot password","example":"mutation {\n  forgotPassword(\n    input: {\n      email: \"benjie@example.com\"\n    }\n  ) {\n    success\n  }\n}\n\n# Generated with SQL like this:\n#\n#  create function forgot_password(email text)\n#  returns boolean\n#  language plpgsql volatile\n#  as $$\n#    ...\n#  $$;\n#\n#  -- Optionally rename the result field:\n#  comment on function\n#    forgot_password(email text)\n#    is '@resultFieldName success';\n","exampleLanguage":"graphql","result":"{\n  \"forgotPassword\": {\n    \"success\": true\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"38eb986c-3c4f-5471-9c30-63367620c6bf","title":"Computed columns","examples":[{"title":"Topic summary","example":"{\n  topic(id: 2) {\n    body\n    bodySummary\n  }\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.topics_body_summary(\n#    t app_public.topics,\n#    max_length int = 30\n#  )\n#  returns text\n#  language sql stable\n#  as $$\n#    select case\n#      when length(t.body) > max_length\n#      then left(t.body, max_length - 3)\n#             || '...'\n#      else t.body\n#      end;\n#  $$;\n","exampleLanguage":"graphql","result":"{\n  \"topic\": {\n    \"body\": \"PostGraphile is a powerful, idomatic, and elegant tool.\",\n    \"bodySummary\": \"PostGraphile is a powerful,...\"\n  }\n}\n","resultLanguage":"json"},{"title":"Topic summary with arg","example":"{\n  topic(id: 2) {\n    body\n    bodySummary(maxLength: 20)\n  }\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.topics_body_summary(\n#    t app_public.topics,\n#    max_length int = 30\n#  )\n#  returns text\n#  language sql stable\n#  as $$\n#    select case\n#      when length(t.body) > max_length\n#      then left(t.body, max_length - 3)\n#             || '...'\n#      else t.body\n#      end;\n#  $$;\n","exampleLanguage":"graphql","result":"{\n  \"topic\": {\n    \"body\": \"PostGraphile is a powerful, idomatic, and elegant tool.\",\n    \"bodySummary\": \"PostGraphile is a...\"\n  }\n}\n","resultLanguage":"json"}]}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/postgraphile/jwk-verification/","layout":"page"}}