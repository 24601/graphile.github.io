[
  {
    "category": "functions",
    "title": "Custom queries",
    "examples": [
      {
        "title": "Logged in user field",
        "example": "create function viewer()\nreturns users\nas $$\n  select *\n  from users\n  where id = current_user_id();\n  /*\n   * current_user_id() is a function\n   * that returns the logged in user's\n   * id, e.g. by extracting from the JWT\n   * or indicated via pgSettings.\n   */\n$$ language sql stable set search_path from current;\n",
        "exampleLanguage": "sql",
        "result": "--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1467,6 +1467,7 @@\n \n   # Chosen by fair dice roll. Guaranteed to be random. XKCD#221\n   randomNumber: Int\n+  viewer: User\n \n   # Reads a single `Forum` using its globally unique `ID`.\n   forum(\n",
        "resultLanguage": "diff"
      }
    ]
  },
  {
    "category": "functions",
    "title": "Computed columns",
    "examples": [
      {
        "title": "User primary email",
        "example": "/*\n * Returns the primary email of the\n * current user; for all other users\n * this function will return null.\n */\ncreate function \"users_primaryEmail\"(u users)\nreturns text\nas $$\n  select email\n  from user_emails\n  where user_id = current_user_id()\n  and user_id = u.id\n  and is_verified is true\n  order by id asc\n  limit 1;\n$$ language sql stable set search_path from current;\n",
        "exampleLanguage": "sql",
        "result": "--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -2586,6 +2586,7 @@\n     # A condition to be used in determining which values should be returned by the collection.\n     condition: QuizEntryCondition\n   ): QuizEntriesConnection!\n+  primaryEmail: String\n }\n \n # Contains information about the login providers this user has used, so that they may disconnect them should they wish.\n",
        "resultLanguage": "diff"
      }
    ]
  },
  {
    "category": "functions",
    "title": "Custom mutations",
    "examples": [
      {
        "title": "Insert multiple records",
        "example": "/**\n * Occasionally you'll want to create a bunch of rows in different tables in a\n * single mutation. Here's an example of how to do that.\n *\n * Pretend we're registering quiz entries, and we want to store each answer in\n * its own table as we want to be able to operate on the answers independently\n * later.\n *\n * This means we want:\n *\n *  1. A mutation that takes input data for inserting one quiz entry and\n *  multiple answers.\n *  2. A function that inserts a new quiz entry, inserts an answer for each\n *  answer provided in the input data, and connects each answer to the created\n *  quiz entry.\n *  3. Finally, we want the function to return the inserted quiz entry itself.\n */\n\n/**\n * This type is used for input in the mutation\n */\ncreate type quiz_entry_input as (\n  question text,\n  answer int\n);\n\n/**\n * Here's the function that gets turned into a \"custom mutation\"\n */\ncreate function add_quiz_entry(\n  quiz_id int,\n  answers quiz_entry_input[]\n)\nreturns quiz_entry\nas $$\n  declare\n    q quiz_entry;\n    a quiz_entry_answer;\n  begin\n    insert into quiz_entry(user_id, quiz_id)\n      values(current_user_id(), quiz_id)\n      returning * into q;\n\n    foreach a in array answers loop\n      insert into quiz_entry_answer(quiz_entry_id, question, answer)\n        values (quiz_id, a.question, a.answer);\n    end loop;\n\n    return q;\n  end;\n$$ language plpgsql volatile strict set search_path from current;\n",
        "exampleLanguage": "sql",
        "result": "--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1,3 +1,35 @@\n+# All input for the `addQuizEntry` mutation.\n+input AddQuizEntryInput {\n+  # An arbitrary string value with no semantic meaning. Will be included in the\n+  # payload verbatim. May be used to track mutations by the client.\n+  clientMutationId: String\n+  quizId: Int!\n+  answers: [QuizEntryInputRecordInput]!\n+}\n+\n+# The output of our `addQuizEntry` mutation.\n+type AddQuizEntryPayload {\n+  # The exact same `clientMutationId` that was provided in the mutation input,\n+  # unchanged and unused. May be used by a client to track mutations.\n+  clientMutationId: String\n+  quizEntry: QuizEntry\n+\n+  # Our root query field type. Allows us to run any query from our mutation payload.\n+  query: Query\n+\n+  # Reads a single `User` that is related to this `QuizEntry`.\n+  user: User\n+\n+  # Reads a single `Quiz` that is related to this `QuizEntry`.\n+  quiz: Quiz\n+\n+  # An edge for our `QuizEntry`. May be used by Relay 1.\n+  quizEntryEdge(\n+    # The method to use when ordering `QuizEntry`.\n+    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\n+  ): QuizEntriesEdge\n+}\n+\n # A floating point number that requires more precision than IEEE 754 binary 64\n scalar BigFloat\n \n@@ -1182,6 +1214,10 @@\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n     input: DeleteUserByUsernameInput!\n   ): DeleteUserPayload\n+  addQuizEntry(\n+    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    input: AddQuizEntryInput!\n+  ): AddQuizEntryPayload\n \n   # If you've forgotten your password, give us one of your email addresses and we'\n   # send you a reset token. Note this only works if you have added an email address!\n@@ -1755,6 +1791,12 @@\n   quizId: Int!\n }\n \n+# An input for mutations affecting `QuizEntryInputRecord`\n+input QuizEntryInputRecordInput {\n+  question: String\n+  answer: Int\n+}\n+\n # Represents an update to a `QuizEntry`. Fields that are set will be updated.\n input QuizEntryPatch {\n   id: Int\n",
        "resultLanguage": "diff"
      }
    ]
  },
  {
    "category": "plugins",
    "title": "Inflector",
    "examples": [
      {
        "title": "PgRenamePatchToPatchSetPlugin",
        "example": "/**\n * Simply renames the `UserPatch` and `PostPatch` type names to be called\n * `UserPatchSet` and `PostPatchSet` instead.\n *\n * Not particularly useful, just an example. ('PatchSet' chosen to minimise\n * diff to make example clearer.)\n *\n * Replaces this inflector:\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L309-L311\n */\nmodule.exports = function PgRenamePatchToPatchSetPlugin(\n  builder\n) {\n  builder.hook(\n    \"inflection\",\n    inflector => ({\n      // Retain the existing inflectors\n      ...inflector,\n\n      // Override the patchType inflector\n      patchType(typeName) {\n        // return this.upperCamelCase(`${typeName}-patch`);\n        return this.upperCamelCase(\n          `${typeName}-patch-set`\n        );\n      },\n    })\n  );\n};\n",
        "exampleLanguage": "javascript",
        "result": "--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -805,7 +805,7 @@\n }\n \n # Represents an update to a `Forum`. Fields that are set will be updated.\n-input ForumPatch {\n+input ForumPatchSet {\n   id: Int\n \n   # An URL-safe alias for the `Forum`.\n@@ -1269,7 +1269,7 @@\n }\n \n # Represents an update to a `Post`. Fields that are set will be updated.\n-input PostPatch {\n+input PostPatchSet {\n   # The body of the `Topic`, which Posts reply to.\n   body: String\n }\n@@ -1689,7 +1689,7 @@\n }\n \n # Represents an update to a `QuizEntryAnswer`. Fields that are set will be updated.\n-input QuizEntryAnswerPatch {\n+input QuizEntryAnswerPatchSet {\n   id: Int\n   quizEntryId: Int\n   question: String\n@@ -1756,7 +1756,7 @@\n }\n \n # Represents an update to a `QuizEntry`. Fields that are set will be updated.\n-input QuizEntryPatch {\n+input QuizEntryPatchSet {\n   id: Int\n   userId: Int\n   quizId: Int\n@@ -1772,7 +1772,7 @@\n }\n \n # Represents an update to a `Quiz`. Fields that are set will be updated.\n-input QuizPatch {\n+input QuizPatchSet {\n   id: Int\n   name: String\n   updatedAt: Datetime\n@@ -1937,7 +1937,7 @@\n }\n \n # Represents an update to a `Topic`. Fields that are set will be updated.\n-input TopicPatch {\n+input TopicPatchSet {\n   id: Int\n   forumId: Int\n   authorId: Int\n@@ -2003,7 +2003,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `Forum` being updated.\n-  forumPatch: ForumPatch!\n+  forumPatch: ForumPatchSet!\n   id: Int!\n }\n \n@@ -2014,7 +2014,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `Forum` being updated.\n-  forumPatch: ForumPatch!\n+  forumPatch: ForumPatchSet!\n \n   # An URL-safe alias for the `Forum`.\n   slug: String!\n@@ -2030,7 +2030,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `Forum` being updated.\n-  forumPatch: ForumPatch!\n+  forumPatch: ForumPatchSet!\n }\n \n # The output of our update `Forum` mutation.\n@@ -2059,7 +2059,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `Post` being updated.\n-  postPatch: PostPatch!\n+  postPatch: PostPatchSet!\n   id: Int!\n }\n \n@@ -2073,7 +2073,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `Post` being updated.\n-  postPatch: PostPatch!\n+  postPatch: PostPatchSet!\n }\n \n # The output of our update `Post` mutation.\n@@ -2108,7 +2108,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `Quiz` being updated.\n-  quizPatch: QuizPatch!\n+  quizPatch: QuizPatchSet!\n   id: Int!\n }\n \n@@ -2119,7 +2119,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n-  quizEntryAnswerPatch: QuizEntryAnswerPatch!\n+  quizEntryAnswerPatch: QuizEntryAnswerPatchSet!\n   id: Int!\n }\n \n@@ -2133,7 +2133,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n-  quizEntryAnswerPatch: QuizEntryAnswerPatch!\n+  quizEntryAnswerPatch: QuizEntryAnswerPatchSet!\n }\n \n # The output of our update `QuizEntryAnswer` mutation.\n@@ -2165,7 +2165,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `QuizEntry` being updated.\n-  quizEntryPatch: QuizEntryPatch!\n+  quizEntryPatch: QuizEntryPatchSet!\n   id: Int!\n }\n \n@@ -2179,7 +2179,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `QuizEntry` being updated.\n-  quizEntryPatch: QuizEntryPatch!\n+  quizEntryPatch: QuizEntryPatchSet!\n }\n \n # The output of our update `QuizEntry` mutation.\n@@ -2217,7 +2217,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `Quiz` being updated.\n-  quizPatch: QuizPatch!\n+  quizPatch: QuizPatchSet!\n }\n \n # The output of our update `Quiz` mutation.\n@@ -2246,7 +2246,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `Topic` being updated.\n-  topicPatch: TopicPatch!\n+  topicPatch: TopicPatchSet!\n   id: Int!\n }\n \n@@ -2260,7 +2260,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `Topic` being updated.\n-  topicPatch: TopicPatch!\n+  topicPatch: TopicPatchSet!\n }\n \n # The output of our update `Topic` mutation.\n@@ -2295,7 +2295,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `UserAuthentication` being updated.\n-  userAuthenticationPatch: UserAuthenticationPatch!\n+  userAuthenticationPatch: UserAuthenticationPatchSet!\n   id: Int!\n }\n \n@@ -2306,7 +2306,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `UserAuthentication` being updated.\n-  userAuthenticationPatch: UserAuthenticationPatch!\n+  userAuthenticationPatch: UserAuthenticationPatchSet!\n \n   # The login service used, e.g. `twitter` or `github`.\n   service: String!\n@@ -2325,7 +2325,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `UserAuthentication` being updated.\n-  userAuthenticationPatch: UserAuthenticationPatch!\n+  userAuthenticationPatch: UserAuthenticationPatchSet!\n }\n \n # The output of our update `UserAuthentication` mutation.\n@@ -2354,7 +2354,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `User` being updated.\n-  userPatch: UserPatch!\n+  userPatch: UserPatchSet!\n \n   # Unique identifier for the user.\n   id: Int!\n@@ -2367,7 +2367,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `User` being updated.\n-  userPatch: UserPatch!\n+  userPatch: UserPatchSet!\n \n   # Public-facing username (or 'handle') of the user.\n   username: String!\n@@ -2380,7 +2380,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `UserEmail` being updated.\n-  userEmailPatch: UserEmailPatch!\n+  userEmailPatch: UserEmailPatchSet!\n   id: Int!\n }\n \n@@ -2391,7 +2391,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `UserEmail` being updated.\n-  userEmailPatch: UserEmailPatch!\n+  userEmailPatch: UserEmailPatchSet!\n   userId: Int!\n \n   # The users email address, in `a@b.c` format.\n@@ -2408,7 +2408,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `UserEmail` being updated.\n-  userEmailPatch: UserEmailPatch!\n+  userEmailPatch: UserEmailPatchSet!\n }\n \n # The output of our update `UserEmail` mutation.\n@@ -2443,7 +2443,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `User` being updated.\n-  userPatch: UserPatch!\n+  userPatch: UserPatchSet!\n }\n \n # The output of our update `User` mutation.\n@@ -2617,7 +2617,7 @@\n }\n \n # Represents an update to a `UserAuthentication`. Fields that are set will be updated.\n-input UserAuthenticationPatch {\n+input UserAuthenticationPatchSet {\n   id: Int\n \n   # The login service used, e.g. `twitter` or `github`.\n@@ -2713,7 +2713,7 @@\n }\n \n # Represents an update to a `UserEmail`. Fields that are set will be updated.\n-input UserEmailPatch {\n+input UserEmailPatchSet {\n   id: Int\n   userId: Int\n \n@@ -2791,7 +2791,7 @@\n }\n \n # Represents an update to a `User`. Fields that are set will be updated.\n-input UserPatch {\n+input UserPatchSet {\n   # Unique identifier for the user.\n   id: Int\n \n",
        "resultLanguage": "diff"
      },
      {
        "title": "PgShortenAllRowsInflectorPlugin",
        "example": "/**\n * Simply renames the `allUsers` and `allPosts` Query fields to `users` and\n * `posts` respectively.\n *\n * Not particularly useful, just an example.\n *\n * Replaces this inflector:\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L460-L464\n */\nmodule.exports = function PgShortenAllRowsInflectorPlugin(\n  builder\n) {\n  builder.hook(\n    \"inflection\",\n    inflector => ({\n      // Retain the existing inflectors\n      ...inflector,\n\n      // Override the allRows inflector\n      allRows(table) {\n        return this.camelCase(\n          // Was: `all-${this.pluralize(this._singularizedTableName(table))}`\n          // Now:\n          this.pluralize(\n            this._singularizedTableName(\n              table\n            )\n          )\n        );\n      },\n    })\n  );\n};\n",
        "exampleLanguage": "javascript",
        "result": "--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1333,7 +1333,7 @@\n   ): Node\n \n   # Reads and enables pagination through a set of `Forum`.\n-  allForums(\n+  forums(\n     # Only read the first `n` values of the set.\n     first: Int\n \n@@ -1358,7 +1358,7 @@\n   ): ForumsConnection\n \n   # Reads and enables pagination through a set of `Quiz`.\n-  allQuizzes(\n+  quizzes(\n     # Only read the first `n` values of the set.\n     first: Int\n \n@@ -1383,7 +1383,7 @@\n   ): QuizzesConnection\n \n   # Reads and enables pagination through a set of `QuizEntry`.\n-  allQuizEntries(\n+  quizEntries(\n     # Only read the first `n` values of the set.\n     first: Int\n \n@@ -1408,7 +1408,7 @@\n   ): QuizEntriesConnection\n \n   # Reads and enables pagination through a set of `QuizEntryAnswer`.\n-  allQuizEntryAnswers(\n+  quizEntryAnswers(\n     # Only read the first `n` values of the set.\n     first: Int\n \n",
        "resultLanguage": "diff"
      }
    ]
  },
  {
    "category": "plugins",
    "title": "Types",
    "examples": [
      {
        "title": "PgNumericToFloatPlugin",
        "example": "/**\n * Use of this plugin is NOT recommended, please see\n * PgSmallNumericToFloatPlugin for a more appropriate replacement if you need\n * one.\n *\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\n * for *all* DECIMAL / NUMERIC values, for making PostGraphile v4 slightly more\n * backwards-compatible with v3.\n *\n * It's generally a bad idea to use floating point numbers to represent\n * arbitrary precision numbers such as NUMERIC because loss of precision can\n * occur.\n */\nmodule.exports = function PgNumericToFloatPlugin(\n  builder\n) {\n  builder.hook(\"build\", build => {\n    // Register a type handler for NUMERIC / DECIMAL (oid = 1700), always\n    // returning the GraphQLFloat type\n    build.pgRegisterGqlTypeByTypeId(\n      \"1700\",\n      () => build.graphql.GraphQLFloat\n    );\n    return build;\n  });\n};\n",
        "exampleLanguage": "javascript",
        "result": "--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1,6 +1,3 @@\n-# A floating point number that requires more precision than IEEE 754 binary 64\n-scalar BigFloat\n-\n # All input for the create `Forum` mutation.\n input CreateForumInput {\n   # An arbitrary string value with no semantic meaning. Will be included in the\n@@ -1529,8 +1526,8 @@\n   id: Int!\n   name: String!\n   updatedAt: Datetime!\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n+  precision12Scale2: Float\n+  precision200Scale100: Float\n \n   # Reads and enables pagination through a set of `QuizEntry`.\n   quizEntries(\n@@ -1570,10 +1567,10 @@\n   updatedAt: Datetime\n \n   # Checks for equality with the object’s `precision12Scale2` field.\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n \n   # Checks for equality with the object’s `precision200Scale100` field.\n-  precision200Scale100: BigFloat\n+  precision200Scale100: Float\n }\n \n # A connection to a list of `QuizEntry` values.\n@@ -1767,8 +1764,8 @@\n   id: Int\n   name: String!\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n+  precision12Scale2: Float\n+  precision200Scale100: Float\n }\n \n # Represents an update to a `Quiz`. Fields that are set will be updated.\n@@ -1776,8 +1773,8 @@\n   id: Int\n   name: String\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n+  precision12Scale2: Float\n+  precision200Scale100: Float\n }\n \n # A connection to a list of `Quiz` values.\n",
        "resultLanguage": "diff"
      },
      {
        "title": "PgSmallNumericToFloatPlugin",
        "example": "/**\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\n * for DECIMAL / NUMERIC values that have a precision and scale under the given\n * limits (currently 12 and 2 respectively).\n *\n * It's generally a bad idea to use floating point numbers to represent\n * arbitrary precision numbers such as NUMERIC because loss of precision can\n * occur; however some systems are okay with this compromise.\n */\nmodule.exports = function PgSmallNumericToFloatPlugin(\n  builder,\n  {\n    pgNumericToFloatPrecisionCap = 12,\n    pgNumericToFloatScaleCap = 2,\n  }\n) {\n  builder.hook(\"build\", build => {\n    // Register a type handler for NUMERIC / DECIMAL (oid = 1700)\n    build.pgRegisterGqlTypeByTypeId(\n      \"1700\",\n      (_set, modifier) => {\n        if (\n          modifier &&\n          typeof modifier ===\n            \"number\" &&\n          modifier > 0\n        ) {\n          // Ref: https://stackoverflow.com/a/3351120/141284\n          const precision =\n            ((modifier - 4) >> 16) &\n            65535;\n          const scale =\n            (modifier - 4) & 65535;\n          if (\n            precision <=\n              pgNumericToFloatPrecisionCap &&\n            scale <=\n              pgNumericToFloatScaleCap\n          ) {\n            // This number is no more precise than our cap, so we're declaring\n            // that we can handle it as a float:\n            return build.graphql\n              .GraphQLFloat;\n          }\n        }\n        // If all else fails, let PostGraphile do it's default handling - i.e.\n        // BigFloat\n        return null;\n      }\n    );\n\n    // We didn't modify _init, but we still must return it.\n    return build;\n  });\n};\n",
        "exampleLanguage": "javascript",
        "result": "--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1529,7 +1529,7 @@\n   id: Int!\n   name: String!\n   updatedAt: Datetime!\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n   precision200Scale100: BigFloat\n \n   # Reads and enables pagination through a set of `QuizEntry`.\n@@ -1570,7 +1570,7 @@\n   updatedAt: Datetime\n \n   # Checks for equality with the object’s `precision12Scale2` field.\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n \n   # Checks for equality with the object’s `precision200Scale100` field.\n   precision200Scale100: BigFloat\n@@ -1767,7 +1767,7 @@\n   id: Int\n   name: String!\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n   precision200Scale100: BigFloat\n }\n \n@@ -1776,7 +1776,7 @@\n   id: Int\n   name: String\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n   precision200Scale100: BigFloat\n }\n \n",
        "resultLanguage": "diff"
      },
      {
        "title": "SetInputObjectDefaultValue",
        "example": "/**\n * This plugin sets a defaultValue on all input object fields that match the\n * given criteria (specifically the 'create' input types, for columns named\n * 'name')\n */\nmodule.exports = function SetInputObjectDefaultValue(\n  builder\n) {\n  builder.hook(\n    \"GraphQLInputObjectType:fields:field\",\n    (field, build, context) => {\n      const {\n        scope: {\n          isPgRowType,\n          isInputType,\n          isPgPatch,\n          pgFieldIntrospection: attr,\n        },\n      } = context;\n      if (\n        !isPgRowType ||\n        !isInputType ||\n        isPgPatch ||\n        !attr ||\n        attr.kind !== \"attribute\" ||\n        attr.name !== \"name\"\n      ) {\n        return field;\n      }\n\n      return {\n        ...field,\n        type: build.graphql.getNamedType(\n          field.type\n        ), // Since it has a default, it can be nullable\n        defaultValue:\n          // attr.tags.defaultValue: enables overriding this with a\n          // `@defaultValue Alice Smith` smart comment\n          attr.tags.defaultValue ||\n          \"Bobby Tables\",\n      };\n    }\n  );\n};\n",
        "exampleLanguage": "javascript",
        "result": "--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -796,7 +796,7 @@\n   slug: String!\n \n   # The name of the `Forum` (indicates its subject matter).\n-  name: String!\n+  name: String = \"Bobby Tables\"\n \n   # A brief description of the `Forum` including it's purpose.\n   description: String\n@@ -1765,7 +1765,7 @@\n # An input for mutations affecting `Quiz`\n input QuizInput {\n   id: Int\n-  name: String!\n+  name: String = \"Bobby Tables\"\n   updatedAt: Datetime\n   precision12Scale2: BigFloat\n   precision200Scale100: BigFloat\n@@ -2779,7 +2779,7 @@\n   username: String!\n \n   # Public-facing name (or pseudonym) of the user.\n-  name: String\n+  name: String = \"Bobby Tables\"\n \n   # Optional avatar URL.\n   avatarUrl: String\n",
        "resultLanguage": "diff"
      }
    ]
  },
  {
    "category": "plugins",
    "title": "Mutation wrappers",
    "examples": [
      {
        "title": "OverrideArgValuePlugin",
        "example": "/**\n * This plugin sets the `input.quizPatch.updatedAt` to the current timestamp in\n * the `updateQuiz*` mutations IFF it's not already set.\n */\nmodule.exports = function SetInputObjectDefaultValue(\n  builder\n) {\n  builder.hook(\n    \"GraphQLObjectType:fields:field\",\n    (field, build, context) => {\n      const {\n        scope: {\n          isPgUpdateMutationField,\n          pgFieldIntrospection: table,\n        },\n      } = context;\n      if (\n        !isPgUpdateMutationField ||\n        table.kind !== \"class\" ||\n        table.name !== \"quiz\"\n      ) {\n        return field;\n      }\n\n      const oldResolve =\n        field.resolve;\n\n      return {\n        ...field,\n        resolve(\n          _mutation,\n          args,\n          context,\n          info\n        ) {\n          // Override the `updatedAt` field if it's not already set.\n          if (\n            args.input.quizPatch\n              .updatedAt == null\n          ) {\n            args.input.quizPatch.updatedAt = new Date().toISOString();\n          }\n          return oldResolve(\n            _mutation,\n            args,\n            context,\n            info\n          );\n        },\n      };\n    }\n  );\n};\n\n// Tested via:\n// npx postgraphile --append-plugins @graphile-contrib/pg-simplify-inflector,`pwd`/examples/plugins/0300_mutation_wrappers/OverrideArgValuePlugin.js -c graphile_org_demo -s app_public\n",
        "exampleLanguage": "javascript",
        "result": "",
        "resultLanguage": "diff"
      }
    ]
  },
  {
    "category": "plugins",
    "title": "Customisation",
    "examples": [
      {
        "title": "OmitMutationsByDefaultPlugin",
        "example": "/**\n * This plugin treats any table that doesn't have an `@omit` comment as if it\n * had `@omit create,update,delete` (thereby disabling mutations).\n *\n * Override it by adding a smart comment to the table. To restore all\n * mutations, do `COMMENT ON my_table IS E'@omit :';` (the `:` is special\n * syntax for \"nothing\").\n */\nmodule.exports = function OmitMutationsByDefaultPlugin(\n  builder\n) {\n  builder.hook(\"build\", build => {\n    const {\n      pgIntrospectionResultsByKind,\n    } = build;\n    pgIntrospectionResultsByKind.class\n      .filter(\n        table =>\n          table.isSelectable &&\n          table.namespace\n      )\n      .forEach(table => {\n        if (!(\"omit\" in table.tags)) {\n          table.tags.omit =\n            \"create,update,delete\";\n        }\n      });\n    return build;\n  });\n};\n\n// Tested via:\n// npx postgraphile --append-plugins @graphile-contrib/pg-simplify-inflector,`pwd`/examples/plugins/0400_customisation/OmitMutationsByDefaultPlugin.js -c graphile_org_demo -s app_public\n",
        "exampleLanguage": "javascript",
        "result": "--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1,35 +1,6 @@\n # A floating point number that requires more precision than IEEE 754 binary 64\n scalar BigFloat\n \n-# All input for the create `Forum` mutation.\n-input CreateForumInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The `Forum` to be created by this mutation.\n-  forum: ForumInput!\n-}\n-\n-# The output of our create `Forum` mutation.\n-type CreateForumPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `Forum` that was created by this mutation.\n-  forum: Forum\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # An edge for our `Forum`. May be used by Relay 1.\n-  forumEdge(\n-    # The method to use when ordering `Forum`.\n-    orderBy: [ForumsOrderBy!] = PRIMARY_KEY_ASC\n-  ): ForumsEdge\n-}\n-\n # All input for the create `Post` mutation.\n input CreatePostInput {\n   # An arbitrary string value with no semantic meaning. Will be included in the\n@@ -65,102 +36,6 @@\n   ): PostsEdge\n }\n \n-# All input for the create `QuizEntryAnswer` mutation.\n-input CreateQuizEntryAnswerInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The `QuizEntryAnswer` to be created by this mutation.\n-  quizEntryAnswer: QuizEntryAnswerInput!\n-}\n-\n-# The output of our create `QuizEntryAnswer` mutation.\n-type CreateQuizEntryAnswerPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `QuizEntryAnswer` that was created by this mutation.\n-  quizEntryAnswer: QuizEntryAnswer\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\n-  quizEntry: QuizEntry\n-\n-  # An edge for our `QuizEntryAnswer`. May be used by Relay 1.\n-  quizEntryAnswerEdge(\n-    # The method to use when ordering `QuizEntryAnswer`.\n-    orderBy: [QuizEntryAnswersOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntryAnswersEdge\n-}\n-\n-# All input for the create `QuizEntry` mutation.\n-input CreateQuizEntryInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The `QuizEntry` to be created by this mutation.\n-  quizEntry: QuizEntryInput!\n-}\n-\n-# The output of our create `QuizEntry` mutation.\n-type CreateQuizEntryPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `QuizEntry` that was created by this mutation.\n-  quizEntry: QuizEntry\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # Reads a single `User` that is related to this `QuizEntry`.\n-  user: User\n-\n-  # Reads a single `Quiz` that is related to this `QuizEntry`.\n-  quiz: Quiz\n-\n-  # An edge for our `QuizEntry`. May be used by Relay 1.\n-  quizEntryEdge(\n-    # The method to use when ordering `QuizEntry`.\n-    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntriesEdge\n-}\n-\n-# All input for the create `Quiz` mutation.\n-input CreateQuizInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The `Quiz` to be created by this mutation.\n-  quiz: QuizInput!\n-}\n-\n-# The output of our create `Quiz` mutation.\n-type CreateQuizPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `Quiz` that was created by this mutation.\n-  quiz: Quiz\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # An edge for our `Quiz`. May be used by Relay 1.\n-  quizEdge(\n-    # The method to use when ordering `Quiz`.\n-    orderBy: [QuizzesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizzesEdge\n-}\n-\n # All input for the create `Topic` mutation.\n input CreateTopicInput {\n   # An arbitrary string value with no semantic meaning. Will be included in the\n@@ -293,54 +168,6 @@\n # 8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.\n scalar Datetime\n \n-# All input for the `deleteForumById` mutation.\n-input DeleteForumByIdInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-# All input for the `deleteForumBySlug` mutation.\n-input DeleteForumBySlugInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # An URL-safe alias for the `Forum`.\n-  slug: String!\n-}\n-\n-# All input for the `deleteForum` mutation.\n-input DeleteForumInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The globally unique `ID` which will identify a single `Forum` to be deleted.\n-  nodeId: ID!\n-}\n-\n-# The output of our delete `Forum` mutation.\n-type DeleteForumPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `Forum` that was deleted by this mutation.\n-  forum: Forum\n-  deletedForumId: ID\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # An edge for our `Forum`. May be used by Relay 1.\n-  forumEdge(\n-    # The method to use when ordering `Forum`.\n-    orderBy: [ForumsOrderBy!] = PRIMARY_KEY_ASC\n-  ): ForumsEdge\n-}\n-\n # All input for the `deletePostById` mutation.\n input DeletePostByIdInput {\n   # An arbitrary string value with no semantic meaning. Will be included in the\n@@ -385,129 +212,6 @@\n   ): PostsEdge\n }\n \n-# All input for the `deleteQuizById` mutation.\n-input DeleteQuizByIdInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-# All input for the `deleteQuizEntryAnswerById` mutation.\n-input DeleteQuizEntryAnswerByIdInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-# All input for the `deleteQuizEntryAnswer` mutation.\n-input DeleteQuizEntryAnswerInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The globally unique `ID` which will identify a single `QuizEntryAnswer` to be deleted.\n-  nodeId: ID!\n-}\n-\n-# The output of our delete `QuizEntryAnswer` mutation.\n-type DeleteQuizEntryAnswerPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `QuizEntryAnswer` that was deleted by this mutation.\n-  quizEntryAnswer: QuizEntryAnswer\n-  deletedQuizEntryAnswerId: ID\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\n-  quizEntry: QuizEntry\n-\n-  # An edge for our `QuizEntryAnswer`. May be used by Relay 1.\n-  quizEntryAnswerEdge(\n-    # The method to use when ordering `QuizEntryAnswer`.\n-    orderBy: [QuizEntryAnswersOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntryAnswersEdge\n-}\n-\n-# All input for the `deleteQuizEntryById` mutation.\n-input DeleteQuizEntryByIdInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-# All input for the `deleteQuizEntry` mutation.\n-input DeleteQuizEntryInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The globally unique `ID` which will identify a single `QuizEntry` to be deleted.\n-  nodeId: ID!\n-}\n-\n-# The output of our delete `QuizEntry` mutation.\n-type DeleteQuizEntryPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `QuizEntry` that was deleted by this mutation.\n-  quizEntry: QuizEntry\n-  deletedQuizEntryId: ID\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # Reads a single `User` that is related to this `QuizEntry`.\n-  user: User\n-\n-  # Reads a single `Quiz` that is related to this `QuizEntry`.\n-  quiz: Quiz\n-\n-  # An edge for our `QuizEntry`. May be used by Relay 1.\n-  quizEntryEdge(\n-    # The method to use when ordering `QuizEntry`.\n-    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntriesEdge\n-}\n-\n-# All input for the `deleteQuiz` mutation.\n-input DeleteQuizInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The globally unique `ID` which will identify a single `Quiz` to be deleted.\n-  nodeId: ID!\n-}\n-\n-# The output of our delete `Quiz` mutation.\n-type DeleteQuizPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `Quiz` that was deleted by this mutation.\n-  quiz: Quiz\n-  deletedQuizId: ID\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # An edge for our `Quiz`. May be used by Relay 1.\n-  quizEdge(\n-    # The method to use when ordering `Quiz`.\n-    orderBy: [QuizzesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizzesEdge\n-}\n-\n # All input for the `deleteTopicById` mutation.\n input DeleteTopicByIdInput {\n   # An arbitrary string value with no semantic meaning. Will be included in the\n@@ -788,38 +492,6 @@\n   updatedAt: Datetime\n }\n \n-# An input for mutations affecting `Forum`\n-input ForumInput {\n-  id: Int\n-\n-  # An URL-safe alias for the `Forum`.\n-  slug: String!\n-\n-  # The name of the `Forum` (indicates its subject matter).\n-  name: String!\n-\n-  # A brief description of the `Forum` including it's purpose.\n-  description: String\n-  createdAt: Datetime\n-  updatedAt: Datetime\n-}\n-\n-# Represents an update to a `Forum`. Fields that are set will be updated.\n-input ForumPatch {\n-  id: Int\n-\n-  # An URL-safe alias for the `Forum`.\n-  slug: String\n-\n-  # The name of the `Forum` (indicates its subject matter).\n-  name: String\n-\n-  # A brief description of the `Forum` including it's purpose.\n-  description: String\n-  createdAt: Datetime\n-  updatedAt: Datetime\n-}\n-\n # A connection to a list of `Forum` values.\n type ForumsConnection {\n   # A list of `Forum` objects.\n@@ -865,36 +537,12 @@\n \n # The root mutation type which contains root level fields which mutate data.\n type Mutation {\n-  # Creates a single `Forum`.\n-  createForum(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: CreateForumInput!\n-  ): CreateForumPayload\n-\n   # Creates a single `Post`.\n   createPost(\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n     input: CreatePostInput!\n   ): CreatePostPayload\n \n-  # Creates a single `Quiz`.\n-  createQuiz(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: CreateQuizInput!\n-  ): CreateQuizPayload\n-\n-  # Creates a single `QuizEntry`.\n-  createQuizEntry(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: CreateQuizEntryInput!\n-  ): CreateQuizEntryPayload\n-\n-  # Creates a single `QuizEntryAnswer`.\n-  createQuizEntryAnswer(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: CreateQuizEntryAnswerInput!\n-  ): CreateQuizEntryAnswerPayload\n-\n   # Creates a single `Topic`.\n   createTopic(\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n@@ -919,24 +567,6 @@\n     input: CreateUserInput!\n   ): CreateUserPayload\n \n-  # Updates a single `Forum` using its globally unique id and a patch.\n-  updateForum(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: UpdateForumInput!\n-  ): UpdateForumPayload\n-\n-  # Updates a single `Forum` using a unique key and a patch.\n-  updateForumById(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: UpdateForumByIdInput!\n-  ): UpdateForumPayload\n-\n-  # Updates a single `Forum` using a unique key and a patch.\n-  updateForumBySlug(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: UpdateForumBySlugInput!\n-  ): UpdateForumPayload\n-\n   # Updates a single `Post` using its globally unique id and a patch.\n   updatePost(\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n@@ -949,42 +579,6 @@\n     input: UpdatePostByIdInput!\n   ): UpdatePostPayload\n \n-  # Updates a single `Quiz` using its globally unique id and a patch.\n-  updateQuiz(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: UpdateQuizInput!\n-  ): UpdateQuizPayload\n-\n-  # Updates a single `Quiz` using a unique key and a patch.\n-  updateQuizById(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: UpdateQuizByIdInput!\n-  ): UpdateQuizPayload\n-\n-  # Updates a single `QuizEntry` using its globally unique id and a patch.\n-  updateQuizEntry(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: UpdateQuizEntryInput!\n-  ): UpdateQuizEntryPayload\n-\n-  # Updates a single `QuizEntry` using a unique key and a patch.\n-  updateQuizEntryById(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: UpdateQuizEntryByIdInput!\n-  ): UpdateQuizEntryPayload\n-\n-  # Updates a single `QuizEntryAnswer` using its globally unique id and a patch.\n-  updateQuizEntryAnswer(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: UpdateQuizEntryAnswerInput!\n-  ): UpdateQuizEntryAnswerPayload\n-\n-  # Updates a single `QuizEntryAnswer` using a unique key and a patch.\n-  updateQuizEntryAnswerById(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: UpdateQuizEntryAnswerByIdInput!\n-  ): UpdateQuizEntryAnswerPayload\n-\n   # Updates a single `Topic` using its globally unique id and a patch.\n   updateTopic(\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n@@ -1051,24 +645,6 @@\n     input: UpdateUserByUsernameInput!\n   ): UpdateUserPayload\n \n-  # Deletes a single `Forum` using its globally unique id.\n-  deleteForum(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: DeleteForumInput!\n-  ): DeleteForumPayload\n-\n-  # Deletes a single `Forum` using a unique key.\n-  deleteForumById(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: DeleteForumByIdInput!\n-  ): DeleteForumPayload\n-\n-  # Deletes a single `Forum` using a unique key.\n-  deleteForumBySlug(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: DeleteForumBySlugInput!\n-  ): DeleteForumPayload\n-\n   # Deletes a single `Post` using its globally unique id.\n   deletePost(\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n@@ -1081,42 +657,6 @@\n     input: DeletePostByIdInput!\n   ): DeletePostPayload\n \n-  # Deletes a single `Quiz` using its globally unique id.\n-  deleteQuiz(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: DeleteQuizInput!\n-  ): DeleteQuizPayload\n-\n-  # Deletes a single `Quiz` using a unique key.\n-  deleteQuizById(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: DeleteQuizByIdInput!\n-  ): DeleteQuizPayload\n-\n-  # Deletes a single `QuizEntry` using its globally unique id.\n-  deleteQuizEntry(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: DeleteQuizEntryInput!\n-  ): DeleteQuizEntryPayload\n-\n-  # Deletes a single `QuizEntry` using a unique key.\n-  deleteQuizEntryById(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: DeleteQuizEntryByIdInput!\n-  ): DeleteQuizEntryPayload\n-\n-  # Deletes a single `QuizEntryAnswer` using its globally unique id.\n-  deleteQuizEntryAnswer(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: DeleteQuizEntryAnswerInput!\n-  ): DeleteQuizEntryAnswerPayload\n-\n-  # Deletes a single `QuizEntryAnswer` using a unique key.\n-  deleteQuizEntryAnswerById(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    input: DeleteQuizEntryAnswerByIdInput!\n-  ): DeleteQuizEntryAnswerPayload\n-\n   # Deletes a single `Topic` using its globally unique id.\n   deleteTopic(\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n@@ -1680,22 +1220,6 @@\n   answer: Int\n }\n \n-# An input for mutations affecting `QuizEntryAnswer`\n-input QuizEntryAnswerInput {\n-  id: Int\n-  quizEntryId: Int!\n-  question: String!\n-  answer: Int\n-}\n-\n-# Represents an update to a `QuizEntryAnswer`. Fields that are set will be updated.\n-input QuizEntryAnswerPatch {\n-  id: Int\n-  quizEntryId: Int\n-  question: String\n-  answer: Int\n-}\n-\n # A connection to a list of `QuizEntryAnswer` values.\n type QuizEntryAnswersConnection {\n   # A list of `QuizEntryAnswer` objects.\n@@ -1748,38 +1272,6 @@\n   quizId: Int\n }\n \n-# An input for mutations affecting `QuizEntry`\n-input QuizEntryInput {\n-  id: Int\n-  userId: Int!\n-  quizId: Int!\n-}\n-\n-# Represents an update to a `QuizEntry`. Fields that are set will be updated.\n-input QuizEntryPatch {\n-  id: Int\n-  userId: Int\n-  quizId: Int\n-}\n-\n-# An input for mutations affecting `Quiz`\n-input QuizInput {\n-  id: Int\n-  name: String!\n-  updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n-}\n-\n-# Represents an update to a `Quiz`. Fields that are set will be updated.\n-input QuizPatch {\n-  id: Int\n-  name: String\n-  updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n-}\n-\n # A connection to a list of `Quiz` values.\n type QuizzesConnection {\n   # A list of `Quiz` objects.\n@@ -1996,62 +1488,6 @@\n   PRIMARY_KEY_DESC\n }\n \n-# All input for the `updateForumById` mutation.\n-input UpdateForumByIdInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # An object where the defined keys will be set on the `Forum` being updated.\n-  forumPatch: ForumPatch!\n-  id: Int!\n-}\n-\n-# All input for the `updateForumBySlug` mutation.\n-input UpdateForumBySlugInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # An object where the defined keys will be set on the `Forum` being updated.\n-  forumPatch: ForumPatch!\n-\n-  # An URL-safe alias for the `Forum`.\n-  slug: String!\n-}\n-\n-# All input for the `updateForum` mutation.\n-input UpdateForumInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The globally unique `ID` which will identify a single `Forum` to be updated.\n-  nodeId: ID!\n-\n-  # An object where the defined keys will be set on the `Forum` being updated.\n-  forumPatch: ForumPatch!\n-}\n-\n-# The output of our update `Forum` mutation.\n-type UpdateForumPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `Forum` that was updated by this mutation.\n-  forum: Forum\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # An edge for our `Forum`. May be used by Relay 1.\n-  forumEdge(\n-    # The method to use when ordering `Forum`.\n-    orderBy: [ForumsOrderBy!] = PRIMARY_KEY_ASC\n-  ): ForumsEdge\n-}\n-\n # All input for the `updatePostById` mutation.\n input UpdatePostByIdInput {\n   # An arbitrary string value with no semantic meaning. Will be included in the\n@@ -2101,144 +1537,6 @@\n   ): PostsEdge\n }\n \n-# All input for the `updateQuizById` mutation.\n-input UpdateQuizByIdInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # An object where the defined keys will be set on the `Quiz` being updated.\n-  quizPatch: QuizPatch!\n-  id: Int!\n-}\n-\n-# All input for the `updateQuizEntryAnswerById` mutation.\n-input UpdateQuizEntryAnswerByIdInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n-  quizEntryAnswerPatch: QuizEntryAnswerPatch!\n-  id: Int!\n-}\n-\n-# All input for the `updateQuizEntryAnswer` mutation.\n-input UpdateQuizEntryAnswerInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The globally unique `ID` which will identify a single `QuizEntryAnswer` to be updated.\n-  nodeId: ID!\n-\n-  # An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n-  quizEntryAnswerPatch: QuizEntryAnswerPatch!\n-}\n-\n-# The output of our update `QuizEntryAnswer` mutation.\n-type UpdateQuizEntryAnswerPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `QuizEntryAnswer` that was updated by this mutation.\n-  quizEntryAnswer: QuizEntryAnswer\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\n-  quizEntry: QuizEntry\n-\n-  # An edge for our `QuizEntryAnswer`. May be used by Relay 1.\n-  quizEntryAnswerEdge(\n-    # The method to use when ordering `QuizEntryAnswer`.\n-    orderBy: [QuizEntryAnswersOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntryAnswersEdge\n-}\n-\n-# All input for the `updateQuizEntryById` mutation.\n-input UpdateQuizEntryByIdInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # An object where the defined keys will be set on the `QuizEntry` being updated.\n-  quizEntryPatch: QuizEntryPatch!\n-  id: Int!\n-}\n-\n-# All input for the `updateQuizEntry` mutation.\n-input UpdateQuizEntryInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The globally unique `ID` which will identify a single `QuizEntry` to be updated.\n-  nodeId: ID!\n-\n-  # An object where the defined keys will be set on the `QuizEntry` being updated.\n-  quizEntryPatch: QuizEntryPatch!\n-}\n-\n-# The output of our update `QuizEntry` mutation.\n-type UpdateQuizEntryPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `QuizEntry` that was updated by this mutation.\n-  quizEntry: QuizEntry\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # Reads a single `User` that is related to this `QuizEntry`.\n-  user: User\n-\n-  # Reads a single `Quiz` that is related to this `QuizEntry`.\n-  quiz: Quiz\n-\n-  # An edge for our `QuizEntry`. May be used by Relay 1.\n-  quizEntryEdge(\n-    # The method to use when ordering `QuizEntry`.\n-    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntriesEdge\n-}\n-\n-# All input for the `updateQuiz` mutation.\n-input UpdateQuizInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The globally unique `ID` which will identify a single `Quiz` to be updated.\n-  nodeId: ID!\n-\n-  # An object where the defined keys will be set on the `Quiz` being updated.\n-  quizPatch: QuizPatch!\n-}\n-\n-# The output of our update `Quiz` mutation.\n-type UpdateQuizPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `Quiz` that was updated by this mutation.\n-  quiz: Quiz\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # An edge for our `Quiz`. May be used by Relay 1.\n-  quizEdge(\n-    # The method to use when ordering `Quiz`.\n-    orderBy: [QuizzesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizzesEdge\n-}\n-\n # All input for the `updateTopicById` mutation.\n input UpdateTopicByIdInput {\n   # An arbitrary string value with no semantic meaning. Will be included in the\n",
        "resultLanguage": "diff"
      }
    ]
  },
  {
    "category": "queries",
    "title": "Basic",
    "examples": [
      {
        "title": "Forums",
        "example": "{\n  allForums {\n    nodes {\n      nodeId\n      id\n      slug\n      name\n      description\n    }\n  }\n}\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"allForums\": {\n    \"nodes\": [\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDFd\",\n        \"id\": 1,\n        \"slug\": \"testimonials\",\n        \"name\": \"Testimonials\",\n        \"description\":\n          \"How do you rate PostGraphile?\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDJd\",\n        \"id\": 2,\n        \"slug\": \"feedback\",\n        \"name\": \"Feedback\",\n        \"description\":\n          \"How are you finding PostGraphile?\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDNd\",\n        \"id\": 3,\n        \"slug\": \"cat-life\",\n        \"name\": \"Cat Life\",\n        \"description\":\n          \"A forum all about cats and how fluffy they are and how they completely ignore their owners unless there is food. Or yarn.\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDRd\",\n        \"id\": 4,\n        \"slug\": \"cat-help\",\n        \"name\": \"Cat Help\",\n        \"description\":\n          \"A forum to seek advice if your cat is becoming troublesome.\"\n      }\n    ]\n  }\n}\n",
        "resultLanguage": "json"
      },
      {
        "title": "Forum by slug",
        "example": "{\n  forumBySlug(slug: \"testimonials\") {\n    nodeId\n    id\n    slug\n    name\n    description\n  }\n}\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"forumBySlug\": {\n    \"nodeId\": \"WyJmb3J1bXMiLDFd\",\n    \"id\": 1,\n    \"slug\": \"testimonials\",\n    \"name\": \"Testimonials\",\n    \"description\":\n      \"How do you rate PostGraphile?\"\n  }\n}\n",
        "resultLanguage": "json"
      }
    ]
  },
  {
    "category": "queries",
    "title": "Collections",
    "examples": [
      {
        "title": "First offset",
        "example": "{\n  allForums(first: 1, offset: 1) {\n    nodes {\n      nodeId\n      id\n      name\n    }\n  }\n}\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"allForums\": {\n    \"nodes\": [\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDJd\",\n        \"id\": 2,\n        \"name\": \"Feedback\"\n      }\n    ]\n  }\n}\n",
        "resultLanguage": "json"
      },
      {
        "title": "Relation condition",
        "example": "{\n  forumBySlug(slug: \"testimonials\") {\n    nodeId\n    id\n    name\n    topics(\n      condition: { authorId: 2 }\n    ) {\n      nodes {\n        nodeId\n        id\n        title\n        body\n      }\n    }\n  }\n}\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"forumBySlug\": {\n    \"nodeId\": \"WyJmb3J1bXMiLDFd\",\n    \"id\": 1,\n    \"name\": \"Testimonials\",\n    \"topics\": {\n      \"nodes\": [\n        {\n          \"nodeId\":\n            \"WyJ0b3BpY3MiLDFd\",\n          \"id\": 1,\n          \"title\": \"Thank you!\",\n          \"body\":\n            \"500-1500 requests per second on a single server is pretty awesome.\"\n        }\n      ]\n    }\n  }\n}\n",
        "resultLanguage": "json"
      }
    ]
  },
  {
    "category": "queries",
    "title": "Relations",
    "examples": [
      {
        "title": "Forums topics posts",
        "example": "{\n  forumBySlug(slug: \"cat-life\") {\n    name\n    topics(\n      first: 1\n      orderBy: [CREATED_AT_ASC]\n    ) {\n      nodes {\n        id\n        title\n        bodySummary\n        author {\n          id\n          username\n        }\n        posts(\n          first: 1\n          orderBy: [ID_DESC]\n        ) {\n          nodes {\n            id\n            author {\n              id\n              username\n            }\n            body\n          }\n        }\n      }\n    }\n  }\n}\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"forumBySlug\": {\n    \"name\": \"Cat Life\",\n    \"topics\": {\n      \"nodes\": [\n        {\n          \"id\": 4,\n          \"title\": \"I love cats!\",\n          \"bodySummary\":\n            \"They're the best!\",\n          \"author\": {\n            \"id\": 1,\n            \"username\": \"user\"\n          },\n          \"posts\": {\n            \"nodes\": [\n              {\n                \"id\": 6,\n                \"author\": {\n                  \"id\": 3,\n                  \"username\":\n                    \"Bradley_A\"\n                },\n                \"body\":\n                  \"I love it when they completely ignore you until they want something. So much better than dogs am I rite?\"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n",
        "resultLanguage": "json"
      }
    ]
  },
  {
    "category": "queries",
    "title": "Mutations",
    "examples": [
      {
        "title": "Create",
        "example": "mutation {\n  createTopic(\n    input: {\n      topic: {\n        forumId: 2\n        title: \"My question relates to mutations...\"\n        body: \"How do you write them?\"\n      }\n    }\n  ) {\n    topic {\n      nodeId\n      id\n      forumId\n      title\n      body\n    }\n  }\n}\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"createTopic\": {\n    \"topic\": {\n      \"nodeId\": \"WyJ0b3BpY3MiLDVd\",\n      \"id\": 5,\n      \"forumId\": 2,\n      \"title\":\n        \"My question relates to mutations...\",\n      \"body\": \"How do you write them?\"\n    }\n  }\n}\n",
        "resultLanguage": "json"
      },
      {
        "title": "Update",
        "example": "mutation {\n  updateTopicById(\n    input: {\n      id: 1\n      topicPatch: {\n        title: \"My (edited) title\"\n      }\n    }\n  ) {\n    topic {\n      nodeId\n      id\n      title\n      body\n    }\n  }\n}\n\n# Works for a table like:\n#\n#   create table app_public.topics (\n#     id serial primary key,\n#     forum_id integer NOT NULL references app_public.forums on delete cascade,\n#     title text NOT NULL,\n#     body text DEFAULT ''::text NOT NULL\n#   );\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"updateTopicById\": {\n    \"topic\": {\n      \"nodeId\": \"WyJ0b3BpY3MiLDFd\",\n      \"id\": 1,\n      \"title\": \"My (edited) title\",\n      \"body\":\n        \"500-1500 requests per second on a single server is pretty awesome.\"\n    }\n  }\n}\n",
        "resultLanguage": "json"
      },
      {
        "title": "Delete",
        "example": "mutation {\n  deleteTopicById(input: { id: 1 }) {\n    deletedTopicId\n  }\n}\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"deleteTopicById\": {\n    \"deletedTopicId\":\n      \"WyJ0b3BpY3MiLDFd\"\n  }\n}\n",
        "resultLanguage": "json"
      }
    ]
  },
  {
    "category": "queries",
    "title": "Custom queries",
    "examples": [
      {
        "title": "Single scalar",
        "example": "{\n  randomNumber\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.random_number() returns int\n#  language sql stable\n#  as $$\n#    select 4; -- Chosen by fair dice roll. Guaranteed to be random. XKCD#221\n#  $$;\n#\n",
        "exampleLanguage": "graphql",
        "result": "{ \"randomNumber\": 4 }\n",
        "resultLanguage": "json"
      },
      {
        "title": "Single row",
        "example": "{\n  currentUser {\n    nodeId\n    id\n    username\n  }\n}\n\n# Added to the GraphQL schema via\n# this SQL:\n#\n#   create function current_user()\n#   returns app_public.users\n#   language sql stable\n#   as $$\n#     select users.*\n#     from app_public.users\n#     where id = current_user_id();\n#   $$;\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"currentUser\": {\n    \"nodeId\": \"WyJ1c2VycyIsMV0=\",\n    \"id\": 1,\n    \"username\": \"user\"\n  }\n}\n",
        "resultLanguage": "json"
      },
      {
        "title": "Rows connection",
        "example": "{\n  forumsAboutCats {\n    nodes {\n      nodeId\n      id\n      name\n      slug\n    }\n  }\n}\n\n# Created from SQL like:\n#\n#  create function app_public.forums_about_cats()\n#  returns setof app_public.forums\n#  language sql stable\n#  as $$\n#    select *\n#    from app_public.forums\n#    where slug like 'cat-%';\n#  $$;\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"forumsAboutCats\": {\n    \"nodes\": [\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDNd\",\n        \"id\": 3,\n        \"name\": \"Cat Life\",\n        \"slug\": \"cat-life\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDRd\",\n        \"id\": 4,\n        \"name\": \"Cat Help\",\n        \"slug\": \"cat-help\"\n      }\n    ]\n  }\n}\n",
        "resultLanguage": "json"
      }
    ]
  },
  {
    "category": "queries",
    "title": "Custom mutations",
    "examples": [
      {
        "title": "Forgot password",
        "example": "mutation {\n  forgotPassword(\n    input: {\n      email: \"benjie@example.com\"\n    }\n  ) {\n    success\n  }\n}\n\n# Generated with SQL like this:\n#\n#  create function forgot_password(email text)\n#  returns boolean\n#  language plpgsql volatile\n#  as $$\n#    ...\n#  $$;\n#\n#  -- Optionally rename the result field:\n#  comment on function\n#    forgot_password(email text)\n#    is '@resultFieldName success';\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"forgotPassword\": {\n    \"success\": true\n  }\n}\n",
        "resultLanguage": "json"
      }
    ]
  },
  {
    "category": "queries",
    "title": "Computed columns",
    "examples": [
      {
        "title": "Topic summary",
        "example": "{\n  topicById(id: 2) {\n    body\n    bodySummary\n  }\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.topics_body_summary(\n#    t app_public.topics,\n#    max_length int = 30\n#  )\n#  returns text\n#  language sql stable\n#  as $$\n#    select case\n#      when length(t.body) > max_length\n#      then left(t.body, max_length - 3)\n#             || '...'\n#      else t.body\n#      end;\n#  $$;\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"topicById\": {\n    \"body\":\n      \"PostGraphile is a powerful, idomatic, and elegant tool.\",\n    \"bodySummary\":\n      \"PostGraphile is a powerful,...\"\n  }\n}\n",
        "resultLanguage": "json"
      },
      {
        "title": "Topic summary with arg",
        "example": "{\n  topicById(id: 2) {\n    body\n    bodySummary(maxLength: 20)\n  }\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.topics_body_summary(\n#    t app_public.topics,\n#    max_length int = 30\n#  )\n#  returns text\n#  language sql stable\n#  as $$\n#    select case\n#      when length(t.body) > max_length\n#      then left(t.body, max_length - 3)\n#             || '...'\n#      else t.body\n#      end;\n#  $$;\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"topicById\": {\n    \"body\":\n      \"PostGraphile is a powerful, idomatic, and elegant tool.\",\n    \"bodySummary\":\n      \"PostGraphile is a...\"\n  }\n}\n",
        "resultLanguage": "json"
      }
    ]
  }
]