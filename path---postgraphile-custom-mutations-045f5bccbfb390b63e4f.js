webpackJsonp([0xbe7fdbb3ac09],{402:function(e,t){e.exports={data:{remark:{html:'<h2 id="custom-mutations"><a href="#custom-mutations" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Custom Mutations</h2>\n<p>If the built in <a href="/postgraphile/crud-mutations/">CRUD Mutations</a> are not\nsufficient for your purposes, there\'s options for adding custom mutations to\nyour GraphQL schema.</p>\n<h3 id="custom-mutation-sql-procedures"><a href="#custom-mutation-sql-procedures" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Custom Mutation SQL Procedures</h3>\n<p>You can create PostgreSQL functions that perform complex mutations. For these\nfunctions the following rules apply:</p>\n<ul>\n<li>must return a <strong>named</strong> type - we do not currently support anonymous types; can return <code class="language-text">VOID</code></li>\n<li>must be marked as <code class="language-text">VOLATILE</code> (which is the default)</li>\n<li>must be defined in one of the introspected schemas</li>\n</ul>\n<p>Here\'s an example of a custom mutation, which will generate the graphql <code class="language-text">acceptTeamInvite(teamId: Int!)</code> mutation:</p>\n<div class="gatsby-highlight">\n      <pre class="language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> app_public<span class="token punctuation">.</span>accept_team_invite<span class="token punctuation">(</span>team_id <span class="token keyword">integer</span><span class="token punctuation">)</span>\n<span class="token keyword">RETURNS</span> app_public<span class="token punctuation">.</span>team_members\n<span class="token keyword">AS</span> $$\n  <span class="token keyword">UPDATE</span> app_public<span class="token punctuation">.</span>team_members\n    <span class="token keyword">SET</span> accepted_at <span class="token operator">=</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">WHERE</span> accepted_at <span class="token operator">IS</span> <span class="token boolean">NULL</span>\n    <span class="token operator">AND</span> team_members<span class="token punctuation">.</span>team_id <span class="token operator">=</span> accept_team_invite<span class="token punctuation">.</span>team_id\n    <span class="token operator">AND</span> member_id <span class="token operator">=</span> app_public<span class="token punctuation">.</span>current_user_id<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    RETURNING <span class="token operator">*</span><span class="token punctuation">;</span>\n$$ <span class="token keyword">LANGUAGE</span> <span class="token keyword">sql</span> VOLATILE STRICT SECURITY <span class="token keyword">DEFINER</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Notes on the above function:</p>\n<ul>\n<li><code class="language-text">STRICT</code> is optional, it means that if any of the arguments are null then the\nmutation will not be called (and will thus return null with no error).</li>\n<li><code class="language-text">SECURITY INVOKER</code> is the default, it means the function will run with the\n<em>security</em> of the person who <em>invoked</em> the function</li>\n<li><code class="language-text">SECURITY DEFINER</code> means that the function will run with the <em>security</em> of\nthe person who <em>defined</em> the function, typically the database owner - this\nmeans that the function may bypass RLS, RBAC and other security concerns. Be\ncareful when using <code class="language-text">SECURITY DEFINER</code> - think of it like <code class="language-text">sudo</code>!</li>\n<li>we use <code class="language-text">LANGUAGE sql</code> here, but you can use <code class="language-text">LANGUAGE plpgsql</code> if you need\nvariables or looping or if blocks or similar concerns; or if you want to\nwrite in a more familiar language you can use <code class="language-text">LANGUAGE plv8</code> (JavaScript,\nrequires extension), or one of the built in <code class="language-text">LANGUAGE</code> options such as\nPython, Perl or Tcl</li>\n</ul>\n<p>A note on <strong>named types</strong>: if you have a function that <code class="language-text">RETURNS SETOF table(a\nint, b text)</code> then PostGraphile will not pick it up. This is easy to fix, just\ndefine a named type:</p>\n<div class="gatsby-highlight">\n      <pre class="language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TYPE</span> my_function_return_type <span class="token keyword">AS</span> <span class="token punctuation">(</span>\n  a <span class="token keyword">int</span><span class="token punctuation">,</span>\n  b <span class="token keyword">text</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>and then change your function to <code class="language-text">RETURNS SETOF my_function_return_type</code>.</p>\n<h3 id="graphile-plugins"><a href="#graphile-plugins" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Graphile Plugins</h3>\n<p>If you prefer adding mutations on the JavaScript side, you can use\n<code class="language-text">ExtendSchemaPlugin</code> from <code class="language-text">graphile-utils</code>; see <a href="/postgraphile/extending/">Schema\nPlugins</a> for more information.</p>\n<h3 id="graphql-schema-stitching"><a href="#graphql-schema-stitching" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>GraphQL Schema Stitching</h3>\n<p>You can also stitch multiple GraphQL schemas together, you can read more about\ndoing this with PostGraphile here: <a href="https://medium.com/@sastraxi/authenticated-and-stitched-schemas-with-postgraphile-passport-and-stripe-a51490a858a2">Authenticated and Stitched Schemas with\nPostGraphile, Passport and\nStripe</a>.</p>',frontmatter:{path:"/postgraphile/custom-mutations/",title:"Custom Mutations"}},nav:{edges:[{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [0] >>> JSON",name:"graphile-build",sections:[{id:"guides",title:"Overview"},{id:"library-reference",title:"Using the Library"},{id:"plugin-reference",title:"Building a Plugin"}],pages:[{to:"/graphile-build/getting-started/",title:"Getting Started",sectionId:"guides"},{to:"/graphile-build/plugins/",title:"Plugins",sectionId:"guides"},{to:"/graphile-build/hooks/",title:"Hooks",sectionId:"guides"},{to:"/graphile-build/look-ahead/",title:"Look Ahead",sectionId:"guides"},{to:"/graphile-build/graphile-build/",title:"graphile-build",sectionId:"library-reference"},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"library-reference"},{to:"/graphile-build/plugin-options/",title:"Options",sectionId:"library-reference"},{to:"/graphile-build/default-plugins/",title:"Default Plugins",sectionId:"library-reference"},{to:"/graphile-build/omitting-plugins/",title:"Omitting Plugins",sectionId:"guides"},{to:"/graphile-build/all-hooks/",title:"All Hooks",sectionId:"plugin-reference"},{to:"/graphile-build/build-object/",title:"Build Object",sectionId:"plugin-reference"},{to:"/graphile-build/context-object/",title:"Context Object",sectionId:"plugin-reference"},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"plugin-reference"}]}},{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [1] >>> JSON",name:"postgraphile",sections:[{id:"overview",title:"Overview"},{id:"guides",title:"Guides"},{id:"usage",title:"Usage"}],pages:[{to:"/postgraphile/introduction/",title:"Introduction",sectionId:"overview"},{to:"/postgraphile/quick-start-guide/",title:"Quick Start Guide",sectionId:"overview"},{to:"/postgraphile/evaluating/",title:"Evaluating for your Project",sectionId:"guides"},{to:"/postgraphile/requirements/",title:"Requirements",sectionId:"overview"},{to:"/postgraphile/performance/",title:"Performance",sectionId:"overview"},{to:"/postgraphile/connections/",title:"Connections",sectionId:"overview"},{to:"/postgraphile/filtering/",title:"Filtering",sectionId:"overview"},{to:"/postgraphile/relations/",title:"Relations",sectionId:"overview"},{to:"/postgraphile/crud-mutations/",title:"CRUD Mutations",sectionId:"overview"},{to:"/postgraphile/computed-columns/",title:"Computed Columns",sectionId:"overview"},{to:"/postgraphile/custom-queries/",title:"Custom Queries",sectionId:"overview"},{to:"/postgraphile/custom-mutations/",title:"Custom Mutations",sectionId:"overview"},{to:"/postgraphile/smart-comments/",title:"Smart Comments",sectionId:"overview"},{to:"/postgraphile/security/",title:"Security",sectionId:"overview"},{to:"/postgraphile/introspection/",title:"Introspection",sectionId:"overview"},{to:"/postgraphile/extending/",title:"Schema Plugins",sectionId:"overview"},{to:"/postgraphile/plugins/",title:"Server Plugins",sectionId:"overview"},{to:"/postgraphile/subscriptions/",title:"Subscriptions",sectionId:"overview"},{to:"/postgraphile/production/",title:"Production Considerations",sectionId:"overview"},{to:"/postgraphile/reserved-keywords/",title:"Reserved Keywords",sectionId:"overview"},{to:"/postgraphile/debugging/",title:"Debugging",sectionId:"overview"},{to:"/postgraphile/jwt-guide/",title:"PostGraphile JWT Guide",sectionId:"guides"},{to:"/postgraphile/default-role/",title:"The Default Role",sectionId:"guides"},{to:"/postgraphile/procedures/",title:"PostgreSQL Procedures",sectionId:"guides"},{to:"/postgraphile/postgresql-schema-design/",title:"PostgreSQL Schema Design",sectionId:"guides"},{to:"/postgraphile/postgresql-indexes/",title:"PostgreSQL Indexes",sectionId:"guides"},{to:"/postgraphile/v4-new-features/",title:"v4 Feature Guide",sectionId:"guides"},{to:"/postgraphile/v3-migration/",title:"v3 → v4 Migration Guide",sectionId:"guides"},{to:"/postgraphile/usage-cli/",title:"CLI Usage",sectionId:"usage"},{to:"/postgraphile/usage-library/",title:"Library Usage",sectionId:"usage"},{to:"/postgraphile/usage-schema/",title:"Schema-only Usage",sectionId:"usage"}]}},{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [2] >>> JSON",name:"graphile-build-pg",sections:[{id:"usage",title:"Usage"}],pages:[{to:"/postgraphile/settings/",title:"Settings",sectionId:"usage"}]}}]}},pathContext:{layout:"page"}}}});
//# sourceMappingURL=path---postgraphile-custom-mutations-045f5bccbfb390b63e4f.js.map