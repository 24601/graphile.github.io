webpackJsonp([543942489011033e4],{"./node_modules/json-loader/index.js!./.cache/json/docs-getting-started.json":function(n,s){n.exports={data:{remark:{html:'<h2 id="getting-started"><a href="#getting-started" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Getting Started</h2>\n<h3 id="installation"><a href="#installation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h3>\n<p>GraphQL-Build uses your local version of <code>graphql</code> to avoid conflicts, so you need to install both:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save graphql-build graphql\n</code></pre>\n      </div>\n<h3 id="building-your-schema"><a href="#building-your-schema" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Building your Schema</h3>\n<p>The <code>buildSchema</code> method will (asynchronously) build a GraphQL schema from a\nlist of plugins. We ship a number of default plugins (TODO: link to\ngraphql-build/defaultPlugins) that are sufficient to create a simple schema,\nlike so:</p>\n<!-- source: examples/empty-schema.js -->\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> buildSchema<span class="token punctuation">,</span> defaultPlugins <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"graphql-build"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> printSchema <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"graphql/utilities"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">buildSchema</span><span class="token punctuation">(</span>defaultPlugins<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>schema <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">printSchema</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// ES2017: const schema = await buildSchema(defaultPlugins);</span>\n</code></pre>\n      </div>\n<p>This will generate a basic schema which supports the <a href="https://facebook.github.io/relay/docs/graphql-relay-specification.html">Relay <code>Node</code> interface</a>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code><span class="token comment" spellcheck="true"># An object with a globally unique `ID`.</span>\ninterface Node <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true"># A globally unique identifier. Can be used in various places throughout the system to identify this single value.</span>\n  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true"># The root query type which gives access points into the data universe.</span>\ntype Query implements Node <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true"># Exposes the root query type nested one level down. This is helpful for Relay 1</span>\n  <span class="token comment" spellcheck="true"># which can only query top level fields if they are in a particular form.</span>\n  <span class="token attr-name">query</span><span class="token punctuation">:</span> Query<span class="token operator">!</span>\n\n  <span class="token comment" spellcheck="true"># The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.</span>\n  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span>\n\n  <span class="token comment" spellcheck="true"># Fetches an object given its globally unique `ID`.</span>\n  node<span class="token punctuation">(</span>\n    <span class="token comment" spellcheck="true"># The globally unique `ID`.</span>\n    <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span>\n  <span class="token punctuation">)</span><span class="token punctuation">:</span> Node\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h4 id="building-a-schema-without-the-node-interface"><a href="#building-a-schema-without-the-node-interface" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Building a Schema without the Node interface</h4>\n<p>It\'s possible to build an even more minimal schema without Node support by\nomitting the <code>NodePlugin</code> plugin:</p>\n<!-- source: examples/emptier-schema.js -->\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> buildSchema<span class="token punctuation">,</span> defaultPlugins<span class="token punctuation">,</span> NodePlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"graphql-build"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> printSchema <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"graphql/utilities"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">buildSchema</span><span class="token punctuation">(</span>\n  defaultPlugins<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>plugin <span class="token operator">=</span><span class="token operator">></span> plugin <span class="token operator">!==</span> NodePlugin<span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>schema <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">printSchema</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>which generates this much simpler schema:</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code><span class="token comment" spellcheck="true"># The root query type which gives access points into the data universe.</span>\ntype Query <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true"># Exposes the root query type nested one level down. This is helpful for Relay 1</span>\n  <span class="token comment" spellcheck="true"># which can only query top level fields if they are in a particular form.</span>\n  <span class="token attr-name">query</span><span class="token punctuation">:</span> Query<span class="token operator">!</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3 id="passing-options-to-plugins"><a href="#passing-options-to-plugins" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Passing options to plugins</h3>\n<p>The second argument to <code>buildSchema</code> is options which are made available to\nevery plugin (as their second argument). The following example passes the\n<code>nodeIdFieldName</code> setting through, changing from the default <code>id</code> to <code>flibble</code>:</p>\n<!-- source: examples/empty-schema-with-options.js -->\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> buildSchema<span class="token punctuation">,</span> defaultPlugins <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"graphql-build"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> printSchema <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"graphql/utilities"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">buildSchema</span><span class="token punctuation">(</span>defaultPlugins<span class="token punctuation">,</span> <span class="token punctuation">{</span> nodeIdFieldName<span class="token punctuation">:</span> <span class="token string">"flibble"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>schema <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">printSchema</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>which modifies the Node interface thusly:</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code>interface Node <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true"># A globally unique identifier. Can be used in various places throughout the system to identify this single value.</span>\n  <span class="token attr-name">flibble</span><span class="token punctuation">:</span> ID<span class="token operator">!</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3 id="whats-next"><a href="#whats-next" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>What\'s next?</h3>\n<p>An empty schema\'s not very useful, so lets look into extending the schema with plugins:</p>',frontmatter:{path:"/docs/getting-started/",title:"Getting Started",next:"/docs/plugins/",nextText:"Plugins",prev:null,prevText:null}}},pathContext:{layout:"page"}}}});
//# sourceMappingURL=path---docs-getting-started-354620d3c58e281ddc88.js.map