webpackJsonp([0x94c8136db646],{405:function(e,t){e.exports={data:{remark:{html:'<h2 id="running-postgraphile-in-production"><a href="#running-postgraphile-in-production" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Running PostGraphile in Production</h2>\n<p>When you run PostGraphile in production you\'ll want to ensure that people\ncannot easily trigger denial of service (DOS) attacks against you. Due to the\nnature of GraphQL it\'s easy to construct a small query that could be very\nexpensive for the server to run, for example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql">allUsers <span class="token punctuation">{</span>\n  nodes <span class="token punctuation">{</span>\n    postsByAuthorId <span class="token punctuation">{</span>\n      nodes <span class="token punctuation">{</span>\n        commentsByPostId <span class="token punctuation">{</span>\n          userByAuthorId <span class="token punctuation">{</span>\n            postsByAuthorId <span class="token punctuation">{</span>\n              nodes <span class="token punctuation">{</span>\n                commentsByPostId <span class="token punctuation">{</span>\n                  userByAuthorId <span class="token punctuation">{</span>\n                    postsByAuthorId <span class="token punctuation">{</span>\n                      nodes <span class="token punctuation">{</span>\n                        commentsByPostId <span class="token punctuation">{</span>\n                          userByAuthorId <span class="token punctuation">{</span>\n                            id\n                          <span class="token punctuation">}</span>\n                        <span class="token punctuation">}</span>\n                      <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span>\n                  <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n              <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>There\'s lots of techniques for protecting your server from these kinds of\nqueries; the <a href="/postgraphile/plugins">Pro Plugin</a> [PRO] helps you implement a\nfew of them. One of the most effective techniques, if you can use it, is the\nthat of "persisted queries" as a query whitelist. This technique will only work\nif you control all the GraphQL clients that you wish to talk to your GraphQL\nendpoint and if they use only static queries. If you\'re expecting 3rd parties\nto query your API then persisted queries will not help you, and this is where\nthe other techniques come in handy.</p>\n<p>The rest of this article relates to Pro Plugin\'s approach to addressing these\nissues.</p>\n<h3 id="sending-queries-to-read-replicas"><a href="#sending-queries-to-read-replicas" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sending queries to read replicas</h3>\n<p>Probably the most important thing regarding scalability is making sure that your\nmaster database doesn\'t bow under the pressure of all the clients talking to it.\nOne way to reduce this pressure is to offload read operations to read replicas.\nIn GraphQL it\'s easy to tell if a request will perform any writes or not: if\nit\'s a <code class="language-text">query</code> then it\'s read-only, if it\'s a <code class="language-text">mutation</code> then it may perform\nwrites.</p>\n<p>Using <code class="language-text">--read-only-connection &lt;string&gt;</code> [PRO] you may give PostGraphile a\nseparate connection string to use for queries, to compliment the connection\nstring passed via <code class="language-text">--connection</code> which will now be used only for mutations.</p>\n<p>(If you\'re using middleware, then you\'ll want to pass a read-only pool to the\n<code class="language-text">readReplicaPgPool</code> option instead.)</p>\n<blockquote>\n<p>NOTE: We don\'t currently support the multi-host syntax for this connection\nstring, but you can use a PostgreSQL proxy such a PgPool or PgBouncer between\nPostGraphile and your database to enable connecting to multiple read\nreplicas.</p>\n</blockquote>\n<h3 id="pagination-caps"><a href="#pagination-caps" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Pagination caps</h3>\n<p>It\'s unlikely that you want users to request <code class="language-text">allUsers</code> and receive back\nliterally all of the users in the database. More likely you want users to use\ncursor-based pagination over this connection with <code class="language-text">first</code> / <code class="language-text">after</code>. The Pro\nPlugin introduces the <code class="language-text">--default-pagination-cap [int]</code> [PRO] option which\nenables you to enforce a pagination cap on all connections. Whatever number\nyou pass will be used as the pagination cap, but you can override it on a\ntable-by-table basis using <a href="/postgraphile/smart-comments/">smart comments</a> - in this case the <code class="language-text">@paginationCap</code> smart comment.</p>\n<div class="gatsby-highlight">\n      <pre class="language-sql"><code class="language-sql"><span class="token keyword">comment</span> <span class="token keyword">on</span> <span class="token keyword">table</span> users <span class="token operator">is</span>\n  E<span class="token string">\'@paginationCap 20\\nSomeone who can log in.\'</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3 id="limiting-graphql-query-depth"><a href="#limiting-graphql-query-depth" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Limiting GraphQL query depth</h3>\n<p>Most GraphQL queries tend to be only a few levels deep, queries like the deep\none at the top of this article are generally not required. You may use\n<code class="language-text">--graphql-depth-limit [int]</code> [PRO] to limit the depth of any GraphQL queries\nthat hit PostGraphile - any deeper than this will be discarded during query\nvalidation.</p>\n<h3 id="experimental-graphql-cost-limit"><a href="#experimental-graphql-cost-limit" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[EXPERIMENTAL] GraphQL cost limit</h3>\n<p>The most powerful way of preventing DOS is to limit the cost of GraphQL queries\nthat may be executed against your GraphQL server. The Pro Plugin contains a\nvery early implementation of this technique, but the costs are not very\naccurate yet. You may enable a cost limit with <code class="language-text">--graphql-cost-limit [int]</code>\n[PRO] and the calculated cost of any GraphQL queries will be made available on\n<code class="language-text">meta</code> field in the GraphQL payload.</p>\n<p>If your GraphQL query is seen to be too expensive, here\'s some techniques to\nbring the calculated cost down:</p>\n<ul>\n<li>If you\'ve not specified a limit (<code class="language-text">first</code>/<code class="language-text">last</code>) on a connection, we assume\nit will return 1000 results. If you\'re expecting fewer than this, specify the\nmaximum you\'d ever expect to receive.</li>\n<li>Cost is based on number of expected results (without looking at the\ndatabase!) so lower your limits on connections.</li>\n<li>Connections multiply the cost of their children by the number of results\nthey\'re expected to return, so lower the limits on connections.</li>\n<li>Nested fields multiply costs; so pulling a connection inside a connection\ninside a connection is going to be expensive - to address this, try placing\nlower <code class="language-text">first</code>/<code class="language-text">last</code> values on the connections or avoiding fetching nested\ndata until you need to display it (split into multiple requests / only\nrequest the data you need).</li>\n<li>Subscriptions are automatically seen as 10x as expensive as queries - try\nand minimise the amount of data your subscription requests.</li>\n<li>Procedure connections are treated as more expensive than table connections.</li>\n<li><code class="language-text">totalCount</code> on a table has a fair cost</li>\n<li><code class="language-text">totalCount</code> on a procedure has a higher cost</li>\n<li>Using <code class="language-text">pageInfo</code> adds significant cost to connections</li>\n<li>Computed columns are seen as fairly expensive - in future we may factor in\nPostgreSQL\'s <code class="language-text">COST</code> parameter when figuring this out.</li>\n</ul>\n<p>Keep in mind this is a <strong>very early</strong> implementation of cost analysis, there\'s\nmuch improvement to be made. Feel free to reach out with any bad costs/queries\nso we can improve it.</p>',frontmatter:{path:"/postgraphile/production/",title:"Running PostGraphile in Production"}},nav:{edges:[{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [0] >>> JSON",name:"graphile-build",sections:[{id:"guides",title:"Overview"},{id:"library-reference",title:"Using the Library"},{id:"plugin-reference",title:"Building a Plugin"}],pages:[{to:"/graphile-build/getting-started/",title:"Getting Started",sectionId:"guides"},{to:"/graphile-build/plugins/",title:"Plugins",sectionId:"guides"},{to:"/graphile-build/hooks/",title:"Hooks",sectionId:"guides"},{to:"/graphile-build/look-ahead/",title:"Look Ahead",sectionId:"guides"},{to:"/graphile-build/graphile-build/",title:"graphile-build",sectionId:"library-reference"},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"library-reference"},{to:"/graphile-build/plugin-options/",title:"Options",sectionId:"library-reference"},{to:"/graphile-build/default-plugins/",title:"Default Plugins",sectionId:"library-reference"},{to:"/graphile-build/omitting-plugins/",title:"Omitting Plugins",sectionId:"guides"},{to:"/graphile-build/all-hooks/",title:"All Hooks",sectionId:"plugin-reference"},{to:"/graphile-build/build-object/",title:"Build Object",sectionId:"plugin-reference"},{to:"/graphile-build/context-object/",title:"Context Object",sectionId:"plugin-reference"},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"plugin-reference"}]}},{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [1] >>> JSON",name:"postgraphile",sections:[{id:"overview",title:"Overview"},{id:"guides",title:"Guides"},{id:"usage",title:"Usage"}],pages:[{to:"/postgraphile/introduction/",title:"Introduction",sectionId:"overview"},{to:"/postgraphile/quick-start-guide/",title:"Quick Start Guide",sectionId:"overview"},{to:"/postgraphile/evaluating/",title:"Evaluating for your Project",sectionId:"guides"},{to:"/postgraphile/requirements/",title:"Requirements",sectionId:"overview"},{to:"/postgraphile/performance/",title:"Performance",sectionId:"overview"},{to:"/postgraphile/connections/",title:"Connections",sectionId:"overview"},{to:"/postgraphile/filtering/",title:"Filtering",sectionId:"overview"},{to:"/postgraphile/relations/",title:"Relations",sectionId:"overview"},{to:"/postgraphile/crud-mutations/",title:"CRUD Mutations",sectionId:"overview"},{to:"/postgraphile/computed-columns/",title:"Computed Columns",sectionId:"overview"},{to:"/postgraphile/custom-queries/",title:"Custom Queries",sectionId:"overview"},{to:"/postgraphile/custom-mutations/",title:"Custom Mutations",sectionId:"overview"},{to:"/postgraphile/smart-comments/",title:"Smart Comments",sectionId:"overview"},{to:"/postgraphile/security/",title:"Security",sectionId:"overview"},{to:"/postgraphile/introspection/",title:"Introspection",sectionId:"overview"},{to:"/postgraphile/extending/",title:"Extending PostGraphile",sectionId:"overview"},{to:"/postgraphile/plugins/",title:"Plugins [SUPPORTER] [PRO]",sectionId:"overview"},{to:"/postgraphile/subscriptions/",title:"Subscriptions [SUPPORTER]",sectionId:"overview"},{to:"/postgraphile/production/",title:"Running in Production [PRO]",sectionId:"overview"},{to:"/postgraphile/reserved-keywords/",title:"Reserved Keywords",sectionId:"overview"},{to:"/postgraphile/jwt-guide/",title:"PostGraphile JWT Guide",sectionId:"guides"},{to:"/postgraphile/default-role/",title:"The Default Role",sectionId:"guides"},{to:"/postgraphile/procedures/",title:"PostgreSQL Procedures",sectionId:"guides"},{to:"/postgraphile/postgresql-schema-design/",title:"PostgreSQL Schema Design",sectionId:"guides"},{to:"/postgraphile/postgresql-indexes/",title:"PostgreSQL Indexes",sectionId:"guides"},{to:"/postgraphile/v4-new-features/",title:"v4 Feature Guide",sectionId:"guides"},{to:"/postgraphile/v3-migration/",title:"v3 → v4 Migration Guide",sectionId:"guides"},{to:"/postgraphile/usage-cli/",title:"CLI Usage",sectionId:"usage"},{to:"/postgraphile/usage-library/",title:"Library Usage",sectionId:"usage"},{to:"/postgraphile/usage-schema/",title:"Schema-only Usage",sectionId:"usage"}]}},{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [2] >>> JSON",name:"graphile-build-pg",sections:[{id:"usage",title:"Usage"}],pages:[{to:"/postgraphile/settings/",title:"Settings",sectionId:"usage"}]}}]}},pathContext:{layout:"page"}}}});
//# sourceMappingURL=path---postgraphile-production-817ef8ae64447faf0fe3.js.map