{"version":3,"sources":["webpack:///path---postgraphile-production-8b31fb5e656894ff78bd.js","webpack:///./.cache/json/postgraphile-production.json"],"names":["webpackJsonp","471","module","exports","data","remark","html","frontmatter","path","title","showExamples","nav","edges","node","id","name","sections","pages","to","sectionId","subpages","examples","category","example","exampleLanguage","result","resultLanguage","pathContext","layout"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,QAAUC,KAAA,ol2BAA8/0BC,aAAiwCC,KAAA,4BAAAC,MAAA,4BAAAC,aAAA,OAA4FC,KAAQC,QAAUC,MAAQC,GAAA,4FAAAC,KAAA,OAAAC,WAA4HF,GAAA,OAAAL,MAAA,YAAgCK,GAAA,QAAAL,MAAA,UAA6BQ,QAAYC,GAAA,kCAAAT,MAAA,2BAAAU,UAAA,OAAAC,SAAA,OAA+GF,GAAA,gCAAAT,MAAA,yBAAAU,UAAA,OAAAC,SAAA,OAA2GF,GAAA,mBAAAT,MAAA,YAAAU,UAAA,QAAAC,SAAA,UAAqFP,MAAQC,GAAA,4FAAAC,KAAA,iBAAAC,WAAsIF,GAAA,SAAAL,MAAA,aAAmCK,GAAA,oBAAAL,MAAA,sBAAuDK,GAAA,mBAAAL,MAAA,sBAAoDQ,QAAYC,GAAA,mCAAAT,MAAA,kBAAAU,UAAA,SAAAC,cAAuGF,GAAA,2BAAAT,MAAA,UAAAU,UAAA,SAAAC,cAAuFF,GAAA,yBAAAT,MAAA,QAAAU,UAAA,SAAAC,cAAmFF,GAAA,8BAAAT,MAAA,aAAAU,UAAA,SAAAC,cAA6FF,GAAA,kCAAAT,MAAA,iBAAAU,UAAA,oBAAAC,cAAgHF,GAAA,kCAAAT,MAAA,gBAAAU,UAAA,oBAAAC,cAA+GF,GAAA,kCAAAT,MAAA,UAAAU,UAAA,oBAAAC,cAAyGF,GAAA,mCAAAT,MAAA,kBAAAU,UAAA,oBAAAC,cAAkHF,GAAA,oCAAAT,MAAA,mBAAAU,UAAA,SAAAC,cAAyGF,GAAA,6BAAAT,MAAA,YAAAU,UAAA,mBAAAC,cAAqGF,GAAA,gCAAAT,MAAA,eAAAU,UAAA,mBAAAC,cAA2GF,GAAA,kCAAAT,MAAA,iBAAAU,UAAA,mBAAAC,cAA+GF,GAAA,kCAAAT,MAAA,gBAAAU,UAAA,mBAAAC,iBAAiHP,MAAQC,GAAA,4FAAAC,KAAA,eAAAC,WAAoIF,GAAA,WAAAL,MAAA,aAAqCK,GAAA,SAAAL,MAAA,cAAoCK,GAAA,cAAAL,MAAA,gBAA2CK,GAAA,SAAAL,MAAA,WAAiCK,GAAA,YAAAL,MAAA,cAAuCK,GAAA,MAAAL,MAAA,QAAyBQ,QAAYC,GAAA,8BAAAT,MAAA,eAAAU,UAAA,WAAAC,cAAiGF,GAAA,0BAAAT,MAAA,kBAAAU,UAAA,WAAAC,cAAgGF,GAAA,uBAAAT,MAAA,QAAAU,UAAA,WAAAC,WAAgFF,GAAA,2BAAAT,MAAA,YAAAU,UAAA,aAA6ED,GAAA,+BAAAT,MAAA,gBAAAU,UAAA,aAAqFD,GAAA,8BAAAT,MAAA,oBAAAU,UAAA,eAA0FD,GAAA,6BAAAT,MAAA,cAAAU,UAAA,WAAAC,cAA+FF,GAAA,8BAAAT,MAAA,eAAAU,UAAA,WAAAC,cAAiGF,GAAA,mCAAAT,MAAA,oBAAAU,UAAA,SAAAC,cAAyGF,GAAA,4BAAAT,MAAA,aAAAU,UAAA,SAAAC,SAAA,OAA6FF,GAAA,4BAAAT,MAAA,aAAAU,UAAA,SAAAC,SAAA,OAA6FF,GAAA,wBAAAT,MAAA,SAAAU,UAAA,SAAAC,WAAgFF,GAAA,2BAAAT,MAAA,YAAAU,UAAA,WAA2ED,GAAA,6BAAAT,MAAA,cAAAU,UAAA,WAA+ED,GAAA,2BAAAT,MAAA,YAAAU,UAAA,WAA2ED,GAAA,gCAAAT,MAAA,iBAAAU,UAAA,WAAqFD,GAAA,yBAAAT,MAAA,cAAAU,UAAA,aAA6ED,GAAA,2BAAAT,MAAA,YAAAU,UAAA,SAAAC,WAAsFF,GAAA,kCAAAT,MAAA,mBAAAU,UAAA,WAAyFD,GAAA,gCAAAT,MAAA,iBAAAU,UAAA,WAAqFD,GAAA,kCAAAT,MAAA,mBAAAU,UAAA,WAAyFD,GAAA,uCAAAT,MAAA,wBAAAU,UAAA;GAAmGD,GAAA,kCAAAT,MAAA,mBAAAU,UAAA,kBAAgGD,GAAA,oCAAAT,MAAA,qBAAAU,UAAA,SAAAC,cAA2GF,GAAA,0BAAAT,MAAA,WAAAU,UAAA,SAAAC,cAAuFF,GAAA,+BAAAT,MAAA,gBAAAU,UAAA,SAAAC,cAAiGF,GAAA,mCAAAT,MAAA,oBAAAU,UAAA,SAAAC,cAAyGF,GAAA,2BAAAT,MAAA,YAAAU,UAAA,SAAAC,cAAyFF,GAAA,gCAAAT,MAAA,iBAAAU,UAAA,cAAAC,cAAwGF,GAAA,2BAAAT,MAAA,iBAAAU,UAAA,cAAAC,WAAgGF,GAAA,4CAAAT,MAAA,0BAAAU,UAAA,gBAA+GD,GAAA,gDAAAT,MAAA,8BAAAU,UAAA,gBAAuHD,GAAA,2CAAAT,MAAA,yBAAAU,UAAA,gBAA6GD,GAAA,4CAAAT,MAAA,0BAAAU,UAAA,gBAA+GD,GAAA,4CAAAT,MAAA,0BAAAU,UAAA,gBAA+GD,GAAA,kDAAAT,MAAA,+BAAAU,UAAA,gBAA0HD,GAAA,+BAAAT,MAAA,kBAAAU,UAAA,gBAA0FD,GAAA,gCAAAT,MAAA,iBAAAU,UAAA,gBAA0FD,GAAA,mCAAAT,MAAA,oBAAAU,UAAA,kBAAkGD,GAAA,yBAAAT,MAAA,iBAAAU,UAAA,cAAAC,cAAiGF,GAAA,4BAAAT,MAAA,8BAAAU,UAAA,SAAAC,cAA4GF,GAAA,0CAAAT,MAAA,2BAAAU,UAAA,SAAAC,cAAuHF,GAAA,4BAAAT,MAAA,4BAAAU,UAAA,SAAAC,cAA0GF,GAAA,2BAAAT,MAAA,yBAAAU,UAAA,SAAAC,cAAsGF,GAAA,kCAAAT,MAAA,gCAAAU,UAAA,SAAAC,cAAoHF,GAAA,8BAAAT,MAAA,mBAAAU,UAAA,SAAAC,cAAmGF,GAAA,iCAAAT,MAAA,mBAAAU,UAAA,SAAAC,cAAsGF,GAAA,8BAAAT,MAAA,0BAAAU,UAAA,SAAAC,cAA0GF,GAAA,8BAAAT,MAAA,oBAAAU,UAAA,SAAAC,cAAoGF,GAAA,yCAAAT,MAAA,0BAAAU,UAAA,YAAAC,cAAwHF,GAAA,gCAAAT,MAAA,iBAAAU,UAAA,YAAAC,cAAsGF,GAAA,iCAAAT,MAAA,kBAAAU,UAAA,YAAAC,cAAwGF,GAAA,+BAAAT,MAAA,iBAAAU,UAAA,MAAAC,cAA+FF,GAAA,8BAAAT,MAAA,sBAAAU,UAAA,MAAAC,cAAmGF,GAAA,mCAAAT,MAAA,qBAAAU,UAAA,MAAAC,iBAA0GP,MAAQC,GAAA,4FAAAC,KAAA,oBAAAC,WAAyIF,GAAA,WAAAL,MAAA,UAAgCQ,QAAYC,GAAA,+BAAAT,MAAA,WAAAU,UAAA,WAAAC,kBAAiGC,UAAaT,QAAUC,MAAQS,SAAA,YAAAR,GAAA,iGAAAL,MAAA,iBAAAY,WAAmKZ,MAAA,uBAAAc,QAAA,4UAAiXC,gBAAA,MAAAC,OAAA,2QAAAC,eAAA,YAA6Ub,MAAQS,SAAA,YAAAR,GAAA,iGAAAL,MAAA,mBAAAY,WAAqKZ,MAAA,qBAAAc,QAAA,8YAAmbC,gBAAA,MAAAC,OAAA,iZAAqTC,eAAA,YAA8Jb,MAAQS,SAAA,YAAAR,GAAA,iGAAAL,MAAA,mBAAAY,WAAqKZ,MAAA,0BAAAc,QAAA,k8CAA0+CC,gBAAA,MAAAC,OAAA,soEAA2pEC,eAAA,YAA6Cb,MAAQS,SAAA,UAAAR,GAAA,iGAAAL,MAAA,YAAAY,WAA4JZ,MAAA,gCAAAc,QAAA,u3BAAq6BC,gBAAA,aAAAC,OAAA,u3OAA02OC,eAAA,SAAmFjB,MAAA,kCAAAc,QAAA,84BAAg8BC,gBAAA,aAAAC,OAAA,w6BAAAC,eAAA,YAAi/Bb,MAAQS,SAAA,UAAAR,GAAA,iGAAAL,MAAA,QAAAY,WAAwJZ,MAAA,yBAAAc,QAAA,s2BAAg5BC,gBAAA,aAAAC,OAAA,ohDAA4gDC,eAAA,SAA8EjB,MAAA,8BAAAc,QAAA,+sDAA6vDC,gBAAA,aAAAC,OAAA,67BAAk+BC,eAAA,SAAiCjB,MAAA,6BAAAc,QAAA,gnCAA+pCC,gBAAA,aAAAC,OAAA,ovBAAsbC,eAAA,YAA4Yb,MAAQS,SAAA,UAAAR,GAAA,iGAAAL,MAAA,oBAAAY,WAAoKZ,MAAA,yBAAAc,QAAA,w5CAAwvCC,gBAAA,aAAAC,OAAA,GAAAC,eAAA,YAAuRb,MAAQS,SAAA,UAAAR,GAAA,iGAAAL,MAAA,gBAAAY,WAAgKZ,MAAA,+BAAAc,QAAA,whCAA63BC,gBAAA,aAAAC,OAAA;AAA4/4BC,eAAA,YAAmHb,MAAQS,SAAA,UAAAR,GAAA,iGAAAL,MAAA,QAAAY,WAAwJZ,MAAA,SAAAc,QAAA,oHAA2IC,gBAAA,UAAAC,OAAA,+pBAA8vBC,eAAA,SAA8BjB,MAAA,gBAAAc,QAAA,2GAA2IC,gBAAA,UAAAC,OAAA,8JAAuNC,eAAA,YAAiCb,MAAQS,SAAA,UAAAR,GAAA,iGAAAL,MAAA,cAAAY,WAA8JZ,MAAA,eAAAc,QAAA,0GAAuIC,gBAAA,UAAAC,OAAA,8JAAiNC,eAAA,SAA8BjB,MAAA,qBAAAc,QAAA,iNAAsPC,gBAAA,UAAAC,OAAA,siBAAynBC,eAAA,YAAiCb,MAAQS,SAAA,UAAAR,GAAA,iGAAAL,MAAA,YAAAY,WAA4JZ,MAAA,sBAAAc,QAAA,8eAAkhBC,gBAAA,UAAAC,OAAA,gvBAAm0BC,eAAA,YAAiCb,MAAQS,SAAA,UAAAR,GAAA,kGAAAL,MAAA,YAAAY,WAA6JZ,MAAA,SAAAc,QAAA,kSAA6TC,gBAAA,UAAAC,OAAA,2OAAoSC,eAAA,SAA8BjB,MAAA,SAAAc,QAAA,ieAAwfC,gBAAA,UAAAC,OAAA,+NAAsRC,eAAA,SAA8BjB,MAAA,SAAAc,QAAA,kFAAyGC,gBAAA,UAAAC,OAAA,uFAAkIC,eAAA,YAAiCb,MAAQS,SAAA,UAAAR,GAAA,kGAAAL,MAAA,iBAAAY,WAAkKZ,MAAA,gBAAAc,QAAA,+OAA0QC,gBAAA,UAAAC,OAAA,0BAAoEC,eAAA,SAA8BjB,MAAA,aAAAc,QAAA,6TAAwVC,gBAAA,UAAAC,OAAA,2GAA4JC,eAAA,SAA8BjB,MAAA,kBAAAc,QAAA,kVAAkXC,gBAAA,UAAAC,OAAA,iMAAwPC,eAAA,YAAiCb,MAAQS,SAAA,UAAAR,GAAA,kGAAAL,MAAA,mBAAAY,WAAoKZ,MAAA,kBAAAc,QAAA,uaAAucC,gBAAA,UAAAC,OAAA,0DAAmGC,eAAA,YAAiCb,MAAQS,SAAA,UAAAR,GAAA,kGAAAL,MAAA,mBAAAY,WAAoKZ,MAAA,gBAAAc,QAAA,saAAocC,gBAAA,UAAAC,OAAA,+JAA8MC,eAAA,SAA8BjB,MAAA,yBAAAc,QAAA,qbAA4dC,gBAAA,UAAAC,OAAA,qJAAoMC,eAAA,cAAkCC,aAAgBC,OAAA","file":"path---postgraphile-production-8b31fb5e656894ff78bd.js","sourcesContent":["webpackJsonp([163587040327238],{\n\n/***/ 471:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"remark\":{\"html\":\"<h2 id=\\\"production-considerations\\\"><a href=\\\"#production-considerations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Production Considerations</h2>\\n<p>When it comes time to deploy your PostGraphile application in production,\\nthere's a few things you'll want to think about including topics such as\\nlogging, security and stability. This article outlines some of the issues\\nyou might face, and how to solve them.</p>\\n<h3 id=\\\"database-access-considerations\\\"><a href=\\\"#database-access-considerations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Database Access Considerations</h3>\\n<p>PostGraphile is just a node app / middleware, so you can deploy it to any\\nnumber of places: Heroku, Now.sh, a VM, a container such as Docker, or of\\ncourse onto bare metal. Typically you won't run PostGraphile on the same\\nhardware/container/VM as the database, so PostGraphile needs to be able to\\nconnect to your database without you putting your DB at risk.</p>\\n<p>A standard way of doing this is to put the DB behind a firewall. However,\\nif you're using a system like Heroku or Now.sh you probably can't do that,\\nso instead you must make your DB accessible to the internet. When doing so\\nhere are a few things we recommend:</p>\\n<ol>\\n<li>Only allow connections over SSL (<code class=\\\"language-text\\\">force_ssl</code> setting)</li>\\n<li>Use a secure username (not <code class=\\\"language-text\\\">root</code>, <code class=\\\"language-text\\\">admin</code>, <code class=\\\"language-text\\\">postgres</code>, etc which are all fairly commonly used)</li>\\n<li>Use a super secure password; you can use a command like this to generate one:\\n<code class=\\\"language-text\\\">openssl rand -base64 30 | tr &#39;+/&#39; &#39;-_&#39;</code></li>\\n<li>Use a non-standard port for your PostgreSQL server if you can (pick a random port number)</li>\\n<li>Use a hard-to-guess hostname, and never reveal the hostname to anyone who doesn't need to know it</li>\\n<li>If possible, limit the IP addresses that can connect to your DB to be those of your hosting provider.</li>\\n</ol>\\n<p>Heroku have some instructions on making RDS available for use under Heroku\\nwhich should also work for Now.sh or any other service:\\n<a href=\\\"https://devcenter.heroku.com/articles/amazon-rds\\\">https://devcenter.heroku.com/articles/amazon-rds</a></p>\\n<h3 id=\\\"common-middleware-considerations\\\"><a href=\\\"#common-middleware-considerations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Common Middleware Considerations</h3>\\n<p>In a production app, you typically want to add a few common enhancements, e.g.</p>\\n<ul>\\n<li>Logging</li>\\n<li>Gzip or similar compression</li>\\n<li>Security protections</li>\\n<li>Rate limiting</li>\\n</ul>\\n<p>Since there's already a lot of options and opinions in this space, and they're\\nnot directly related to the problem of serving GraphQL from your PostgreSQL\\ndatabase, PostGraphile does not include these things by default. We recommend\\nthat you use something like Express middlewares to implement these common\\nrequirements. This is why we recommend <a href=\\\"/postgraphile/usage-library/\\\">using PostGraphile as a\\nlibrary</a> for production usage.</p>\\n<p>Picking the Express (or similar) middlewares that work for you is beyond the\\nscope of this article; below is an example of where to place these middlewares.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> express <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"express\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> postgraphile <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"postgraphile\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> app <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">express</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/* Example middleware you might want to put in front of PostGraphile */</span>\\n<span class=\\\"token comment\\\">// app.use(require('morgan')(...));</span>\\n<span class=\\\"token comment\\\">// app.use(require('compression')({...}));</span>\\n<span class=\\\"token comment\\\">// app.use(require('helmet')({...}));</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">postgraphile</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DATABASE_URL</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">\\\"postgres:///\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">PORT</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3 id=\\\"denial-of-service-considerations\\\"><a href=\\\"#denial-of-service-considerations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Denial of Service Considerations</h3>\\n<p>When you run PostGraphile in production you'll want to ensure that people\\ncannot easily trigger denial of service (DOS) attacks against you. Due to the\\nnature of GraphQL it's easy to construct a small query that could be very\\nexpensive for the server to run, for example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\">allUsers <span class=\\\"token punctuation\\\">{</span>\\n  nodes <span class=\\\"token punctuation\\\">{</span>\\n    postsByAuthorId <span class=\\\"token punctuation\\\">{</span>\\n      nodes <span class=\\\"token punctuation\\\">{</span>\\n        commentsByPostId <span class=\\\"token punctuation\\\">{</span>\\n          userByAuthorId <span class=\\\"token punctuation\\\">{</span>\\n            postsByAuthorId <span class=\\\"token punctuation\\\">{</span>\\n              nodes <span class=\\\"token punctuation\\\">{</span>\\n                commentsByPostId <span class=\\\"token punctuation\\\">{</span>\\n                  userByAuthorId <span class=\\\"token punctuation\\\">{</span>\\n                    postsByAuthorId <span class=\\\"token punctuation\\\">{</span>\\n                      nodes <span class=\\\"token punctuation\\\">{</span>\\n                        commentsByPostId <span class=\\\"token punctuation\\\">{</span>\\n                          userByAuthorId <span class=\\\"token punctuation\\\">{</span>\\n                            id\\n                          <span class=\\\"token punctuation\\\">}</span>\\n                        <span class=\\\"token punctuation\\\">}</span>\\n                      <span class=\\\"token punctuation\\\">}</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                  <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n              <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>There's lots of techniques for protecting your server from these kinds of\\nqueries; a great introduction to this subject is <a href=\\\"https://dev-blog.apollodata.com/securing-your-graphql-api-from-malicious-queries-16130a324a6b\\\">this blog\\npost</a>\\nfrom Apollo.</p>\\n<p>These techniques should be used in conjunction with common HTTP protection\\nmethods such as rate limiting which are typically better implemented at a\\nseparate layer; for example you could use <a href=\\\"https://www.cloudflare.com/rate-limiting/\\\">Cloudflare rate\\nlimiting</a> for this.</p>\\n<h4 id=\\\"simple-query-whitelist-persisted-queries\\\"><a href=\\\"#simple-query-whitelist-persisted-queries\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Simple: Query Whitelist (\\\"persisted queries\\\")</h4>\\n<p>If you do not intend to open your API up to third parties to run arbitrary\\nqueries against then using persisted queries as a query whitelist to protect\\nyour GraphQL endpoint is a good solution. This technique ensures that only the\\nqueries you use in your own applications can be executed on the server (but you\\ncan of course change the variables).</p>\\n<p>This technique has a few caveats:</p>\\n<ul>\\n<li>Your API will only accept queries that you've approved, so it's not suitable if you want third parties to run arbitrary queries</li>\\n<li>You must be able to generate a unique ID from each query; e.g. a hash</li>\\n<li>You must use \\\"static GraphQL queries\\\" - that is the queries must be known at build time of your application/webpage, and only the variables fed to those queries can change at run-time</li>\\n<li>You must have a way of sharing these queries between the application and the server</li>\\n<li>You must be careful not to use variables in dangerous places; for example don't write <code class=\\\"language-text\\\">allUsers(first: $myVar)</code> as a malicious attacker could set <code class=\\\"language-text\\\">$myVar</code> to 2147483647 in order to cause your server to process as much data as possible.</li>\\n</ul>\\n<p>PostGraphile currently doesn't have this functionality built in, but it's\\nfairly easy to add it when using PostGraphile as an express middleware, a\\nsimple implementation might look like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> postgraphile <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'postgraphile'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> express <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'express'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> bodyParser <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'body-parser'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> app <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">express</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span>bodyParser<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/**** BEGINNING OF CUSTOMIZATION ****/</span>\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">const</span> persistedQueries <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./persistedQueries.json'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"gatsby-highlight-code-line\\\">app<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/graphql'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token comment\\\">// TODO: validate req.body is of the right form</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  req<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span>query <span class=\\\"token operator\\\">=</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">.</span>hasOwnProperty<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>persistedQueries<span class=\\\"token punctuation\\\">,</span> req<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      <span class=\\\"token operator\\\">?</span> persistedQueries<span class=\\\"token punctuation\\\">[</span>req<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">]</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"token comment\\\">/**** END OF CUSTOMIZATION *** */</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">postgraphile</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>i.e. a simple middleware mounted before postgraphile that manipulates the request body.</p>\\n<p>I personally use my forks of Apollo's <code class=\\\"language-text\\\">persistgraphql</code> tools to help me manage\\nthe persisted queries themselves:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/benjie/persistgraphql\\\">https://github.com/benjie/persistgraphql</a></li>\\n<li><a href=\\\"https://github.com/benjie/persistgraphql-webpack-plugin\\\">https://github.com/benjie/persistgraphql-webpack-plugin</a></li>\\n</ul>\\n<p>These forks generate hashes rather than numbers; which make the persisted\\nqueries consistent across multiple builds and applications (website, mobile,\\nbrowser plugin, ...).</p>\\n<p><strong>NOTE</strong>: even if you're using persisted queries, it can be wise to implement\\nthe advanced protections as it enables you to catch unnecessarily expensive\\nqueries before you start facing performance bottlenecks down the line.</p>\\n<h4 id=\\\"advanced\\\"><a href=\\\"#advanced\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Advanced</h4>\\n<p>Using a query whitelist puts the decision in the hands of your engineers\\nwhether a particular query should be accepted or not. Sometimes this isn't\\nenough - it could be that your engineers need guidance to help them avoid\\ncommon pit-falls (e.g. forgetting to put limits on collections they query), or\\nit could be that you wish arbitrary third parties to be able to send queries to\\nyour API without the queries being pre-approved and without the risk of\\nbringing your servers to their knees.</p>\\n<p><strong>You are highly encouraged to purchase the <a href=\\\"/postgraphile/pricing/\\\">Pro Plugin [PRO]</a>,\\nwhich implements these protections in a deeply integrated and PostGraphile\\noptimised way, and has the added benefit of helping sustain development and\\nmaintenance on the project.</strong></p>\\n<p>The following details how the Pro Plugin addresses these issues, including\\nhints on how you might go about solving the issues for yourself. Many of these\\ntechniques can be implemented outside of PostGraphile, for example in an\\nexpress middleware or a nginx reverse proxy between PostGraphile and the\\nclient.</p>\\n<h4 id=\\\"sending-queries-to-read-replicas\\\"><a href=\\\"#sending-queries-to-read-replicas\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Sending queries to read replicas</h4>\\n<p>Probably the most important thing regarding scalability is making sure that your\\nmaster database doesn't bow under the pressure of all the clients talking to it.\\nOne way to reduce this pressure is to offload read operations to read replicas.\\nIn GraphQL it's easy to tell if a request will perform any writes or not: if\\nit's a <code class=\\\"language-text\\\">query</code> then it's read-only, if it's a <code class=\\\"language-text\\\">mutation</code> then it may perform\\nwrites.</p>\\n<p>Using <code class=\\\"language-text\\\">--read-only-connection &lt;string&gt;</code> [PRO] you may give PostGraphile a\\nseparate connection string to use for queries, to compliment the connection\\nstring passed via <code class=\\\"language-text\\\">--connection</code> which will now be used only for mutations.</p>\\n<p>(If you're using middleware, then you'll want to pass a read-only pool to the\\n<code class=\\\"language-text\\\">readReplicaPgPool</code>[PRO] option instead.)</p>\\n<blockquote>\\n<p>NOTE: We don't currently support the multi-host syntax for this connection\\nstring, but you can use a PostgreSQL proxy such a PgPool or PgBouncer between\\nPostGraphile and your database to enable connecting to multiple read\\nreplicas.</p>\\n</blockquote>\\n<h4 id=\\\"pagination-caps\\\"><a href=\\\"#pagination-caps\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Pagination caps</h4>\\n<p>It's unlikely that you want users to request <code class=\\\"language-text\\\">allUsers</code> and receive back\\nliterally all of the users in the database. More likely you want users to use\\ncursor-based pagination over this connection with <code class=\\\"language-text\\\">first</code> / <code class=\\\"language-text\\\">after</code>. The Pro\\nPlugin introduces the <code class=\\\"language-text\\\">--default-pagination-cap [int]</code> [PRO] option which\\nenables you to enforce a pagination cap on all connections. Whatever number\\nyou pass will be used as the pagination cap, but you can override it on a\\ntable-by-table basis using <a href=\\\"/postgraphile/smart-comments/\\\">smart comments</a> - in this case the <code class=\\\"language-text\\\">@paginationCap</code>[PRO] smart comment.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code class=\\\"language-sql\\\"><span class=\\\"token keyword\\\">comment</span> <span class=\\\"token keyword\\\">on</span> <span class=\\\"token keyword\\\">table</span> users <span class=\\\"token operator\\\">is</span>\\n  E<span class=\\\"token string\\\">'@paginationCap 20\\\\nSomeone who can log in.'</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h4 id=\\\"limiting-graphql-query-depth\\\"><a href=\\\"#limiting-graphql-query-depth\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Limiting GraphQL query depth</h4>\\n<p>Most GraphQL queries tend to be only a few levels deep, queries like the deep\\none at the top of this article are generally not required. You may use\\n<code class=\\\"language-text\\\">--graphql-depth-limit [int]</code> [PRO] to limit the depth of any GraphQL queries\\nthat hit PostGraphile - any deeper than this will be discarded during query\\nvalidation.</p>\\n<h4 id=\\\"experimental-graphql-cost-limit\\\"><a href=\\\"#experimental-graphql-cost-limit\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>[EXPERIMENTAL] GraphQL cost limit</h4>\\n<p>The most powerful way of preventing DOS is to limit the cost of GraphQL queries\\nthat may be executed against your GraphQL server. The Pro Plugin contains a\\nvery early implementation of this technique, but the costs are not very\\naccurate yet. You may enable a cost limit with <code class=\\\"language-text\\\">--graphql-cost-limit [int]</code>\\n[PRO] and the calculated cost of any GraphQL queries will be made available on\\n<code class=\\\"language-text\\\">meta</code> field in the GraphQL payload.</p>\\n<p>If your GraphQL query is seen to be too expensive, here's some techniques to\\nbring the calculated cost down:</p>\\n<ul>\\n<li>If you've not specified a limit (<code class=\\\"language-text\\\">first</code>/<code class=\\\"language-text\\\">last</code>) on a connection, we assume\\nit will return 1000 results. If you're expecting fewer than this, specify the\\nmaximum you'd ever expect to receive.</li>\\n<li>Cost is based on number of expected results (without looking at the\\ndatabase!) so lower your limits on connections.</li>\\n<li>Connections multiply the cost of their children by the number of results\\nthey're expected to return, so lower the limits on connections.</li>\\n<li>Nested fields multiply costs; so pulling a connection inside a connection\\ninside a connection is going to be expensive - to address this, try placing\\nlower <code class=\\\"language-text\\\">first</code>/<code class=\\\"language-text\\\">last</code> values on the connections or avoiding fetching nested\\ndata until you need to display it (split into multiple requests / only\\nrequest the data you need).</li>\\n<li>Subscriptions are automatically seen as 10x as expensive as queries - try\\nand minimise the amount of data your subscription requests.</li>\\n<li>Procedure connections are treated as more expensive than table connections.</li>\\n<li><code class=\\\"language-text\\\">totalCount</code> on a table has a fair cost</li>\\n<li><code class=\\\"language-text\\\">totalCount</code> on a procedure has a higher cost</li>\\n<li>Using <code class=\\\"language-text\\\">pageInfo</code> adds significant cost to connections</li>\\n<li>Computed columns are seen as fairly expensive - in future we may factor in\\nPostgreSQL's <code class=\\\"language-text\\\">COST</code> parameter when figuring this out.</li>\\n</ul>\\n<p>Keep in mind this is a <strong>very early</strong> implementation of cost analysis, there's\\nmuch improvement to be made. Feel free to reach out with any bad costs/queries\\nso we can improve it.</p>\",\"frontmatter\":{\"path\":\"/postgraphile/production/\",\"title\":\"Production Considerations\",\"showExamples\":null}},\"nav\":{\"edges\":[{\"node\":{\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [0] >>> JSON\",\"name\":\"news\",\"sections\":[{\"id\":\"main\",\"title\":\"Archive\"},{\"id\":\"about\",\"title\":\"About\"}],\"pages\":[{\"to\":\"/news/postgraphile-version-4-1/\",\"title\":\"Version 4.1 Announcement\",\"sectionId\":\"main\",\"subpages\":null},{\"to\":\"/news/postgraphile-version-4/\",\"title\":\"Version 4 Announcement\",\"sectionId\":\"main\",\"subpages\":null},{\"to\":\"/news/press-kit/\",\"title\":\"Press Kit\",\"sectionId\":\"about\",\"subpages\":null}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [1] >>> JSON\",\"name\":\"graphile-build\",\"sections\":[{\"id\":\"guides\",\"title\":\"Overview\"},{\"id\":\"library-reference\",\"title\":\"Using the Library\"},{\"id\":\"plugin-reference\",\"title\":\"Building a Plugin\"}],\"pages\":[{\"to\":\"/graphile-build/getting-started/\",\"title\":\"Getting Started\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/graphile-build/plugins/\",\"title\":\"Plugins\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/graphile-build/hooks/\",\"title\":\"Hooks\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/graphile-build/look-ahead/\",\"title\":\"Look Ahead\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/graphile-build/graphile-build/\",\"title\":\"graphile-build\",\"sectionId\":\"library-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/schema-builder/\",\"title\":\"SchemaBuilder\",\"sectionId\":\"library-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/plugin-options/\",\"title\":\"Options\",\"sectionId\":\"library-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/default-plugins/\",\"title\":\"Default Plugins\",\"sectionId\":\"library-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/omitting-plugins/\",\"title\":\"Omitting Plugins\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/graphile-build/all-hooks/\",\"title\":\"All Hooks\",\"sectionId\":\"plugin-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/build-object/\",\"title\":\"Build Object\",\"sectionId\":\"plugin-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/context-object/\",\"title\":\"Context Object\",\"sectionId\":\"plugin-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/schema-builder/\",\"title\":\"SchemaBuilder\",\"sectionId\":\"plugin-reference\",\"subpages\":[]}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [2] >>> JSON\",\"name\":\"postgraphile\",\"sections\":[{\"id\":\"overview\",\"title\":\"Overview\"},{\"id\":\"basics\",\"title\":\"Operation\"},{\"id\":\"customising\",\"title\":\"Customising\"},{\"id\":\"guides\",\"title\":\"Guides\"},{\"id\":\"community\",\"title\":\"Community\"},{\"id\":\"faq\",\"title\":\"FAQ\"}],\"pages\":[{\"to\":\"/postgraphile/introduction/\",\"title\":\"Introduction\",\"sectionId\":\"overview\",\"subpages\":[]},{\"to\":\"/postgraphile/examples/\",\"title\":\"Example Gallery\",\"sectionId\":\"overview\",\"subpages\":[]},{\"to\":\"/postgraphile/usage/\",\"title\":\"Usage\",\"sectionId\":\"overview\",\"subpages\":[{\"to\":\"/postgraphile/usage-cli/\",\"title\":\"CLI Usage\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/usage-library/\",\"title\":\"Library Usage\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/usage-schema/\",\"title\":\"Schema-only Usage\",\"sectionId\":\"overview\"}]},{\"to\":\"/postgraphile/performance/\",\"title\":\"Performance\",\"sectionId\":\"overview\",\"subpages\":[]},{\"to\":\"/postgraphile/requirements/\",\"title\":\"Requirements\",\"sectionId\":\"overview\",\"subpages\":[]},{\"to\":\"/postgraphile/quick-start-guide/\",\"title\":\"Quick Start Guide\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/namespaces/\",\"title\":\"Namespaces\",\"sectionId\":\"basics\",\"subpages\":null},{\"to\":\"/postgraphile/inflection/\",\"title\":\"Inflection\",\"sectionId\":\"basics\",\"subpages\":null},{\"to\":\"/postgraphile/tables/\",\"title\":\"Tables\",\"sectionId\":\"basics\",\"subpages\":[{\"to\":\"/postgraphile/relations/\",\"title\":\"Relations\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/connections/\",\"title\":\"Connections\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/filtering/\",\"title\":\"Filtering\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/crud-mutations/\",\"title\":\"CRUD Mutations\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/node-id/\",\"title\":\"nodeId / id\",\"sectionId\":\"basics\"}]},{\"to\":\"/postgraphile/functions/\",\"title\":\"Functions\",\"sectionId\":\"basics\",\"subpages\":[{\"to\":\"/postgraphile/computed-columns/\",\"title\":\"Computed Columns\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/custom-queries/\",\"title\":\"Custom Queries\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/custom-mutations/\",\"title\":\"Custom Mutations\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/function-restrictions/\",\"title\":\"Function Restrictions\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/function-gallery/\",\"title\":\"Function Gallery\",\"sectionId\":\"customising\"}]},{\"to\":\"/postgraphile/postgresql-indexes/\",\"title\":\"PostgreSQL Indexes\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/security/\",\"title\":\"Security\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/subscriptions/\",\"title\":\"Subscriptions\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/reserved-keywords/\",\"title\":\"Reserved Keywords\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/debugging/\",\"title\":\"Debugging\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/smart-comments/\",\"title\":\"Smart Comments\",\"sectionId\":\"customising\",\"subpages\":[]},{\"to\":\"/postgraphile/extending/\",\"title\":\"Schema Plugins\",\"sectionId\":\"customising\",\"subpages\":[{\"to\":\"/postgraphile/make-add-inflectors-plugin/\",\"title\":\"makeAddInflectorsPlugin\",\"sectionId\":\"customising\"},{\"to\":\"/postgraphile/make-change-nullability-plugin/\",\"title\":\"makeChangeNullabilityPlugin\",\"sectionId\":\"customising\"},{\"to\":\"/postgraphile/make-extend-schema-plugin/\",\"title\":\"makeExtendSchemaPlugin\",\"sectionId\":\"customising\"},{\"to\":\"/postgraphile/make-process-schema-plugin/\",\"title\":\"makeProcessSchemaPlugin\",\"sectionId\":\"customising\"},{\"to\":\"/postgraphile/make-wrap-resolvers-plugin/\",\"title\":\"makeWrapResolversPlugin\",\"sectionId\":\"customising\"},{\"to\":\"/postgraphile/make-plugin-by-combining-plugins/\",\"title\":\"makePluginByCombiningPlugins\",\"sectionId\":\"customising\"},{\"to\":\"/postgraphile/extending-raw/\",\"title\":\"Graphile Engine\",\"sectionId\":\"customising\"},{\"to\":\"/postgraphile/plugin-gallery/\",\"title\":\"Plugin Gallery\",\"sectionId\":\"customising\"},{\"to\":\"/postgraphile/community-plugins/\",\"title\":\"Community Plugins\",\"sectionId\":\"customising\"}]},{\"to\":\"/postgraphile/plugins/\",\"title\":\"Server Plugins\",\"sectionId\":\"customising\",\"subpages\":[]},{\"to\":\"/postgraphile/evaluating/\",\"title\":\"Evaluating for your Project\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/postgresql-schema-design/\",\"title\":\"PostgreSQL Schema Design\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/production/\",\"title\":\"Production Considerations\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/jwt-guide/\",\"title\":\"PostGraphile JWT Guide\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/jwk-verification/\",\"title\":\"JWK Verification (e.g. Auth0)\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/default-role/\",\"title\":\"The Default Role\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/v4-new-features/\",\"title\":\"v4 Feature Guide\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/v3-migration/\",\"title\":\"v3 → v4 Migration Guide\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/testing-jest/\",\"title\":\"Testing with Jest\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/community-contributions/\",\"title\":\"Community Contributions\",\"sectionId\":\"community\",\"subpages\":[]},{\"to\":\"/postgraphile/community-chat/\",\"title\":\"Community Chat\",\"sectionId\":\"community\",\"subpages\":[]},{\"to\":\"/postgraphile/code-of-conduct/\",\"title\":\"Code of Conduct\",\"sectionId\":\"community\",\"subpages\":[]},{\"to\":\"/postgraphile/introspection/\",\"title\":\"Introspection?\",\"sectionId\":\"faq\",\"subpages\":[]},{\"to\":\"/postgraphile/why-nullable/\",\"title\":\"Why is it nullable?\",\"sectionId\":\"faq\",\"subpages\":[]},{\"to\":\"/postgraphile/versioning-policy/\",\"title\":\"Versioning policy?\",\"sectionId\":\"faq\",\"subpages\":[]}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [3] >>> JSON\",\"name\":\"graphile-build-pg\",\"sections\":[{\"id\":\"overview\",\"title\":\"Usage\"}],\"pages\":[{\"to\":\"/graphile-build-pg/settings/\",\"title\":\"Settings\",\"sectionId\":\"overview\",\"subpages\":[]}]}}]},\"examples\":{\"edges\":[{\"node\":{\"category\":\"functions\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [0] >>> JSON\",\"title\":\"Custom queries\",\"examples\":[{\"title\":\"Logged in user field\",\"example\":\"create function viewer()\\nreturns users\\nas $$\\n  select *\\n  from users\\n  where id = current_user_id();\\n  /*\\n   * current_user_id() is a function\\n   * that returns the logged in user's\\n   * id, e.g. by extracting from the JWT\\n   * or indicated via pgSettings.\\n   */\\n$$ language sql stable set search_path from current;\\n\",\"exampleLanguage\":\"sql\",\"result\":\"--- Original GraphQL Schema\\n+++ Modified GraphQL Schema\\n@@ -1467,6 +1467,7 @@\\n \\n   # Chosen by fair dice roll. Guaranteed to be random. XKCD#221\\n   randomNumber: Int\\n+  viewer: User\\n \\n   # Reads a single `Forum` using its globally unique `ID`.\\n   forum(\\n\",\"resultLanguage\":\"diff\"}]}},{\"node\":{\"category\":\"functions\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [1] >>> JSON\",\"title\":\"Computed columns\",\"examples\":[{\"title\":\"User primary email\",\"example\":\"/*\\n * Returns the primary email of the\\n * current user; for all other users\\n * this function will return null.\\n */\\ncreate function \\\"users_primaryEmail\\\"(u users)\\nreturns text\\nas $$\\n  select email\\n  from user_emails\\n  where user_id = current_user_id()\\n  and user_id = u.id\\n  and is_verified is true\\n  order by id asc\\n  limit 1;\\n$$ language sql stable set search_path from current;\\n\",\"exampleLanguage\":\"sql\",\"result\":\"--- Original GraphQL Schema\\n+++ Modified GraphQL Schema\\n@@ -2586,6 +2586,7 @@\\n     # A condition to be used in determining which values should be returned by the collection.\\n     condition: QuizEntryCondition\\n   ): QuizEntriesConnection!\\n+  primaryEmail: String\\n }\\n \\n # Contains information about the login providers this user has used, so that they may disconnect them should they wish.\\n\",\"resultLanguage\":\"diff\"}]}},{\"node\":{\"category\":\"functions\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [2] >>> JSON\",\"title\":\"Custom mutations\",\"examples\":[{\"title\":\"Insert multiple records\",\"example\":\"/**\\n * Occasionally you'll want to create a bunch of rows in different tables in a\\n * single mutation. Here's an example of how to do that.\\n *\\n * Pretend we're registering quiz entries, and we want to store each answer in\\n * its own table as we want to be able to operate on the answers independently\\n * later.\\n *\\n * This means we want:\\n *\\n *  1. A mutation that takes input data for inserting one quiz entry and\\n *  multiple answers.\\n *  2. A function that inserts a new quiz entry, inserts an answer for each\\n *  answer provided in the input data, and connects each answer to the created\\n *  quiz entry.\\n *  3. Finally, we want the function to return the inserted quiz entry itself.\\n */\\n\\n/**\\n * This type is used for input in the mutation\\n */\\ncreate type quiz_entry_input as (\\n  question text,\\n  answer int\\n);\\n\\n/**\\n * Here's the function that gets turned into a \\\"custom mutation\\\"\\n */\\ncreate function add_quiz_entry(\\n  quiz_id int,\\n  answers quiz_entry_input[]\\n)\\nreturns quiz_entry\\nas $$\\n  declare\\n    q quiz_entry;\\n    a quiz_entry_answer;\\n  begin\\n    insert into quiz_entry(user_id, quiz_id)\\n      values(current_user_id(), quiz_id)\\n      returning * into q;\\n\\n    foreach a in array answers loop\\n      insert into quiz_entry_answer(quiz_entry_id, question, answer)\\n        values (quiz_id, a.question, a.answer);\\n    end loop;\\n\\n    return q;\\n  end;\\n$$ language plpgsql volatile strict set search_path from current;\\n\",\"exampleLanguage\":\"sql\",\"result\":\"--- Original GraphQL Schema\\n+++ Modified GraphQL Schema\\n@@ -1,3 +1,35 @@\\n+# All input for the `addQuizEntry` mutation.\\n+input AddQuizEntryInput {\\n+  # An arbitrary string value with no semantic meaning. Will be included in the\\n+  # payload verbatim. May be used to track mutations by the client.\\n+  clientMutationId: String\\n+  quizId: Int!\\n+  answers: [QuizEntryInputRecordInput]!\\n+}\\n+\\n+# The output of our `addQuizEntry` mutation.\\n+type AddQuizEntryPayload {\\n+  # The exact same `clientMutationId` that was provided in the mutation input,\\n+  # unchanged and unused. May be used by a client to track mutations.\\n+  clientMutationId: String\\n+  quizEntry: QuizEntry\\n+\\n+  # Our root query field type. Allows us to run any query from our mutation payload.\\n+  query: Query\\n+\\n+  # Reads a single `User` that is related to this `QuizEntry`.\\n+  user: User\\n+\\n+  # Reads a single `Quiz` that is related to this `QuizEntry`.\\n+  quiz: Quiz\\n+\\n+  # An edge for our `QuizEntry`. May be used by Relay 1.\\n+  quizEntryEdge(\\n+    # The method to use when ordering `QuizEntry`.\\n+    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\\n+  ): QuizEntriesEdge\\n+}\\n+\\n # A floating point number that requires more precision than IEEE 754 binary 64\\n scalar BigFloat\\n \\n@@ -1182,6 +1214,10 @@\\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n     input: DeleteUserByUsernameInput!\\n   ): DeleteUserPayload\\n+  addQuizEntry(\\n+    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n+    input: AddQuizEntryInput!\\n+  ): AddQuizEntryPayload\\n \\n   # If you've forgotten your password, give us one of your email addresses and we'\\n   # send you a reset token. Note this only works if you have added an email address!\\n@@ -1755,6 +1791,12 @@\\n   quizId: Int!\\n }\\n \\n+# An input for mutations affecting `QuizEntryInputRecord`\\n+input QuizEntryInputRecordInput {\\n+  question: String\\n+  answer: Int\\n+}\\n+\\n # Represents an update to a `QuizEntry`. Fields that are set will be updated.\\n input QuizEntryPatch {\\n   id: Int\\n\",\"resultLanguage\":\"diff\"}]}},{\"node\":{\"category\":\"plugins\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [3] >>> JSON\",\"title\":\"Inflector\",\"examples\":[{\"title\":\"PgRenamePatchToPatchSetPlugin\",\"example\":\"/**\\n * Simply renames the `UserPatch` and `PostPatch` type names to be called\\n * `UserPatchSet` and `PostPatchSet` instead.\\n *\\n * Not particularly useful, just an example. ('PatchSet' chosen to minimise\\n * diff to make example clearer.)\\n *\\n * Replaces this inflector:\\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L309-L311\\n */\\nmodule.exports = function PgRenamePatchToPatchSetPlugin(\\n  builder\\n) {\\n  builder.hook(\\n    \\\"inflection\\\",\\n    inflector => ({\\n      // Retain the existing inflectors\\n      ...inflector,\\n\\n      // Override the patchType inflector\\n      patchType(typeName) {\\n        // return this.upperCamelCase(`${typeName}-patch`);\\n        return this.upperCamelCase(\\n          `${typeName}-patch-set`\\n        );\\n      },\\n    })\\n  );\\n};\\n\",\"exampleLanguage\":\"javascript\",\"result\":\"--- Original GraphQL Schema\\n+++ Modified GraphQL Schema\\n@@ -805,7 +805,7 @@\\n }\\n \\n # Represents an update to a `Forum`. Fields that are set will be updated.\\n-input ForumPatch {\\n+input ForumPatchSet {\\n   id: Int\\n \\n   # An URL-safe alias for the `Forum`.\\n@@ -1269,7 +1269,7 @@\\n }\\n \\n # Represents an update to a `Post`. Fields that are set will be updated.\\n-input PostPatch {\\n+input PostPatchSet {\\n   # The body of the `Topic`, which Posts reply to.\\n   body: String\\n }\\n@@ -1689,7 +1689,7 @@\\n }\\n \\n # Represents an update to a `QuizEntryAnswer`. Fields that are set will be updated.\\n-input QuizEntryAnswerPatch {\\n+input QuizEntryAnswerPatchSet {\\n   id: Int\\n   quizEntryId: Int\\n   question: String\\n@@ -1756,7 +1756,7 @@\\n }\\n \\n # Represents an update to a `QuizEntry`. Fields that are set will be updated.\\n-input QuizEntryPatch {\\n+input QuizEntryPatchSet {\\n   id: Int\\n   userId: Int\\n   quizId: Int\\n@@ -1772,7 +1772,7 @@\\n }\\n \\n # Represents an update to a `Quiz`. Fields that are set will be updated.\\n-input QuizPatch {\\n+input QuizPatchSet {\\n   id: Int\\n   name: String\\n   updatedAt: Datetime\\n@@ -1937,7 +1937,7 @@\\n }\\n \\n # Represents an update to a `Topic`. Fields that are set will be updated.\\n-input TopicPatch {\\n+input TopicPatchSet {\\n   id: Int\\n   forumId: Int\\n   authorId: Int\\n@@ -2003,7 +2003,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `Forum` being updated.\\n-  forumPatch: ForumPatch!\\n+  forumPatch: ForumPatchSet!\\n   id: Int!\\n }\\n \\n@@ -2014,7 +2014,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `Forum` being updated.\\n-  forumPatch: ForumPatch!\\n+  forumPatch: ForumPatchSet!\\n \\n   # An URL-safe alias for the `Forum`.\\n   slug: String!\\n@@ -2030,7 +2030,7 @@\\n   nodeId: ID!\\n \\n   # An object where the defined keys will be set on the `Forum` being updated.\\n-  forumPatch: ForumPatch!\\n+  forumPatch: ForumPatchSet!\\n }\\n \\n # The output of our update `Forum` mutation.\\n@@ -2059,7 +2059,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `Post` being updated.\\n-  postPatch: PostPatch!\\n+  postPatch: PostPatchSet!\\n   id: Int!\\n }\\n \\n@@ -2073,7 +2073,7 @@\\n   nodeId: ID!\\n \\n   # An object where the defined keys will be set on the `Post` being updated.\\n-  postPatch: PostPatch!\\n+  postPatch: PostPatchSet!\\n }\\n \\n # The output of our update `Post` mutation.\\n@@ -2108,7 +2108,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `Quiz` being updated.\\n-  quizPatch: QuizPatch!\\n+  quizPatch: QuizPatchSet!\\n   id: Int!\\n }\\n \\n@@ -2119,7 +2119,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\\n-  quizEntryAnswerPatch: QuizEntryAnswerPatch!\\n+  quizEntryAnswerPatch: QuizEntryAnswerPatchSet!\\n   id: Int!\\n }\\n \\n@@ -2133,7 +2133,7 @@\\n   nodeId: ID!\\n \\n   # An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\\n-  quizEntryAnswerPatch: QuizEntryAnswerPatch!\\n+  quizEntryAnswerPatch: QuizEntryAnswerPatchSet!\\n }\\n \\n # The output of our update `QuizEntryAnswer` mutation.\\n@@ -2165,7 +2165,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `QuizEntry` being updated.\\n-  quizEntryPatch: QuizEntryPatch!\\n+  quizEntryPatch: QuizEntryPatchSet!\\n   id: Int!\\n }\\n \\n@@ -2179,7 +2179,7 @@\\n   nodeId: ID!\\n \\n   # An object where the defined keys will be set on the `QuizEntry` being updated.\\n-  quizEntryPatch: QuizEntryPatch!\\n+  quizEntryPatch: QuizEntryPatchSet!\\n }\\n \\n # The output of our update `QuizEntry` mutation.\\n@@ -2217,7 +2217,7 @@\\n   nodeId: ID!\\n \\n   # An object where the defined keys will be set on the `Quiz` being updated.\\n-  quizPatch: QuizPatch!\\n+  quizPatch: QuizPatchSet!\\n }\\n \\n # The output of our update `Quiz` mutation.\\n@@ -2246,7 +2246,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `Topic` being updated.\\n-  topicPatch: TopicPatch!\\n+  topicPatch: TopicPatchSet!\\n   id: Int!\\n }\\n \\n@@ -2260,7 +2260,7 @@\\n   nodeId: ID!\\n \\n   # An object where the defined keys will be set on the `Topic` being updated.\\n-  topicPatch: TopicPatch!\\n+  topicPatch: TopicPatchSet!\\n }\\n \\n # The output of our update `Topic` mutation.\\n@@ -2295,7 +2295,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `UserAuthentication` being updated.\\n-  userAuthenticationPatch: UserAuthenticationPatch!\\n+  userAuthenticationPatch: UserAuthenticationPatchSet!\\n   id: Int!\\n }\\n \\n@@ -2306,7 +2306,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `UserAuthentication` being updated.\\n-  userAuthenticationPatch: UserAuthenticationPatch!\\n+  userAuthenticationPatch: UserAuthenticationPatchSet!\\n \\n   # The login service used, e.g. `twitter` or `github`.\\n   service: String!\\n@@ -2325,7 +2325,7 @@\\n   nodeId: ID!\\n \\n   # An object where the defined keys will be set on the `UserAuthentication` being updated.\\n-  userAuthenticationPatch: UserAuthenticationPatch!\\n+  userAuthenticationPatch: UserAuthenticationPatchSet!\\n }\\n \\n # The output of our update `UserAuthentication` mutation.\\n@@ -2354,7 +2354,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `User` being updated.\\n-  userPatch: UserPatch!\\n+  userPatch: UserPatchSet!\\n \\n   # Unique identifier for the user.\\n   id: Int!\\n@@ -2367,7 +2367,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `User` being updated.\\n-  userPatch: UserPatch!\\n+  userPatch: UserPatchSet!\\n \\n   # Public-facing username (or 'handle') of the user.\\n   username: String!\\n@@ -2380,7 +2380,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `UserEmail` being updated.\\n-  userEmailPatch: UserEmailPatch!\\n+  userEmailPatch: UserEmailPatchSet!\\n   id: Int!\\n }\\n \\n@@ -2391,7 +2391,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `UserEmail` being updated.\\n-  userEmailPatch: UserEmailPatch!\\n+  userEmailPatch: UserEmailPatchSet!\\n   userId: Int!\\n \\n   # The users email address, in `a@b.c` format.\\n@@ -2408,7 +2408,7 @@\\n   nodeId: ID!\\n \\n   # An object where the defined keys will be set on the `UserEmail` being updated.\\n-  userEmailPatch: UserEmailPatch!\\n+  userEmailPatch: UserEmailPatchSet!\\n }\\n \\n # The output of our update `UserEmail` mutation.\\n@@ -2443,7 +2443,7 @@\\n   nodeId: ID!\\n \\n   # An object where the defined keys will be set on the `User` being updated.\\n-  userPatch: UserPatch!\\n+  userPatch: UserPatchSet!\\n }\\n \\n # The output of our update `User` mutation.\\n@@ -2617,7 +2617,7 @@\\n }\\n \\n # Represents an update to a `UserAuthentication`. Fields that are set will be updated.\\n-input UserAuthenticationPatch {\\n+input UserAuthenticationPatchSet {\\n   id: Int\\n \\n   # The login service used, e.g. `twitter` or `github`.\\n@@ -2713,7 +2713,7 @@\\n }\\n \\n # Represents an update to a `UserEmail`. Fields that are set will be updated.\\n-input UserEmailPatch {\\n+input UserEmailPatchSet {\\n   id: Int\\n   userId: Int\\n \\n@@ -2791,7 +2791,7 @@\\n }\\n \\n # Represents an update to a `User`. Fields that are set will be updated.\\n-input UserPatch {\\n+input UserPatchSet {\\n   # Unique identifier for the user.\\n   id: Int\\n \\n\",\"resultLanguage\":\"diff\"},{\"title\":\"PgShortenAllRowsInflectorPlugin\",\"example\":\"/**\\n * Simply renames the `allUsers` and `allPosts` Query fields to `users` and\\n * `posts` respectively.\\n *\\n * Not particularly useful, just an example.\\n *\\n * Replaces this inflector:\\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L460-L464\\n */\\nmodule.exports = function PgShortenAllRowsInflectorPlugin(\\n  builder\\n) {\\n  builder.hook(\\n    \\\"inflection\\\",\\n    inflector => ({\\n      // Retain the existing inflectors\\n      ...inflector,\\n\\n      // Override the allRows inflector\\n      allRows(table) {\\n        return this.camelCase(\\n          // Was: `all-${this.pluralize(this._singularizedTableName(table))}`\\n          // Now:\\n          this.pluralize(\\n            this._singularizedTableName(\\n              table\\n            )\\n          )\\n        );\\n      },\\n    })\\n  );\\n};\\n\",\"exampleLanguage\":\"javascript\",\"result\":\"--- Original GraphQL Schema\\n+++ Modified GraphQL Schema\\n@@ -1333,7 +1333,7 @@\\n   ): Node\\n \\n   # Reads and enables pagination through a set of `Forum`.\\n-  allForums(\\n+  forums(\\n     # Only read the first `n` values of the set.\\n     first: Int\\n \\n@@ -1358,7 +1358,7 @@\\n   ): ForumsConnection\\n \\n   # Reads and enables pagination through a set of `Quiz`.\\n-  allQuizzes(\\n+  quizzes(\\n     # Only read the first `n` values of the set.\\n     first: Int\\n \\n@@ -1383,7 +1383,7 @@\\n   ): QuizzesConnection\\n \\n   # Reads and enables pagination through a set of `QuizEntry`.\\n-  allQuizEntries(\\n+  quizEntries(\\n     # Only read the first `n` values of the set.\\n     first: Int\\n \\n@@ -1408,7 +1408,7 @@\\n   ): QuizEntriesConnection\\n \\n   # Reads and enables pagination through a set of `QuizEntryAnswer`.\\n-  allQuizEntryAnswers(\\n+  quizEntryAnswers(\\n     # Only read the first `n` values of the set.\\n     first: Int\\n \\n\",\"resultLanguage\":\"diff\"}]}},{\"node\":{\"category\":\"plugins\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [4] >>> JSON\",\"title\":\"Types\",\"examples\":[{\"title\":\"PgNumericToFloatPlugin\",\"example\":\"/**\\n * Use of this plugin is NOT recommended, please see\\n * PgSmallNumericToFloatPlugin for a more appropriate replacement if you need\\n * one.\\n *\\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\\n * for *all* DECIMAL / NUMERIC values, for making PostGraphile v4 slightly more\\n * backwards-compatible with v3.\\n *\\n * It's generally a bad idea to use floating point numbers to represent\\n * arbitrary precision numbers such as NUMERIC because loss of precision can\\n * occur.\\n */\\nmodule.exports = function PgNumericToFloatPlugin(\\n  builder\\n) {\\n  builder.hook(\\\"build\\\", build => {\\n    // Register a type handler for NUMERIC / DECIMAL (oid = 1700), always\\n    // returning the GraphQLFloat type\\n    build.pgRegisterGqlTypeByTypeId(\\n      \\\"1700\\\",\\n      () => build.graphql.GraphQLFloat\\n    );\\n    return build;\\n  });\\n};\\n\",\"exampleLanguage\":\"javascript\",\"result\":\"--- Original GraphQL Schema\\n+++ Modified GraphQL Schema\\n@@ -1,6 +1,3 @@\\n-# A floating point number that requires more precision than IEEE 754 binary 64\\n-scalar BigFloat\\n-\\n # All input for the create `Forum` mutation.\\n input CreateForumInput {\\n   # An arbitrary string value with no semantic meaning. Will be included in the\\n@@ -1529,8 +1526,8 @@\\n   id: Int!\\n   name: String!\\n   updatedAt: Datetime!\\n-  precision12Scale2: BigFloat\\n-  precision200Scale100: BigFloat\\n+  precision12Scale2: Float\\n+  precision200Scale100: Float\\n \\n   # Reads and enables pagination through a set of `QuizEntry`.\\n   quizEntries(\\n@@ -1570,10 +1567,10 @@\\n   updatedAt: Datetime\\n \\n   # Checks for equality with the object’s `precision12Scale2` field.\\n-  precision12Scale2: BigFloat\\n+  precision12Scale2: Float\\n \\n   # Checks for equality with the object’s `precision200Scale100` field.\\n-  precision200Scale100: BigFloat\\n+  precision200Scale100: Float\\n }\\n \\n # A connection to a list of `QuizEntry` values.\\n@@ -1767,8 +1764,8 @@\\n   id: Int\\n   name: String!\\n   updatedAt: Datetime\\n-  precision12Scale2: BigFloat\\n-  precision200Scale100: BigFloat\\n+  precision12Scale2: Float\\n+  precision200Scale100: Float\\n }\\n \\n # Represents an update to a `Quiz`. Fields that are set will be updated.\\n@@ -1776,8 +1773,8 @@\\n   id: Int\\n   name: String\\n   updatedAt: Datetime\\n-  precision12Scale2: BigFloat\\n-  precision200Scale100: BigFloat\\n+  precision12Scale2: Float\\n+  precision200Scale100: Float\\n }\\n \\n # A connection to a list of `Quiz` values.\\n\",\"resultLanguage\":\"diff\"},{\"title\":\"PgSmallNumericToFloatPlugin\",\"example\":\"/**\\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\\n * for DECIMAL / NUMERIC values that have a precision and scale under the given\\n * limits (currently 12 and 2 respectively).\\n *\\n * It's generally a bad idea to use floating point numbers to represent\\n * arbitrary precision numbers such as NUMERIC because loss of precision can\\n * occur; however some systems are okay with this compromise.\\n */\\nmodule.exports = function PgSmallNumericToFloatPlugin(\\n  builder,\\n  {\\n    pgNumericToFloatPrecisionCap = 12,\\n    pgNumericToFloatScaleCap = 2,\\n  }\\n) {\\n  builder.hook(\\\"build\\\", build => {\\n    // Register a type handler for NUMERIC / DECIMAL (oid = 1700)\\n    build.pgRegisterGqlTypeByTypeId(\\n      \\\"1700\\\",\\n      (_set, modifier) => {\\n        if (\\n          modifier &&\\n          typeof modifier ===\\n            \\\"number\\\" &&\\n          modifier > 0\\n        ) {\\n          // Ref: https://stackoverflow.com/a/3351120/141284\\n          const precision =\\n            ((modifier - 4) >> 16) &\\n            65535;\\n          const scale =\\n            (modifier - 4) & 65535;\\n          if (\\n            precision <=\\n              pgNumericToFloatPrecisionCap &&\\n            scale <=\\n              pgNumericToFloatScaleCap\\n          ) {\\n            // This number is no more precise than our cap, so we're declaring\\n            // that we can handle it as a float:\\n            return build.graphql\\n              .GraphQLFloat;\\n          }\\n        }\\n        // If all else fails, let PostGraphile do it's default handling - i.e.\\n        // BigFloat\\n        return null;\\n      }\\n    );\\n\\n    // We didn't modify _init, but we still must return it.\\n    return build;\\n  });\\n};\\n\",\"exampleLanguage\":\"javascript\",\"result\":\"--- Original GraphQL Schema\\n+++ Modified GraphQL Schema\\n@@ -1529,7 +1529,7 @@\\n   id: Int!\\n   name: String!\\n   updatedAt: Datetime!\\n-  precision12Scale2: BigFloat\\n+  precision12Scale2: Float\\n   precision200Scale100: BigFloat\\n \\n   # Reads and enables pagination through a set of `QuizEntry`.\\n@@ -1570,7 +1570,7 @@\\n   updatedAt: Datetime\\n \\n   # Checks for equality with the object’s `precision12Scale2` field.\\n-  precision12Scale2: BigFloat\\n+  precision12Scale2: Float\\n \\n   # Checks for equality with the object’s `precision200Scale100` field.\\n   precision200Scale100: BigFloat\\n@@ -1767,7 +1767,7 @@\\n   id: Int\\n   name: String!\\n   updatedAt: Datetime\\n-  precision12Scale2: BigFloat\\n+  precision12Scale2: Float\\n   precision200Scale100: BigFloat\\n }\\n \\n@@ -1776,7 +1776,7 @@\\n   id: Int\\n   name: String\\n   updatedAt: Datetime\\n-  precision12Scale2: BigFloat\\n+  precision12Scale2: Float\\n   precision200Scale100: BigFloat\\n }\\n \\n\",\"resultLanguage\":\"diff\"},{\"title\":\"SetInputObjectDefaultValue\",\"example\":\"/**\\n * This plugin sets a defaultValue on all input object fields that match the\\n * given criteria (specifically the 'create' input types, for columns named\\n * 'name')\\n */\\nmodule.exports = function SetInputObjectDefaultValue(\\n  builder\\n) {\\n  builder.hook(\\n    \\\"GraphQLInputObjectType:fields:field\\\",\\n    (field, build, context) => {\\n      const {\\n        scope: {\\n          isPgRowType,\\n          isInputType,\\n          isPgPatch,\\n          pgFieldIntrospection: attr,\\n        },\\n      } = context;\\n      if (\\n        !isPgRowType ||\\n        !isInputType ||\\n        isPgPatch ||\\n        !attr ||\\n        attr.kind !== \\\"attribute\\\" ||\\n        attr.name !== \\\"name\\\"\\n      ) {\\n        return field;\\n      }\\n\\n      return {\\n        ...field,\\n        type: build.graphql.getNamedType(\\n          field.type\\n        ), // Since it has a default, it can be nullable\\n        defaultValue:\\n          // attr.tags.defaultValue: enables overriding this with a\\n          // `@defaultValue Alice Smith` smart comment\\n          attr.tags.defaultValue ||\\n          \\\"Bobby Tables\\\",\\n      };\\n    }\\n  );\\n};\\n\",\"exampleLanguage\":\"javascript\",\"result\":\"--- Original GraphQL Schema\\n+++ Modified GraphQL Schema\\n@@ -796,7 +796,7 @@\\n   slug: String!\\n \\n   # The name of the `Forum` (indicates its subject matter).\\n-  name: String!\\n+  name: String = \\\"Bobby Tables\\\"\\n \\n   # A brief description of the `Forum` including it's purpose.\\n   description: String\\n@@ -1765,7 +1765,7 @@\\n # An input for mutations affecting `Quiz`\\n input QuizInput {\\n   id: Int\\n-  name: String!\\n+  name: String = \\\"Bobby Tables\\\"\\n   updatedAt: Datetime\\n   precision12Scale2: BigFloat\\n   precision200Scale100: BigFloat\\n@@ -2779,7 +2779,7 @@\\n   username: String!\\n \\n   # Public-facing name (or pseudonym) of the user.\\n-  name: String\\n+  name: String = \\\"Bobby Tables\\\"\\n \\n   # Optional avatar URL.\\n   avatarUrl: String\\n\",\"resultLanguage\":\"diff\"}]}},{\"node\":{\"category\":\"plugins\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [5] >>> JSON\",\"title\":\"Mutation wrappers\",\"examples\":[{\"title\":\"OverrideArgValuePlugin\",\"example\":\"/**\\n * This plugin sets the `input.quizPatch.updatedAt` to the current timestamp in\\n * the `updateQuiz*` mutations IFF it's not already set.\\n */\\nmodule.exports = function SetInputObjectDefaultValue(\\n  builder\\n) {\\n  builder.hook(\\n    \\\"GraphQLObjectType:fields:field\\\",\\n    (field, build, context) => {\\n      const {\\n        scope: {\\n          isPgUpdateMutationField,\\n          pgFieldIntrospection: table,\\n        },\\n      } = context;\\n      if (\\n        !isPgUpdateMutationField ||\\n        table.kind !== \\\"class\\\" ||\\n        table.name !== \\\"quiz\\\"\\n      ) {\\n        return field;\\n      }\\n\\n      const oldResolve =\\n        field.resolve;\\n\\n      return {\\n        ...field,\\n        resolve(\\n          _mutation,\\n          args,\\n          context,\\n          info\\n        ) {\\n          // Override the `updatedAt` field if it's not already set.\\n          if (\\n            args.input.quizPatch\\n              .updatedAt == null\\n          ) {\\n            args.input.quizPatch.updatedAt = new Date().toISOString();\\n          }\\n          return oldResolve(\\n            _mutation,\\n            args,\\n            context,\\n            info\\n          );\\n        },\\n      };\\n    }\\n  );\\n};\\n\\n// Tested via:\\n// npx postgraphile --append-plugins @graphile-contrib/pg-simplify-inflector,`pwd`/examples/plugins/0300_mutation_wrappers/OverrideArgValuePlugin.js -c graphile_org_demo -s app_public\\n\",\"exampleLanguage\":\"javascript\",\"result\":\"\",\"resultLanguage\":\"diff\"}]}},{\"node\":{\"category\":\"plugins\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [6] >>> JSON\",\"title\":\"Customisation\",\"examples\":[{\"title\":\"OmitMutationsByDefaultPlugin\",\"example\":\"/**\\n * This plugin treats any table that doesn't have an `@omit` comment as if it\\n * had `@omit create,update,delete` (thereby disabling mutations).\\n *\\n * Override it by adding a smart comment to the table. To restore all\\n * mutations, do `COMMENT ON my_table IS E'@omit :';` (the `:` is special\\n * syntax for \\\"nothing\\\").\\n */\\nmodule.exports = function OmitMutationsByDefaultPlugin(\\n  builder\\n) {\\n  builder.hook(\\\"build\\\", build => {\\n    const {\\n      pgIntrospectionResultsByKind,\\n    } = build;\\n    pgIntrospectionResultsByKind.class\\n      .filter(\\n        table =>\\n          table.isSelectable &&\\n          table.namespace\\n      )\\n      .forEach(table => {\\n        if (!(\\\"omit\\\" in table.tags)) {\\n          table.tags.omit =\\n            \\\"create,update,delete\\\";\\n        }\\n      });\\n    return build;\\n  });\\n};\\n\\n// Tested via:\\n// npx postgraphile --append-plugins @graphile-contrib/pg-simplify-inflector,`pwd`/examples/plugins/0400_customisation/OmitMutationsByDefaultPlugin.js -c graphile_org_demo -s app_public\\n\",\"exampleLanguage\":\"javascript\",\"result\":\"--- Original GraphQL Schema\\n+++ Modified GraphQL Schema\\n@@ -1,35 +1,6 @@\\n # A floating point number that requires more precision than IEEE 754 binary 64\\n scalar BigFloat\\n \\n-# All input for the create `Forum` mutation.\\n-input CreateForumInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The `Forum` to be created by this mutation.\\n-  forum: ForumInput!\\n-}\\n-\\n-# The output of our create `Forum` mutation.\\n-type CreateForumPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `Forum` that was created by this mutation.\\n-  forum: Forum\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # An edge for our `Forum`. May be used by Relay 1.\\n-  forumEdge(\\n-    # The method to use when ordering `Forum`.\\n-    orderBy: [ForumsOrderBy!] = PRIMARY_KEY_ASC\\n-  ): ForumsEdge\\n-}\\n-\\n # All input for the create `Post` mutation.\\n input CreatePostInput {\\n   # An arbitrary string value with no semantic meaning. Will be included in the\\n@@ -65,102 +36,6 @@\\n   ): PostsEdge\\n }\\n \\n-# All input for the create `QuizEntryAnswer` mutation.\\n-input CreateQuizEntryAnswerInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The `QuizEntryAnswer` to be created by this mutation.\\n-  quizEntryAnswer: QuizEntryAnswerInput!\\n-}\\n-\\n-# The output of our create `QuizEntryAnswer` mutation.\\n-type CreateQuizEntryAnswerPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `QuizEntryAnswer` that was created by this mutation.\\n-  quizEntryAnswer: QuizEntryAnswer\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\\n-  quizEntry: QuizEntry\\n-\\n-  # An edge for our `QuizEntryAnswer`. May be used by Relay 1.\\n-  quizEntryAnswerEdge(\\n-    # The method to use when ordering `QuizEntryAnswer`.\\n-    orderBy: [QuizEntryAnswersOrderBy!] = PRIMARY_KEY_ASC\\n-  ): QuizEntryAnswersEdge\\n-}\\n-\\n-# All input for the create `QuizEntry` mutation.\\n-input CreateQuizEntryInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The `QuizEntry` to be created by this mutation.\\n-  quizEntry: QuizEntryInput!\\n-}\\n-\\n-# The output of our create `QuizEntry` mutation.\\n-type CreateQuizEntryPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `QuizEntry` that was created by this mutation.\\n-  quizEntry: QuizEntry\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # Reads a single `User` that is related to this `QuizEntry`.\\n-  user: User\\n-\\n-  # Reads a single `Quiz` that is related to this `QuizEntry`.\\n-  quiz: Quiz\\n-\\n-  # An edge for our `QuizEntry`. May be used by Relay 1.\\n-  quizEntryEdge(\\n-    # The method to use when ordering `QuizEntry`.\\n-    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\\n-  ): QuizEntriesEdge\\n-}\\n-\\n-# All input for the create `Quiz` mutation.\\n-input CreateQuizInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The `Quiz` to be created by this mutation.\\n-  quiz: QuizInput!\\n-}\\n-\\n-# The output of our create `Quiz` mutation.\\n-type CreateQuizPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `Quiz` that was created by this mutation.\\n-  quiz: Quiz\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # An edge for our `Quiz`. May be used by Relay 1.\\n-  quizEdge(\\n-    # The method to use when ordering `Quiz`.\\n-    orderBy: [QuizzesOrderBy!] = PRIMARY_KEY_ASC\\n-  ): QuizzesEdge\\n-}\\n-\\n # All input for the create `Topic` mutation.\\n input CreateTopicInput {\\n   # An arbitrary string value with no semantic meaning. Will be included in the\\n@@ -293,54 +168,6 @@\\n # 8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.\\n scalar Datetime\\n \\n-# All input for the `deleteForumById` mutation.\\n-input DeleteForumByIdInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-  id: Int!\\n-}\\n-\\n-# All input for the `deleteForumBySlug` mutation.\\n-input DeleteForumBySlugInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # An URL-safe alias for the `Forum`.\\n-  slug: String!\\n-}\\n-\\n-# All input for the `deleteForum` mutation.\\n-input DeleteForumInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The globally unique `ID` which will identify a single `Forum` to be deleted.\\n-  nodeId: ID!\\n-}\\n-\\n-# The output of our delete `Forum` mutation.\\n-type DeleteForumPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `Forum` that was deleted by this mutation.\\n-  forum: Forum\\n-  deletedForumId: ID\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # An edge for our `Forum`. May be used by Relay 1.\\n-  forumEdge(\\n-    # The method to use when ordering `Forum`.\\n-    orderBy: [ForumsOrderBy!] = PRIMARY_KEY_ASC\\n-  ): ForumsEdge\\n-}\\n-\\n # All input for the `deletePostById` mutation.\\n input DeletePostByIdInput {\\n   # An arbitrary string value with no semantic meaning. Will be included in the\\n@@ -385,129 +212,6 @@\\n   ): PostsEdge\\n }\\n \\n-# All input for the `deleteQuizById` mutation.\\n-input DeleteQuizByIdInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-  id: Int!\\n-}\\n-\\n-# All input for the `deleteQuizEntryAnswerById` mutation.\\n-input DeleteQuizEntryAnswerByIdInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-  id: Int!\\n-}\\n-\\n-# All input for the `deleteQuizEntryAnswer` mutation.\\n-input DeleteQuizEntryAnswerInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The globally unique `ID` which will identify a single `QuizEntryAnswer` to be deleted.\\n-  nodeId: ID!\\n-}\\n-\\n-# The output of our delete `QuizEntryAnswer` mutation.\\n-type DeleteQuizEntryAnswerPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `QuizEntryAnswer` that was deleted by this mutation.\\n-  quizEntryAnswer: QuizEntryAnswer\\n-  deletedQuizEntryAnswerId: ID\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\\n-  quizEntry: QuizEntry\\n-\\n-  # An edge for our `QuizEntryAnswer`. May be used by Relay 1.\\n-  quizEntryAnswerEdge(\\n-    # The method to use when ordering `QuizEntryAnswer`.\\n-    orderBy: [QuizEntryAnswersOrderBy!] = PRIMARY_KEY_ASC\\n-  ): QuizEntryAnswersEdge\\n-}\\n-\\n-# All input for the `deleteQuizEntryById` mutation.\\n-input DeleteQuizEntryByIdInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-  id: Int!\\n-}\\n-\\n-# All input for the `deleteQuizEntry` mutation.\\n-input DeleteQuizEntryInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The globally unique `ID` which will identify a single `QuizEntry` to be deleted.\\n-  nodeId: ID!\\n-}\\n-\\n-# The output of our delete `QuizEntry` mutation.\\n-type DeleteQuizEntryPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `QuizEntry` that was deleted by this mutation.\\n-  quizEntry: QuizEntry\\n-  deletedQuizEntryId: ID\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # Reads a single `User` that is related to this `QuizEntry`.\\n-  user: User\\n-\\n-  # Reads a single `Quiz` that is related to this `QuizEntry`.\\n-  quiz: Quiz\\n-\\n-  # An edge for our `QuizEntry`. May be used by Relay 1.\\n-  quizEntryEdge(\\n-    # The method to use when ordering `QuizEntry`.\\n-    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\\n-  ): QuizEntriesEdge\\n-}\\n-\\n-# All input for the `deleteQuiz` mutation.\\n-input DeleteQuizInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The globally unique `ID` which will identify a single `Quiz` to be deleted.\\n-  nodeId: ID!\\n-}\\n-\\n-# The output of our delete `Quiz` mutation.\\n-type DeleteQuizPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `Quiz` that was deleted by this mutation.\\n-  quiz: Quiz\\n-  deletedQuizId: ID\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # An edge for our `Quiz`. May be used by Relay 1.\\n-  quizEdge(\\n-    # The method to use when ordering `Quiz`.\\n-    orderBy: [QuizzesOrderBy!] = PRIMARY_KEY_ASC\\n-  ): QuizzesEdge\\n-}\\n-\\n # All input for the `deleteTopicById` mutation.\\n input DeleteTopicByIdInput {\\n   # An arbitrary string value with no semantic meaning. Will be included in the\\n@@ -788,38 +492,6 @@\\n   updatedAt: Datetime\\n }\\n \\n-# An input for mutations affecting `Forum`\\n-input ForumInput {\\n-  id: Int\\n-\\n-  # An URL-safe alias for the `Forum`.\\n-  slug: String!\\n-\\n-  # The name of the `Forum` (indicates its subject matter).\\n-  name: String!\\n-\\n-  # A brief description of the `Forum` including it's purpose.\\n-  description: String\\n-  createdAt: Datetime\\n-  updatedAt: Datetime\\n-}\\n-\\n-# Represents an update to a `Forum`. Fields that are set will be updated.\\n-input ForumPatch {\\n-  id: Int\\n-\\n-  # An URL-safe alias for the `Forum`.\\n-  slug: String\\n-\\n-  # The name of the `Forum` (indicates its subject matter).\\n-  name: String\\n-\\n-  # A brief description of the `Forum` including it's purpose.\\n-  description: String\\n-  createdAt: Datetime\\n-  updatedAt: Datetime\\n-}\\n-\\n # A connection to a list of `Forum` values.\\n type ForumsConnection {\\n   # A list of `Forum` objects.\\n@@ -865,36 +537,12 @@\\n \\n # The root mutation type which contains root level fields which mutate data.\\n type Mutation {\\n-  # Creates a single `Forum`.\\n-  createForum(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: CreateForumInput!\\n-  ): CreateForumPayload\\n-\\n   # Creates a single `Post`.\\n   createPost(\\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n     input: CreatePostInput!\\n   ): CreatePostPayload\\n \\n-  # Creates a single `Quiz`.\\n-  createQuiz(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: CreateQuizInput!\\n-  ): CreateQuizPayload\\n-\\n-  # Creates a single `QuizEntry`.\\n-  createQuizEntry(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: CreateQuizEntryInput!\\n-  ): CreateQuizEntryPayload\\n-\\n-  # Creates a single `QuizEntryAnswer`.\\n-  createQuizEntryAnswer(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: CreateQuizEntryAnswerInput!\\n-  ): CreateQuizEntryAnswerPayload\\n-\\n   # Creates a single `Topic`.\\n   createTopic(\\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n@@ -919,24 +567,6 @@\\n     input: CreateUserInput!\\n   ): CreateUserPayload\\n \\n-  # Updates a single `Forum` using its globally unique id and a patch.\\n-  updateForum(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: UpdateForumInput!\\n-  ): UpdateForumPayload\\n-\\n-  # Updates a single `Forum` using a unique key and a patch.\\n-  updateForumById(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: UpdateForumByIdInput!\\n-  ): UpdateForumPayload\\n-\\n-  # Updates a single `Forum` using a unique key and a patch.\\n-  updateForumBySlug(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: UpdateForumBySlugInput!\\n-  ): UpdateForumPayload\\n-\\n   # Updates a single `Post` using its globally unique id and a patch.\\n   updatePost(\\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n@@ -949,42 +579,6 @@\\n     input: UpdatePostByIdInput!\\n   ): UpdatePostPayload\\n \\n-  # Updates a single `Quiz` using its globally unique id and a patch.\\n-  updateQuiz(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: UpdateQuizInput!\\n-  ): UpdateQuizPayload\\n-\\n-  # Updates a single `Quiz` using a unique key and a patch.\\n-  updateQuizById(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: UpdateQuizByIdInput!\\n-  ): UpdateQuizPayload\\n-\\n-  # Updates a single `QuizEntry` using its globally unique id and a patch.\\n-  updateQuizEntry(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: UpdateQuizEntryInput!\\n-  ): UpdateQuizEntryPayload\\n-\\n-  # Updates a single `QuizEntry` using a unique key and a patch.\\n-  updateQuizEntryById(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: UpdateQuizEntryByIdInput!\\n-  ): UpdateQuizEntryPayload\\n-\\n-  # Updates a single `QuizEntryAnswer` using its globally unique id and a patch.\\n-  updateQuizEntryAnswer(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: UpdateQuizEntryAnswerInput!\\n-  ): UpdateQuizEntryAnswerPayload\\n-\\n-  # Updates a single `QuizEntryAnswer` using a unique key and a patch.\\n-  updateQuizEntryAnswerById(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: UpdateQuizEntryAnswerByIdInput!\\n-  ): UpdateQuizEntryAnswerPayload\\n-\\n   # Updates a single `Topic` using its globally unique id and a patch.\\n   updateTopic(\\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n@@ -1051,24 +645,6 @@\\n     input: UpdateUserByUsernameInput!\\n   ): UpdateUserPayload\\n \\n-  # Deletes a single `Forum` using its globally unique id.\\n-  deleteForum(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: DeleteForumInput!\\n-  ): DeleteForumPayload\\n-\\n-  # Deletes a single `Forum` using a unique key.\\n-  deleteForumById(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: DeleteForumByIdInput!\\n-  ): DeleteForumPayload\\n-\\n-  # Deletes a single `Forum` using a unique key.\\n-  deleteForumBySlug(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: DeleteForumBySlugInput!\\n-  ): DeleteForumPayload\\n-\\n   # Deletes a single `Post` using its globally unique id.\\n   deletePost(\\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n@@ -1081,42 +657,6 @@\\n     input: DeletePostByIdInput!\\n   ): DeletePostPayload\\n \\n-  # Deletes a single `Quiz` using its globally unique id.\\n-  deleteQuiz(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: DeleteQuizInput!\\n-  ): DeleteQuizPayload\\n-\\n-  # Deletes a single `Quiz` using a unique key.\\n-  deleteQuizById(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: DeleteQuizByIdInput!\\n-  ): DeleteQuizPayload\\n-\\n-  # Deletes a single `QuizEntry` using its globally unique id.\\n-  deleteQuizEntry(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: DeleteQuizEntryInput!\\n-  ): DeleteQuizEntryPayload\\n-\\n-  # Deletes a single `QuizEntry` using a unique key.\\n-  deleteQuizEntryById(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: DeleteQuizEntryByIdInput!\\n-  ): DeleteQuizEntryPayload\\n-\\n-  # Deletes a single `QuizEntryAnswer` using its globally unique id.\\n-  deleteQuizEntryAnswer(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: DeleteQuizEntryAnswerInput!\\n-  ): DeleteQuizEntryAnswerPayload\\n-\\n-  # Deletes a single `QuizEntryAnswer` using a unique key.\\n-  deleteQuizEntryAnswerById(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: DeleteQuizEntryAnswerByIdInput!\\n-  ): DeleteQuizEntryAnswerPayload\\n-\\n   # Deletes a single `Topic` using its globally unique id.\\n   deleteTopic(\\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n@@ -1680,22 +1220,6 @@\\n   answer: Int\\n }\\n \\n-# An input for mutations affecting `QuizEntryAnswer`\\n-input QuizEntryAnswerInput {\\n-  id: Int\\n-  quizEntryId: Int!\\n-  question: String!\\n-  answer: Int\\n-}\\n-\\n-# Represents an update to a `QuizEntryAnswer`. Fields that are set will be updated.\\n-input QuizEntryAnswerPatch {\\n-  id: Int\\n-  quizEntryId: Int\\n-  question: String\\n-  answer: Int\\n-}\\n-\\n # A connection to a list of `QuizEntryAnswer` values.\\n type QuizEntryAnswersConnection {\\n   # A list of `QuizEntryAnswer` objects.\\n@@ -1748,38 +1272,6 @@\\n   quizId: Int\\n }\\n \\n-# An input for mutations affecting `QuizEntry`\\n-input QuizEntryInput {\\n-  id: Int\\n-  userId: Int!\\n-  quizId: Int!\\n-}\\n-\\n-# Represents an update to a `QuizEntry`. Fields that are set will be updated.\\n-input QuizEntryPatch {\\n-  id: Int\\n-  userId: Int\\n-  quizId: Int\\n-}\\n-\\n-# An input for mutations affecting `Quiz`\\n-input QuizInput {\\n-  id: Int\\n-  name: String!\\n-  updatedAt: Datetime\\n-  precision12Scale2: BigFloat\\n-  precision200Scale100: BigFloat\\n-}\\n-\\n-# Represents an update to a `Quiz`. Fields that are set will be updated.\\n-input QuizPatch {\\n-  id: Int\\n-  name: String\\n-  updatedAt: Datetime\\n-  precision12Scale2: BigFloat\\n-  precision200Scale100: BigFloat\\n-}\\n-\\n # A connection to a list of `Quiz` values.\\n type QuizzesConnection {\\n   # A list of `Quiz` objects.\\n@@ -1996,62 +1488,6 @@\\n   PRIMARY_KEY_DESC\\n }\\n \\n-# All input for the `updateForumById` mutation.\\n-input UpdateForumByIdInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # An object where the defined keys will be set on the `Forum` being updated.\\n-  forumPatch: ForumPatch!\\n-  id: Int!\\n-}\\n-\\n-# All input for the `updateForumBySlug` mutation.\\n-input UpdateForumBySlugInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # An object where the defined keys will be set on the `Forum` being updated.\\n-  forumPatch: ForumPatch!\\n-\\n-  # An URL-safe alias for the `Forum`.\\n-  slug: String!\\n-}\\n-\\n-# All input for the `updateForum` mutation.\\n-input UpdateForumInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The globally unique `ID` which will identify a single `Forum` to be updated.\\n-  nodeId: ID!\\n-\\n-  # An object where the defined keys will be set on the `Forum` being updated.\\n-  forumPatch: ForumPatch!\\n-}\\n-\\n-# The output of our update `Forum` mutation.\\n-type UpdateForumPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `Forum` that was updated by this mutation.\\n-  forum: Forum\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # An edge for our `Forum`. May be used by Relay 1.\\n-  forumEdge(\\n-    # The method to use when ordering `Forum`.\\n-    orderBy: [ForumsOrderBy!] = PRIMARY_KEY_ASC\\n-  ): ForumsEdge\\n-}\\n-\\n # All input for the `updatePostById` mutation.\\n input UpdatePostByIdInput {\\n   # An arbitrary string value with no semantic meaning. Will be included in the\\n@@ -2101,144 +1537,6 @@\\n   ): PostsEdge\\n }\\n \\n-# All input for the `updateQuizById` mutation.\\n-input UpdateQuizByIdInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # An object where the defined keys will be set on the `Quiz` being updated.\\n-  quizPatch: QuizPatch!\\n-  id: Int!\\n-}\\n-\\n-# All input for the `updateQuizEntryAnswerById` mutation.\\n-input UpdateQuizEntryAnswerByIdInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\\n-  quizEntryAnswerPatch: QuizEntryAnswerPatch!\\n-  id: Int!\\n-}\\n-\\n-# All input for the `updateQuizEntryAnswer` mutation.\\n-input UpdateQuizEntryAnswerInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The globally unique `ID` which will identify a single `QuizEntryAnswer` to be updated.\\n-  nodeId: ID!\\n-\\n-  # An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\\n-  quizEntryAnswerPatch: QuizEntryAnswerPatch!\\n-}\\n-\\n-# The output of our update `QuizEntryAnswer` mutation.\\n-type UpdateQuizEntryAnswerPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `QuizEntryAnswer` that was updated by this mutation.\\n-  quizEntryAnswer: QuizEntryAnswer\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\\n-  quizEntry: QuizEntry\\n-\\n-  # An edge for our `QuizEntryAnswer`. May be used by Relay 1.\\n-  quizEntryAnswerEdge(\\n-    # The method to use when ordering `QuizEntryAnswer`.\\n-    orderBy: [QuizEntryAnswersOrderBy!] = PRIMARY_KEY_ASC\\n-  ): QuizEntryAnswersEdge\\n-}\\n-\\n-# All input for the `updateQuizEntryById` mutation.\\n-input UpdateQuizEntryByIdInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # An object where the defined keys will be set on the `QuizEntry` being updated.\\n-  quizEntryPatch: QuizEntryPatch!\\n-  id: Int!\\n-}\\n-\\n-# All input for the `updateQuizEntry` mutation.\\n-input UpdateQuizEntryInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The globally unique `ID` which will identify a single `QuizEntry` to be updated.\\n-  nodeId: ID!\\n-\\n-  # An object where the defined keys will be set on the `QuizEntry` being updated.\\n-  quizEntryPatch: QuizEntryPatch!\\n-}\\n-\\n-# The output of our update `QuizEntry` mutation.\\n-type UpdateQuizEntryPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `QuizEntry` that was updated by this mutation.\\n-  quizEntry: QuizEntry\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # Reads a single `User` that is related to this `QuizEntry`.\\n-  user: User\\n-\\n-  # Reads a single `Quiz` that is related to this `QuizEntry`.\\n-  quiz: Quiz\\n-\\n-  # An edge for our `QuizEntry`. May be used by Relay 1.\\n-  quizEntryEdge(\\n-    # The method to use when ordering `QuizEntry`.\\n-    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\\n-  ): QuizEntriesEdge\\n-}\\n-\\n-# All input for the `updateQuiz` mutation.\\n-input UpdateQuizInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The globally unique `ID` which will identify a single `Quiz` to be updated.\\n-  nodeId: ID!\\n-\\n-  # An object where the defined keys will be set on the `Quiz` being updated.\\n-  quizPatch: QuizPatch!\\n-}\\n-\\n-# The output of our update `Quiz` mutation.\\n-type UpdateQuizPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `Quiz` that was updated by this mutation.\\n-  quiz: Quiz\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # An edge for our `Quiz`. May be used by Relay 1.\\n-  quizEdge(\\n-    # The method to use when ordering `Quiz`.\\n-    orderBy: [QuizzesOrderBy!] = PRIMARY_KEY_ASC\\n-  ): QuizzesEdge\\n-}\\n-\\n # All input for the `updateTopicById` mutation.\\n input UpdateTopicByIdInput {\\n   # An arbitrary string value with no semantic meaning. Will be included in the\\n\",\"resultLanguage\":\"diff\"}]}},{\"node\":{\"category\":\"queries\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [7] >>> JSON\",\"title\":\"Basic\",\"examples\":[{\"title\":\"Forums\",\"example\":\"{\\n  allForums {\\n    nodes {\\n      nodeId\\n      id\\n      slug\\n      name\\n      description\\n    }\\n  }\\n}\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"allForums\\\": {\\n    \\\"nodes\\\": [\\n      {\\n        \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDFd\\\",\\n        \\\"id\\\": 1,\\n        \\\"slug\\\": \\\"cat-life\\\",\\n        \\\"name\\\": \\\"Cat Life\\\",\\n        \\\"description\\\":\\n          \\\"A forum all about cats and how fluffy they are and how they completely ignore their owners unless there is food. Or yarn.\\\"\\n      },\\n      {\\n        \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDJd\\\",\\n        \\\"id\\\": 2,\\n        \\\"slug\\\": \\\"dog-life\\\",\\n        \\\"name\\\": \\\"Dog Life\\\",\\n        \\\"description\\\": \\\"\\\"\\n      },\\n      {\\n        \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDNd\\\",\\n        \\\"id\\\": 3,\\n        \\\"slug\\\": \\\"slug-life\\\",\\n        \\\"name\\\": \\\"Slug Life\\\",\\n        \\\"description\\\": \\\"\\\"\\n      }\\n    ]\\n  }\\n}\\n\",\"resultLanguage\":\"json\"},{\"title\":\"Forum by slug\",\"example\":\"{\\n  forumBySlug(slug: \\\"slug-life\\\") {\\n    nodeId\\n    id\\n    slug\\n    name\\n    description\\n  }\\n}\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"forumBySlug\\\": {\\n    \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDNd\\\",\\n    \\\"id\\\": 3,\\n    \\\"slug\\\": \\\"slug-life\\\",\\n    \\\"name\\\": \\\"Slug Life\\\",\\n    \\\"description\\\": \\\"\\\"\\n  }\\n}\\n\",\"resultLanguage\":\"json\"}]}},{\"node\":{\"category\":\"queries\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [8] >>> JSON\",\"title\":\"Collections\",\"examples\":[{\"title\":\"First offset\",\"example\":\"{\\n  allForums(first: 1, offset: 1) {\\n    nodes {\\n      nodeId\\n      id\\n      name\\n    }\\n  }\\n}\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"allForums\\\": {\\n    \\\"nodes\\\": [\\n      {\\n        \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDJd\\\",\\n        \\\"id\\\": 2,\\n        \\\"name\\\": \\\"Dog Life\\\"\\n      }\\n    ]\\n  }\\n}\\n\",\"resultLanguage\":\"json\"},{\"title\":\"Relation condition\",\"example\":\"{\\n  forumBySlug(slug: \\\"cat-life\\\") {\\n    nodeId\\n    id\\n    name\\n    topics(\\n      condition: { authorId: 1 }\\n    ) {\\n      nodes {\\n        nodeId\\n        id\\n        title\\n      }\\n    }\\n  }\\n}\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"forumBySlug\\\": {\\n    \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDFd\\\",\\n    \\\"id\\\": 1,\\n    \\\"name\\\": \\\"Cat Life\\\",\\n    \\\"topics\\\": {\\n      \\\"nodes\\\": [\\n        {\\n          \\\"nodeId\\\":\\n            \\\"WyJ0b3BpY3MiLDFd\\\",\\n          \\\"id\\\": 1,\\n          \\\"title\\\": \\\"cats cats cats\\\"\\n        },\\n        {\\n          \\\"nodeId\\\":\\n            \\\"WyJ0b3BpY3MiLDJd\\\",\\n          \\\"id\\\": 2,\\n          \\\"title\\\": \\\"snooze life\\\"\\n        },\\n        {\\n          \\\"nodeId\\\":\\n            \\\"WyJ0b3BpY3MiLDNd\\\",\\n          \\\"id\\\": 3,\\n          \\\"title\\\": \\\"too hot\\\"\\n        }\\n      ]\\n    }\\n  }\\n}\\n\",\"resultLanguage\":\"json\"}]}},{\"node\":{\"category\":\"queries\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [9] >>> JSON\",\"title\":\"Relations\",\"examples\":[{\"title\":\"Forums topics posts\",\"example\":\"{\\n  forumById(id: 1) {\\n    name\\n    topics(\\n      first: 1\\n      orderBy: [CREATED_AT_ASC]\\n    ) {\\n      nodes {\\n        id\\n        title\\n        bodySummary\\n        author {\\n          id\\n          username\\n        }\\n        posts(\\n          first: 1\\n          orderBy: [ID_DESC]\\n        ) {\\n          nodes {\\n            id\\n            author {\\n              id\\n              username\\n            }\\n            body\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"forumById\\\": {\\n    \\\"name\\\": \\\"Cat Life\\\",\\n    \\\"topics\\\": {\\n      \\\"nodes\\\": [\\n        {\\n          \\\"id\\\": 1,\\n          \\\"title\\\": \\\"cats cats cats\\\",\\n          \\\"bodySummary\\\":\\n            \\\"lets discuss cats because t...\\\",\\n          \\\"author\\\": {\\n            \\\"id\\\": 1,\\n            \\\"username\\\": \\\"user\\\"\\n          },\\n          \\\"posts\\\": {\\n            \\\"nodes\\\": [\\n              {\\n                \\\"id\\\": 3,\\n                \\\"author\\\": {\\n                  \\\"id\\\": 1,\\n                  \\\"username\\\": \\\"user\\\"\\n                },\\n                \\\"body\\\":\\n                  \\\"I love it when they completely ignore you until they want something. So much better than dogs am I rite?\\\"\\n              }\\n            ]\\n          }\\n        }\\n      ]\\n    }\\n  }\\n}\\n\",\"resultLanguage\":\"json\"}]}},{\"node\":{\"category\":\"queries\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [10] >>> JSON\",\"title\":\"Mutations\",\"examples\":[{\"title\":\"Create\",\"example\":\"mutation {\\n  createTopic(\\n    input: {\\n      topic: {\\n        forumId: 1\\n        title: \\\"My question relates to mutations...\\\"\\n        body: \\\"How do you write them?\\\"\\n      }\\n    }\\n  ) {\\n    topic {\\n      nodeId\\n      id\\n      forumId\\n      title\\n      body\\n    }\\n  }\\n}\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"createTopic\\\": {\\n    \\\"topic\\\": {\\n      \\\"nodeId\\\": \\\"WyJ0b3BpY3MiLDRd\\\",\\n      \\\"id\\\": 4,\\n      \\\"forumId\\\": 1,\\n      \\\"title\\\":\\n        \\\"My question relates to mutations...\\\",\\n      \\\"body\\\": \\\"How do you write them?\\\"\\n    }\\n  }\\n}\\n\",\"resultLanguage\":\"json\"},{\"title\":\"Update\",\"example\":\"mutation {\\n  updateTopicById(\\n    input: {\\n      id: 1\\n      topicPatch: {\\n        title: \\\"My (edited) title\\\"\\n      }\\n    }\\n  ) {\\n    topic {\\n      nodeId\\n      id\\n      title\\n      body\\n    }\\n  }\\n}\\n\\n# Works for a table like:\\n#\\n#   create table app_public.topics (\\n#     id serial primary key,\\n#     forum_id integer NOT NULL references app_public.forums on delete cascade,\\n#     title text NOT NULL,\\n#     body text DEFAULT ''::text NOT NULL\\n#   );\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"updateTopicById\\\": {\\n    \\\"topic\\\": {\\n      \\\"nodeId\\\": \\\"WyJ0b3BpY3MiLDFd\\\",\\n      \\\"id\\\": 1,\\n      \\\"title\\\": \\\"My (edited) title\\\",\\n      \\\"body\\\":\\n        \\\"lets discuss cats because theyre totally cool\\\"\\n    }\\n  }\\n}\\n\",\"resultLanguage\":\"json\"},{\"title\":\"Delete\",\"example\":\"mutation {\\n  deleteTopicById(input: { id: 1 }) {\\n    deletedTopicId\\n  }\\n}\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"deleteTopicById\\\": {\\n    \\\"deletedTopicId\\\":\\n      \\\"WyJ0b3BpY3MiLDFd\\\"\\n  }\\n}\\n\",\"resultLanguage\":\"json\"}]}},{\"node\":{\"category\":\"queries\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [11] >>> JSON\",\"title\":\"Custom queries\",\"examples\":[{\"title\":\"Single scalar\",\"example\":\"{\\n  randomNumber\\n}\\n\\n# Generated by SQL like:\\n#\\n#  create function app_public.random_number() returns int\\n#  language sql stable\\n#  as $$\\n#    select 4; -- Chosen by fair dice roll. Guaranteed to be random. XKCD#221\\n#  $$;\\n#\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{ \\\"randomNumber\\\": 4 }\\n\",\"resultLanguage\":\"json\"},{\"title\":\"Single row\",\"example\":\"{\\n  currentUser {\\n    nodeId\\n    id\\n    username\\n  }\\n}\\n\\n# Added to the GraphQL schema via\\n# this SQL:\\n#\\n#   create function current_user()\\n#   returns app_public.users\\n#   language sql stable\\n#   as $$\\n#     select users.*\\n#     from app_public.users\\n#     where id = current_user_id();\\n#   $$;\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"currentUser\\\": {\\n    \\\"nodeId\\\": \\\"WyJ1c2VycyIsMV0=\\\",\\n    \\\"id\\\": 1,\\n    \\\"username\\\": \\\"user\\\"\\n  }\\n}\\n\",\"resultLanguage\":\"json\"},{\"title\":\"Rows connection\",\"example\":\"{\\n  forumsAboutCats {\\n    nodes {\\n      nodeId\\n      id\\n      name\\n      slug\\n    }\\n  }\\n}\\n\\n# Created from SQL like:\\n#\\n#  create function app_public.forums_about_cats()\\n#  returns setof app_public.forums\\n#  language sql stable\\n#  as $$\\n#    select *\\n#    from app_public.forums\\n#    where slug like 'cat-%';\\n#  $$;\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"forumsAboutCats\\\": {\\n    \\\"nodes\\\": [\\n      {\\n        \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDFd\\\",\\n        \\\"id\\\": 1,\\n        \\\"name\\\": \\\"Cat Life\\\",\\n        \\\"slug\\\": \\\"cat-life\\\"\\n      }\\n    ]\\n  }\\n}\\n\",\"resultLanguage\":\"json\"}]}},{\"node\":{\"category\":\"queries\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [12] >>> JSON\",\"title\":\"Custom mutations\",\"examples\":[{\"title\":\"Forgot password\",\"example\":\"mutation {\\n  forgotPassword(\\n    input: {\\n      email: \\\"user@example.com\\\"\\n    }\\n  ) {\\n    success\\n  }\\n}\\n\\n# Generated with SQL like this:\\n#\\n#  create function forgot_password(email text)\\n#  returns boolean\\n#  language plpgsql volatile\\n#  as $$\\n#    ...\\n#  $$;\\n#\\n#  -- Optionally rename the result field:\\n#  comment on function\\n#    forgot_password(email text)\\n#    is '@resultFieldName success';\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"forgotPassword\\\": {\\n    \\\"success\\\": true\\n  }\\n}\\n\",\"resultLanguage\":\"json\"}]}},{\"node\":{\"category\":\"queries\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [13] >>> JSON\",\"title\":\"Computed columns\",\"examples\":[{\"title\":\"Topic summary\",\"example\":\"{\\n  topicById(id: 2) {\\n    body\\n    bodySummary\\n  }\\n}\\n\\n# Generated by SQL like:\\n#\\n#  create function app_public.topics_body_summary(\\n#    t app_public.topics,\\n#    max_length int = 30\\n#  )\\n#  returns text\\n#  language sql stable\\n#  as $$\\n#    select case\\n#      when length(t.body) > max_length\\n#      then left(t.body, max_length - 3)\\n#             || '...'\\n#      else t.body\\n#      end;\\n#  $$;\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"topicById\\\": {\\n    \\\"body\\\":\\n      \\\"do you find your cat just sleeps everywhere\\\",\\n    \\\"bodySummary\\\":\\n      \\\"do you find your cat just s...\\\"\\n  }\\n}\\n\",\"resultLanguage\":\"json\"},{\"title\":\"Topic summary with arg\",\"example\":\"{\\n  topicById(id: 2) {\\n    body\\n    bodySummary(maxLength: 20)\\n  }\\n}\\n\\n# Generated by SQL like:\\n#\\n#  create function app_public.topics_body_summary(\\n#    t app_public.topics,\\n#    max_length int = 30\\n#  )\\n#  returns text\\n#  language sql stable\\n#  as $$\\n#    select case\\n#      when length(t.body) > max_length\\n#      then left(t.body, max_length - 3)\\n#             || '...'\\n#      else t.body\\n#      end;\\n#  $$;\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"topicById\\\": {\\n    \\\"body\\\":\\n      \\\"do you find your cat just sleeps everywhere\\\",\\n    \\\"bodySummary\\\":\\n      \\\"do you find your ...\\\"\\n  }\\n}\\n\",\"resultLanguage\":\"json\"}]}}]}},\"pathContext\":{\"layout\":\"page\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---postgraphile-production-8b31fb5e656894ff78bd.js","module.exports = {\"data\":{\"remark\":{\"html\":\"<h2 id=\\\"production-considerations\\\"><a href=\\\"#production-considerations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Production Considerations</h2>\\n<p>When it comes time to deploy your PostGraphile application in production,\\nthere's a few things you'll want to think about including topics such as\\nlogging, security and stability. This article outlines some of the issues\\nyou might face, and how to solve them.</p>\\n<h3 id=\\\"database-access-considerations\\\"><a href=\\\"#database-access-considerations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Database Access Considerations</h3>\\n<p>PostGraphile is just a node app / middleware, so you can deploy it to any\\nnumber of places: Heroku, Now.sh, a VM, a container such as Docker, or of\\ncourse onto bare metal. Typically you won't run PostGraphile on the same\\nhardware/container/VM as the database, so PostGraphile needs to be able to\\nconnect to your database without you putting your DB at risk.</p>\\n<p>A standard way of doing this is to put the DB behind a firewall. However,\\nif you're using a system like Heroku or Now.sh you probably can't do that,\\nso instead you must make your DB accessible to the internet. When doing so\\nhere are a few things we recommend:</p>\\n<ol>\\n<li>Only allow connections over SSL (<code class=\\\"language-text\\\">force_ssl</code> setting)</li>\\n<li>Use a secure username (not <code class=\\\"language-text\\\">root</code>, <code class=\\\"language-text\\\">admin</code>, <code class=\\\"language-text\\\">postgres</code>, etc which are all fairly commonly used)</li>\\n<li>Use a super secure password; you can use a command like this to generate one:\\n<code class=\\\"language-text\\\">openssl rand -base64 30 | tr &#39;+/&#39; &#39;-_&#39;</code></li>\\n<li>Use a non-standard port for your PostgreSQL server if you can (pick a random port number)</li>\\n<li>Use a hard-to-guess hostname, and never reveal the hostname to anyone who doesn't need to know it</li>\\n<li>If possible, limit the IP addresses that can connect to your DB to be those of your hosting provider.</li>\\n</ol>\\n<p>Heroku have some instructions on making RDS available for use under Heroku\\nwhich should also work for Now.sh or any other service:\\n<a href=\\\"https://devcenter.heroku.com/articles/amazon-rds\\\">https://devcenter.heroku.com/articles/amazon-rds</a></p>\\n<h3 id=\\\"common-middleware-considerations\\\"><a href=\\\"#common-middleware-considerations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Common Middleware Considerations</h3>\\n<p>In a production app, you typically want to add a few common enhancements, e.g.</p>\\n<ul>\\n<li>Logging</li>\\n<li>Gzip or similar compression</li>\\n<li>Security protections</li>\\n<li>Rate limiting</li>\\n</ul>\\n<p>Since there's already a lot of options and opinions in this space, and they're\\nnot directly related to the problem of serving GraphQL from your PostgreSQL\\ndatabase, PostGraphile does not include these things by default. We recommend\\nthat you use something like Express middlewares to implement these common\\nrequirements. This is why we recommend <a href=\\\"/postgraphile/usage-library/\\\">using PostGraphile as a\\nlibrary</a> for production usage.</p>\\n<p>Picking the Express (or similar) middlewares that work for you is beyond the\\nscope of this article; below is an example of where to place these middlewares.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> express <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"express\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> postgraphile <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"postgraphile\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> app <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">express</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/* Example middleware you might want to put in front of PostGraphile */</span>\\n<span class=\\\"token comment\\\">// app.use(require('morgan')(...));</span>\\n<span class=\\\"token comment\\\">// app.use(require('compression')({...}));</span>\\n<span class=\\\"token comment\\\">// app.use(require('helmet')({...}));</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">postgraphile</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DATABASE_URL</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">\\\"postgres:///\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">PORT</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3 id=\\\"denial-of-service-considerations\\\"><a href=\\\"#denial-of-service-considerations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Denial of Service Considerations</h3>\\n<p>When you run PostGraphile in production you'll want to ensure that people\\ncannot easily trigger denial of service (DOS) attacks against you. Due to the\\nnature of GraphQL it's easy to construct a small query that could be very\\nexpensive for the server to run, for example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\">allUsers <span class=\\\"token punctuation\\\">{</span>\\n  nodes <span class=\\\"token punctuation\\\">{</span>\\n    postsByAuthorId <span class=\\\"token punctuation\\\">{</span>\\n      nodes <span class=\\\"token punctuation\\\">{</span>\\n        commentsByPostId <span class=\\\"token punctuation\\\">{</span>\\n          userByAuthorId <span class=\\\"token punctuation\\\">{</span>\\n            postsByAuthorId <span class=\\\"token punctuation\\\">{</span>\\n              nodes <span class=\\\"token punctuation\\\">{</span>\\n                commentsByPostId <span class=\\\"token punctuation\\\">{</span>\\n                  userByAuthorId <span class=\\\"token punctuation\\\">{</span>\\n                    postsByAuthorId <span class=\\\"token punctuation\\\">{</span>\\n                      nodes <span class=\\\"token punctuation\\\">{</span>\\n                        commentsByPostId <span class=\\\"token punctuation\\\">{</span>\\n                          userByAuthorId <span class=\\\"token punctuation\\\">{</span>\\n                            id\\n                          <span class=\\\"token punctuation\\\">}</span>\\n                        <span class=\\\"token punctuation\\\">}</span>\\n                      <span class=\\\"token punctuation\\\">}</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                  <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n              <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>There's lots of techniques for protecting your server from these kinds of\\nqueries; a great introduction to this subject is <a href=\\\"https://dev-blog.apollodata.com/securing-your-graphql-api-from-malicious-queries-16130a324a6b\\\">this blog\\npost</a>\\nfrom Apollo.</p>\\n<p>These techniques should be used in conjunction with common HTTP protection\\nmethods such as rate limiting which are typically better implemented at a\\nseparate layer; for example you could use <a href=\\\"https://www.cloudflare.com/rate-limiting/\\\">Cloudflare rate\\nlimiting</a> for this.</p>\\n<h4 id=\\\"simple-query-whitelist-persisted-queries\\\"><a href=\\\"#simple-query-whitelist-persisted-queries\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Simple: Query Whitelist (\\\"persisted queries\\\")</h4>\\n<p>If you do not intend to open your API up to third parties to run arbitrary\\nqueries against then using persisted queries as a query whitelist to protect\\nyour GraphQL endpoint is a good solution. This technique ensures that only the\\nqueries you use in your own applications can be executed on the server (but you\\ncan of course change the variables).</p>\\n<p>This technique has a few caveats:</p>\\n<ul>\\n<li>Your API will only accept queries that you've approved, so it's not suitable if you want third parties to run arbitrary queries</li>\\n<li>You must be able to generate a unique ID from each query; e.g. a hash</li>\\n<li>You must use \\\"static GraphQL queries\\\" - that is the queries must be known at build time of your application/webpage, and only the variables fed to those queries can change at run-time</li>\\n<li>You must have a way of sharing these queries between the application and the server</li>\\n<li>You must be careful not to use variables in dangerous places; for example don't write <code class=\\\"language-text\\\">allUsers(first: $myVar)</code> as a malicious attacker could set <code class=\\\"language-text\\\">$myVar</code> to 2147483647 in order to cause your server to process as much data as possible.</li>\\n</ul>\\n<p>PostGraphile currently doesn't have this functionality built in, but it's\\nfairly easy to add it when using PostGraphile as an express middleware, a\\nsimple implementation might look like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> postgraphile <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'postgraphile'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> express <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'express'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> bodyParser <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'body-parser'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> app <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">express</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span>bodyParser<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/**** BEGINNING OF CUSTOMIZATION ****/</span>\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">const</span> persistedQueries <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./persistedQueries.json'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"gatsby-highlight-code-line\\\">app<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/graphql'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token comment\\\">// TODO: validate req.body is of the right form</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  req<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span>query <span class=\\\"token operator\\\">=</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">.</span>hasOwnProperty<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>persistedQueries<span class=\\\"token punctuation\\\">,</span> req<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      <span class=\\\"token operator\\\">?</span> persistedQueries<span class=\\\"token punctuation\\\">[</span>req<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">]</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"token comment\\\">/**** END OF CUSTOMIZATION *** */</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">postgraphile</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>i.e. a simple middleware mounted before postgraphile that manipulates the request body.</p>\\n<p>I personally use my forks of Apollo's <code class=\\\"language-text\\\">persistgraphql</code> tools to help me manage\\nthe persisted queries themselves:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/benjie/persistgraphql\\\">https://github.com/benjie/persistgraphql</a></li>\\n<li><a href=\\\"https://github.com/benjie/persistgraphql-webpack-plugin\\\">https://github.com/benjie/persistgraphql-webpack-plugin</a></li>\\n</ul>\\n<p>These forks generate hashes rather than numbers; which make the persisted\\nqueries consistent across multiple builds and applications (website, mobile,\\nbrowser plugin, ...).</p>\\n<p><strong>NOTE</strong>: even if you're using persisted queries, it can be wise to implement\\nthe advanced protections as it enables you to catch unnecessarily expensive\\nqueries before you start facing performance bottlenecks down the line.</p>\\n<h4 id=\\\"advanced\\\"><a href=\\\"#advanced\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Advanced</h4>\\n<p>Using a query whitelist puts the decision in the hands of your engineers\\nwhether a particular query should be accepted or not. Sometimes this isn't\\nenough - it could be that your engineers need guidance to help them avoid\\ncommon pit-falls (e.g. forgetting to put limits on collections they query), or\\nit could be that you wish arbitrary third parties to be able to send queries to\\nyour API without the queries being pre-approved and without the risk of\\nbringing your servers to their knees.</p>\\n<p><strong>You are highly encouraged to purchase the <a href=\\\"/postgraphile/pricing/\\\">Pro Plugin [PRO]</a>,\\nwhich implements these protections in a deeply integrated and PostGraphile\\noptimised way, and has the added benefit of helping sustain development and\\nmaintenance on the project.</strong></p>\\n<p>The following details how the Pro Plugin addresses these issues, including\\nhints on how you might go about solving the issues for yourself. Many of these\\ntechniques can be implemented outside of PostGraphile, for example in an\\nexpress middleware or a nginx reverse proxy between PostGraphile and the\\nclient.</p>\\n<h4 id=\\\"sending-queries-to-read-replicas\\\"><a href=\\\"#sending-queries-to-read-replicas\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Sending queries to read replicas</h4>\\n<p>Probably the most important thing regarding scalability is making sure that your\\nmaster database doesn't bow under the pressure of all the clients talking to it.\\nOne way to reduce this pressure is to offload read operations to read replicas.\\nIn GraphQL it's easy to tell if a request will perform any writes or not: if\\nit's a <code class=\\\"language-text\\\">query</code> then it's read-only, if it's a <code class=\\\"language-text\\\">mutation</code> then it may perform\\nwrites.</p>\\n<p>Using <code class=\\\"language-text\\\">--read-only-connection &lt;string&gt;</code> [PRO] you may give PostGraphile a\\nseparate connection string to use for queries, to compliment the connection\\nstring passed via <code class=\\\"language-text\\\">--connection</code> which will now be used only for mutations.</p>\\n<p>(If you're using middleware, then you'll want to pass a read-only pool to the\\n<code class=\\\"language-text\\\">readReplicaPgPool</code>[PRO] option instead.)</p>\\n<blockquote>\\n<p>NOTE: We don't currently support the multi-host syntax for this connection\\nstring, but you can use a PostgreSQL proxy such a PgPool or PgBouncer between\\nPostGraphile and your database to enable connecting to multiple read\\nreplicas.</p>\\n</blockquote>\\n<h4 id=\\\"pagination-caps\\\"><a href=\\\"#pagination-caps\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Pagination caps</h4>\\n<p>It's unlikely that you want users to request <code class=\\\"language-text\\\">allUsers</code> and receive back\\nliterally all of the users in the database. More likely you want users to use\\ncursor-based pagination over this connection with <code class=\\\"language-text\\\">first</code> / <code class=\\\"language-text\\\">after</code>. The Pro\\nPlugin introduces the <code class=\\\"language-text\\\">--default-pagination-cap [int]</code> [PRO] option which\\nenables you to enforce a pagination cap on all connections. Whatever number\\nyou pass will be used as the pagination cap, but you can override it on a\\ntable-by-table basis using <a href=\\\"/postgraphile/smart-comments/\\\">smart comments</a> - in this case the <code class=\\\"language-text\\\">@paginationCap</code>[PRO] smart comment.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code class=\\\"language-sql\\\"><span class=\\\"token keyword\\\">comment</span> <span class=\\\"token keyword\\\">on</span> <span class=\\\"token keyword\\\">table</span> users <span class=\\\"token operator\\\">is</span>\\n  E<span class=\\\"token string\\\">'@paginationCap 20\\\\nSomeone who can log in.'</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h4 id=\\\"limiting-graphql-query-depth\\\"><a href=\\\"#limiting-graphql-query-depth\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Limiting GraphQL query depth</h4>\\n<p>Most GraphQL queries tend to be only a few levels deep, queries like the deep\\none at the top of this article are generally not required. You may use\\n<code class=\\\"language-text\\\">--graphql-depth-limit [int]</code> [PRO] to limit the depth of any GraphQL queries\\nthat hit PostGraphile - any deeper than this will be discarded during query\\nvalidation.</p>\\n<h4 id=\\\"experimental-graphql-cost-limit\\\"><a href=\\\"#experimental-graphql-cost-limit\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>[EXPERIMENTAL] GraphQL cost limit</h4>\\n<p>The most powerful way of preventing DOS is to limit the cost of GraphQL queries\\nthat may be executed against your GraphQL server. The Pro Plugin contains a\\nvery early implementation of this technique, but the costs are not very\\naccurate yet. You may enable a cost limit with <code class=\\\"language-text\\\">--graphql-cost-limit [int]</code>\\n[PRO] and the calculated cost of any GraphQL queries will be made available on\\n<code class=\\\"language-text\\\">meta</code> field in the GraphQL payload.</p>\\n<p>If your GraphQL query is seen to be too expensive, here's some techniques to\\nbring the calculated cost down:</p>\\n<ul>\\n<li>If you've not specified a limit (<code class=\\\"language-text\\\">first</code>/<code class=\\\"language-text\\\">last</code>) on a connection, we assume\\nit will return 1000 results. If you're expecting fewer than this, specify the\\nmaximum you'd ever expect to receive.</li>\\n<li>Cost is based on number of expected results (without looking at the\\ndatabase!) so lower your limits on connections.</li>\\n<li>Connections multiply the cost of their children by the number of results\\nthey're expected to return, so lower the limits on connections.</li>\\n<li>Nested fields multiply costs; so pulling a connection inside a connection\\ninside a connection is going to be expensive - to address this, try placing\\nlower <code class=\\\"language-text\\\">first</code>/<code class=\\\"language-text\\\">last</code> values on the connections or avoiding fetching nested\\ndata until you need to display it (split into multiple requests / only\\nrequest the data you need).</li>\\n<li>Subscriptions are automatically seen as 10x as expensive as queries - try\\nand minimise the amount of data your subscription requests.</li>\\n<li>Procedure connections are treated as more expensive than table connections.</li>\\n<li><code class=\\\"language-text\\\">totalCount</code> on a table has a fair cost</li>\\n<li><code class=\\\"language-text\\\">totalCount</code> on a procedure has a higher cost</li>\\n<li>Using <code class=\\\"language-text\\\">pageInfo</code> adds significant cost to connections</li>\\n<li>Computed columns are seen as fairly expensive - in future we may factor in\\nPostgreSQL's <code class=\\\"language-text\\\">COST</code> parameter when figuring this out.</li>\\n</ul>\\n<p>Keep in mind this is a <strong>very early</strong> implementation of cost analysis, there's\\nmuch improvement to be made. Feel free to reach out with any bad costs/queries\\nso we can improve it.</p>\",\"frontmatter\":{\"path\":\"/postgraphile/production/\",\"title\":\"Production Considerations\",\"showExamples\":null}},\"nav\":{\"edges\":[{\"node\":{\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [0] >>> JSON\",\"name\":\"news\",\"sections\":[{\"id\":\"main\",\"title\":\"Archive\"},{\"id\":\"about\",\"title\":\"About\"}],\"pages\":[{\"to\":\"/news/postgraphile-version-4-1/\",\"title\":\"Version 4.1 Announcement\",\"sectionId\":\"main\",\"subpages\":null},{\"to\":\"/news/postgraphile-version-4/\",\"title\":\"Version 4 Announcement\",\"sectionId\":\"main\",\"subpages\":null},{\"to\":\"/news/press-kit/\",\"title\":\"Press Kit\",\"sectionId\":\"about\",\"subpages\":null}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [1] >>> JSON\",\"name\":\"graphile-build\",\"sections\":[{\"id\":\"guides\",\"title\":\"Overview\"},{\"id\":\"library-reference\",\"title\":\"Using the Library\"},{\"id\":\"plugin-reference\",\"title\":\"Building a Plugin\"}],\"pages\":[{\"to\":\"/graphile-build/getting-started/\",\"title\":\"Getting Started\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/graphile-build/plugins/\",\"title\":\"Plugins\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/graphile-build/hooks/\",\"title\":\"Hooks\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/graphile-build/look-ahead/\",\"title\":\"Look Ahead\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/graphile-build/graphile-build/\",\"title\":\"graphile-build\",\"sectionId\":\"library-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/schema-builder/\",\"title\":\"SchemaBuilder\",\"sectionId\":\"library-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/plugin-options/\",\"title\":\"Options\",\"sectionId\":\"library-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/default-plugins/\",\"title\":\"Default Plugins\",\"sectionId\":\"library-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/omitting-plugins/\",\"title\":\"Omitting Plugins\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/graphile-build/all-hooks/\",\"title\":\"All Hooks\",\"sectionId\":\"plugin-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/build-object/\",\"title\":\"Build Object\",\"sectionId\":\"plugin-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/context-object/\",\"title\":\"Context Object\",\"sectionId\":\"plugin-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/schema-builder/\",\"title\":\"SchemaBuilder\",\"sectionId\":\"plugin-reference\",\"subpages\":[]}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [2] >>> JSON\",\"name\":\"postgraphile\",\"sections\":[{\"id\":\"overview\",\"title\":\"Overview\"},{\"id\":\"basics\",\"title\":\"Operation\"},{\"id\":\"customising\",\"title\":\"Customising\"},{\"id\":\"guides\",\"title\":\"Guides\"},{\"id\":\"community\",\"title\":\"Community\"},{\"id\":\"faq\",\"title\":\"FAQ\"}],\"pages\":[{\"to\":\"/postgraphile/introduction/\",\"title\":\"Introduction\",\"sectionId\":\"overview\",\"subpages\":[]},{\"to\":\"/postgraphile/examples/\",\"title\":\"Example Gallery\",\"sectionId\":\"overview\",\"subpages\":[]},{\"to\":\"/postgraphile/usage/\",\"title\":\"Usage\",\"sectionId\":\"overview\",\"subpages\":[{\"to\":\"/postgraphile/usage-cli/\",\"title\":\"CLI Usage\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/usage-library/\",\"title\":\"Library Usage\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/usage-schema/\",\"title\":\"Schema-only Usage\",\"sectionId\":\"overview\"}]},{\"to\":\"/postgraphile/performance/\",\"title\":\"Performance\",\"sectionId\":\"overview\",\"subpages\":[]},{\"to\":\"/postgraphile/requirements/\",\"title\":\"Requirements\",\"sectionId\":\"overview\",\"subpages\":[]},{\"to\":\"/postgraphile/quick-start-guide/\",\"title\":\"Quick Start Guide\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/namespaces/\",\"title\":\"Namespaces\",\"sectionId\":\"basics\",\"subpages\":null},{\"to\":\"/postgraphile/inflection/\",\"title\":\"Inflection\",\"sectionId\":\"basics\",\"subpages\":null},{\"to\":\"/postgraphile/tables/\",\"title\":\"Tables\",\"sectionId\":\"basics\",\"subpages\":[{\"to\":\"/postgraphile/relations/\",\"title\":\"Relations\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/connections/\",\"title\":\"Connections\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/filtering/\",\"title\":\"Filtering\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/crud-mutations/\",\"title\":\"CRUD Mutations\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/node-id/\",\"title\":\"nodeId / id\",\"sectionId\":\"basics\"}]},{\"to\":\"/postgraphile/functions/\",\"title\":\"Functions\",\"sectionId\":\"basics\",\"subpages\":[{\"to\":\"/postgraphile/computed-columns/\",\"title\":\"Computed Columns\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/custom-queries/\",\"title\":\"Custom Queries\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/custom-mutations/\",\"title\":\"Custom Mutations\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/function-restrictions/\",\"title\":\"Function Restrictions\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/function-gallery/\",\"title\":\"Function Gallery\",\"sectionId\":\"customising\"}]},{\"to\":\"/postgraphile/postgresql-indexes/\",\"title\":\"PostgreSQL Indexes\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/security/\",\"title\":\"Security\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/subscriptions/\",\"title\":\"Subscriptions\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/reserved-keywords/\",\"title\":\"Reserved Keywords\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/debugging/\",\"title\":\"Debugging\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/smart-comments/\",\"title\":\"Smart Comments\",\"sectionId\":\"customising\",\"subpages\":[]},{\"to\":\"/postgraphile/extending/\",\"title\":\"Schema Plugins\",\"sectionId\":\"customising\",\"subpages\":[{\"to\":\"/postgraphile/make-add-inflectors-plugin/\",\"title\":\"makeAddInflectorsPlugin\",\"sectionId\":\"customising\"},{\"to\":\"/postgraphile/make-change-nullability-plugin/\",\"title\":\"makeChangeNullabilityPlugin\",\"sectionId\":\"customising\"},{\"to\":\"/postgraphile/make-extend-schema-plugin/\",\"title\":\"makeExtendSchemaPlugin\",\"sectionId\":\"customising\"},{\"to\":\"/postgraphile/make-process-schema-plugin/\",\"title\":\"makeProcessSchemaPlugin\",\"sectionId\":\"customising\"},{\"to\":\"/postgraphile/make-wrap-resolvers-plugin/\",\"title\":\"makeWrapResolversPlugin\",\"sectionId\":\"customising\"},{\"to\":\"/postgraphile/make-plugin-by-combining-plugins/\",\"title\":\"makePluginByCombiningPlugins\",\"sectionId\":\"customising\"},{\"to\":\"/postgraphile/extending-raw/\",\"title\":\"Graphile Engine\",\"sectionId\":\"customising\"},{\"to\":\"/postgraphile/plugin-gallery/\",\"title\":\"Plugin Gallery\",\"sectionId\":\"customising\"},{\"to\":\"/postgraphile/community-plugins/\",\"title\":\"Community Plugins\",\"sectionId\":\"customising\"}]},{\"to\":\"/postgraphile/plugins/\",\"title\":\"Server Plugins\",\"sectionId\":\"customising\",\"subpages\":[]},{\"to\":\"/postgraphile/evaluating/\",\"title\":\"Evaluating for your Project\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/postgresql-schema-design/\",\"title\":\"PostgreSQL Schema Design\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/production/\",\"title\":\"Production Considerations\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/jwt-guide/\",\"title\":\"PostGraphile JWT Guide\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/jwk-verification/\",\"title\":\"JWK Verification (e.g. Auth0)\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/default-role/\",\"title\":\"The Default Role\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/v4-new-features/\",\"title\":\"v4 Feature Guide\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/v3-migration/\",\"title\":\"v3 → v4 Migration Guide\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/testing-jest/\",\"title\":\"Testing with Jest\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/community-contributions/\",\"title\":\"Community Contributions\",\"sectionId\":\"community\",\"subpages\":[]},{\"to\":\"/postgraphile/community-chat/\",\"title\":\"Community Chat\",\"sectionId\":\"community\",\"subpages\":[]},{\"to\":\"/postgraphile/code-of-conduct/\",\"title\":\"Code of Conduct\",\"sectionId\":\"community\",\"subpages\":[]},{\"to\":\"/postgraphile/introspection/\",\"title\":\"Introspection?\",\"sectionId\":\"faq\",\"subpages\":[]},{\"to\":\"/postgraphile/why-nullable/\",\"title\":\"Why is it nullable?\",\"sectionId\":\"faq\",\"subpages\":[]},{\"to\":\"/postgraphile/versioning-policy/\",\"title\":\"Versioning policy?\",\"sectionId\":\"faq\",\"subpages\":[]}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [3] >>> JSON\",\"name\":\"graphile-build-pg\",\"sections\":[{\"id\":\"overview\",\"title\":\"Usage\"}],\"pages\":[{\"to\":\"/graphile-build-pg/settings/\",\"title\":\"Settings\",\"sectionId\":\"overview\",\"subpages\":[]}]}}]},\"examples\":{\"edges\":[{\"node\":{\"category\":\"functions\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [0] >>> JSON\",\"title\":\"Custom queries\",\"examples\":[{\"title\":\"Logged in user field\",\"example\":\"create function viewer()\\nreturns users\\nas $$\\n  select *\\n  from users\\n  where id = current_user_id();\\n  /*\\n   * current_user_id() is a function\\n   * that returns the logged in user's\\n   * id, e.g. by extracting from the JWT\\n   * or indicated via pgSettings.\\n   */\\n$$ language sql stable set search_path from current;\\n\",\"exampleLanguage\":\"sql\",\"result\":\"--- Original GraphQL Schema\\n+++ Modified GraphQL Schema\\n@@ -1467,6 +1467,7 @@\\n \\n   # Chosen by fair dice roll. Guaranteed to be random. XKCD#221\\n   randomNumber: Int\\n+  viewer: User\\n \\n   # Reads a single `Forum` using its globally unique `ID`.\\n   forum(\\n\",\"resultLanguage\":\"diff\"}]}},{\"node\":{\"category\":\"functions\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [1] >>> JSON\",\"title\":\"Computed columns\",\"examples\":[{\"title\":\"User primary email\",\"example\":\"/*\\n * Returns the primary email of the\\n * current user; for all other users\\n * this function will return null.\\n */\\ncreate function \\\"users_primaryEmail\\\"(u users)\\nreturns text\\nas $$\\n  select email\\n  from user_emails\\n  where user_id = current_user_id()\\n  and user_id = u.id\\n  and is_verified is true\\n  order by id asc\\n  limit 1;\\n$$ language sql stable set search_path from current;\\n\",\"exampleLanguage\":\"sql\",\"result\":\"--- Original GraphQL Schema\\n+++ Modified GraphQL Schema\\n@@ -2586,6 +2586,7 @@\\n     # A condition to be used in determining which values should be returned by the collection.\\n     condition: QuizEntryCondition\\n   ): QuizEntriesConnection!\\n+  primaryEmail: String\\n }\\n \\n # Contains information about the login providers this user has used, so that they may disconnect them should they wish.\\n\",\"resultLanguage\":\"diff\"}]}},{\"node\":{\"category\":\"functions\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [2] >>> JSON\",\"title\":\"Custom mutations\",\"examples\":[{\"title\":\"Insert multiple records\",\"example\":\"/**\\n * Occasionally you'll want to create a bunch of rows in different tables in a\\n * single mutation. Here's an example of how to do that.\\n *\\n * Pretend we're registering quiz entries, and we want to store each answer in\\n * its own table as we want to be able to operate on the answers independently\\n * later.\\n *\\n * This means we want:\\n *\\n *  1. A mutation that takes input data for inserting one quiz entry and\\n *  multiple answers.\\n *  2. A function that inserts a new quiz entry, inserts an answer for each\\n *  answer provided in the input data, and connects each answer to the created\\n *  quiz entry.\\n *  3. Finally, we want the function to return the inserted quiz entry itself.\\n */\\n\\n/**\\n * This type is used for input in the mutation\\n */\\ncreate type quiz_entry_input as (\\n  question text,\\n  answer int\\n);\\n\\n/**\\n * Here's the function that gets turned into a \\\"custom mutation\\\"\\n */\\ncreate function add_quiz_entry(\\n  quiz_id int,\\n  answers quiz_entry_input[]\\n)\\nreturns quiz_entry\\nas $$\\n  declare\\n    q quiz_entry;\\n    a quiz_entry_answer;\\n  begin\\n    insert into quiz_entry(user_id, quiz_id)\\n      values(current_user_id(), quiz_id)\\n      returning * into q;\\n\\n    foreach a in array answers loop\\n      insert into quiz_entry_answer(quiz_entry_id, question, answer)\\n        values (quiz_id, a.question, a.answer);\\n    end loop;\\n\\n    return q;\\n  end;\\n$$ language plpgsql volatile strict set search_path from current;\\n\",\"exampleLanguage\":\"sql\",\"result\":\"--- Original GraphQL Schema\\n+++ Modified GraphQL Schema\\n@@ -1,3 +1,35 @@\\n+# All input for the `addQuizEntry` mutation.\\n+input AddQuizEntryInput {\\n+  # An arbitrary string value with no semantic meaning. Will be included in the\\n+  # payload verbatim. May be used to track mutations by the client.\\n+  clientMutationId: String\\n+  quizId: Int!\\n+  answers: [QuizEntryInputRecordInput]!\\n+}\\n+\\n+# The output of our `addQuizEntry` mutation.\\n+type AddQuizEntryPayload {\\n+  # The exact same `clientMutationId` that was provided in the mutation input,\\n+  # unchanged and unused. May be used by a client to track mutations.\\n+  clientMutationId: String\\n+  quizEntry: QuizEntry\\n+\\n+  # Our root query field type. Allows us to run any query from our mutation payload.\\n+  query: Query\\n+\\n+  # Reads a single `User` that is related to this `QuizEntry`.\\n+  user: User\\n+\\n+  # Reads a single `Quiz` that is related to this `QuizEntry`.\\n+  quiz: Quiz\\n+\\n+  # An edge for our `QuizEntry`. May be used by Relay 1.\\n+  quizEntryEdge(\\n+    # The method to use when ordering `QuizEntry`.\\n+    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\\n+  ): QuizEntriesEdge\\n+}\\n+\\n # A floating point number that requires more precision than IEEE 754 binary 64\\n scalar BigFloat\\n \\n@@ -1182,6 +1214,10 @@\\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n     input: DeleteUserByUsernameInput!\\n   ): DeleteUserPayload\\n+  addQuizEntry(\\n+    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n+    input: AddQuizEntryInput!\\n+  ): AddQuizEntryPayload\\n \\n   # If you've forgotten your password, give us one of your email addresses and we'\\n   # send you a reset token. Note this only works if you have added an email address!\\n@@ -1755,6 +1791,12 @@\\n   quizId: Int!\\n }\\n \\n+# An input for mutations affecting `QuizEntryInputRecord`\\n+input QuizEntryInputRecordInput {\\n+  question: String\\n+  answer: Int\\n+}\\n+\\n # Represents an update to a `QuizEntry`. Fields that are set will be updated.\\n input QuizEntryPatch {\\n   id: Int\\n\",\"resultLanguage\":\"diff\"}]}},{\"node\":{\"category\":\"plugins\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [3] >>> JSON\",\"title\":\"Inflector\",\"examples\":[{\"title\":\"PgRenamePatchToPatchSetPlugin\",\"example\":\"/**\\n * Simply renames the `UserPatch` and `PostPatch` type names to be called\\n * `UserPatchSet` and `PostPatchSet` instead.\\n *\\n * Not particularly useful, just an example. ('PatchSet' chosen to minimise\\n * diff to make example clearer.)\\n *\\n * Replaces this inflector:\\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L309-L311\\n */\\nmodule.exports = function PgRenamePatchToPatchSetPlugin(\\n  builder\\n) {\\n  builder.hook(\\n    \\\"inflection\\\",\\n    inflector => ({\\n      // Retain the existing inflectors\\n      ...inflector,\\n\\n      // Override the patchType inflector\\n      patchType(typeName) {\\n        // return this.upperCamelCase(`${typeName}-patch`);\\n        return this.upperCamelCase(\\n          `${typeName}-patch-set`\\n        );\\n      },\\n    })\\n  );\\n};\\n\",\"exampleLanguage\":\"javascript\",\"result\":\"--- Original GraphQL Schema\\n+++ Modified GraphQL Schema\\n@@ -805,7 +805,7 @@\\n }\\n \\n # Represents an update to a `Forum`. Fields that are set will be updated.\\n-input ForumPatch {\\n+input ForumPatchSet {\\n   id: Int\\n \\n   # An URL-safe alias for the `Forum`.\\n@@ -1269,7 +1269,7 @@\\n }\\n \\n # Represents an update to a `Post`. Fields that are set will be updated.\\n-input PostPatch {\\n+input PostPatchSet {\\n   # The body of the `Topic`, which Posts reply to.\\n   body: String\\n }\\n@@ -1689,7 +1689,7 @@\\n }\\n \\n # Represents an update to a `QuizEntryAnswer`. Fields that are set will be updated.\\n-input QuizEntryAnswerPatch {\\n+input QuizEntryAnswerPatchSet {\\n   id: Int\\n   quizEntryId: Int\\n   question: String\\n@@ -1756,7 +1756,7 @@\\n }\\n \\n # Represents an update to a `QuizEntry`. Fields that are set will be updated.\\n-input QuizEntryPatch {\\n+input QuizEntryPatchSet {\\n   id: Int\\n   userId: Int\\n   quizId: Int\\n@@ -1772,7 +1772,7 @@\\n }\\n \\n # Represents an update to a `Quiz`. Fields that are set will be updated.\\n-input QuizPatch {\\n+input QuizPatchSet {\\n   id: Int\\n   name: String\\n   updatedAt: Datetime\\n@@ -1937,7 +1937,7 @@\\n }\\n \\n # Represents an update to a `Topic`. Fields that are set will be updated.\\n-input TopicPatch {\\n+input TopicPatchSet {\\n   id: Int\\n   forumId: Int\\n   authorId: Int\\n@@ -2003,7 +2003,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `Forum` being updated.\\n-  forumPatch: ForumPatch!\\n+  forumPatch: ForumPatchSet!\\n   id: Int!\\n }\\n \\n@@ -2014,7 +2014,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `Forum` being updated.\\n-  forumPatch: ForumPatch!\\n+  forumPatch: ForumPatchSet!\\n \\n   # An URL-safe alias for the `Forum`.\\n   slug: String!\\n@@ -2030,7 +2030,7 @@\\n   nodeId: ID!\\n \\n   # An object where the defined keys will be set on the `Forum` being updated.\\n-  forumPatch: ForumPatch!\\n+  forumPatch: ForumPatchSet!\\n }\\n \\n # The output of our update `Forum` mutation.\\n@@ -2059,7 +2059,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `Post` being updated.\\n-  postPatch: PostPatch!\\n+  postPatch: PostPatchSet!\\n   id: Int!\\n }\\n \\n@@ -2073,7 +2073,7 @@\\n   nodeId: ID!\\n \\n   # An object where the defined keys will be set on the `Post` being updated.\\n-  postPatch: PostPatch!\\n+  postPatch: PostPatchSet!\\n }\\n \\n # The output of our update `Post` mutation.\\n@@ -2108,7 +2108,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `Quiz` being updated.\\n-  quizPatch: QuizPatch!\\n+  quizPatch: QuizPatchSet!\\n   id: Int!\\n }\\n \\n@@ -2119,7 +2119,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\\n-  quizEntryAnswerPatch: QuizEntryAnswerPatch!\\n+  quizEntryAnswerPatch: QuizEntryAnswerPatchSet!\\n   id: Int!\\n }\\n \\n@@ -2133,7 +2133,7 @@\\n   nodeId: ID!\\n \\n   # An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\\n-  quizEntryAnswerPatch: QuizEntryAnswerPatch!\\n+  quizEntryAnswerPatch: QuizEntryAnswerPatchSet!\\n }\\n \\n # The output of our update `QuizEntryAnswer` mutation.\\n@@ -2165,7 +2165,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `QuizEntry` being updated.\\n-  quizEntryPatch: QuizEntryPatch!\\n+  quizEntryPatch: QuizEntryPatchSet!\\n   id: Int!\\n }\\n \\n@@ -2179,7 +2179,7 @@\\n   nodeId: ID!\\n \\n   # An object where the defined keys will be set on the `QuizEntry` being updated.\\n-  quizEntryPatch: QuizEntryPatch!\\n+  quizEntryPatch: QuizEntryPatchSet!\\n }\\n \\n # The output of our update `QuizEntry` mutation.\\n@@ -2217,7 +2217,7 @@\\n   nodeId: ID!\\n \\n   # An object where the defined keys will be set on the `Quiz` being updated.\\n-  quizPatch: QuizPatch!\\n+  quizPatch: QuizPatchSet!\\n }\\n \\n # The output of our update `Quiz` mutation.\\n@@ -2246,7 +2246,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `Topic` being updated.\\n-  topicPatch: TopicPatch!\\n+  topicPatch: TopicPatchSet!\\n   id: Int!\\n }\\n \\n@@ -2260,7 +2260,7 @@\\n   nodeId: ID!\\n \\n   # An object where the defined keys will be set on the `Topic` being updated.\\n-  topicPatch: TopicPatch!\\n+  topicPatch: TopicPatchSet!\\n }\\n \\n # The output of our update `Topic` mutation.\\n@@ -2295,7 +2295,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `UserAuthentication` being updated.\\n-  userAuthenticationPatch: UserAuthenticationPatch!\\n+  userAuthenticationPatch: UserAuthenticationPatchSet!\\n   id: Int!\\n }\\n \\n@@ -2306,7 +2306,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `UserAuthentication` being updated.\\n-  userAuthenticationPatch: UserAuthenticationPatch!\\n+  userAuthenticationPatch: UserAuthenticationPatchSet!\\n \\n   # The login service used, e.g. `twitter` or `github`.\\n   service: String!\\n@@ -2325,7 +2325,7 @@\\n   nodeId: ID!\\n \\n   # An object where the defined keys will be set on the `UserAuthentication` being updated.\\n-  userAuthenticationPatch: UserAuthenticationPatch!\\n+  userAuthenticationPatch: UserAuthenticationPatchSet!\\n }\\n \\n # The output of our update `UserAuthentication` mutation.\\n@@ -2354,7 +2354,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `User` being updated.\\n-  userPatch: UserPatch!\\n+  userPatch: UserPatchSet!\\n \\n   # Unique identifier for the user.\\n   id: Int!\\n@@ -2367,7 +2367,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `User` being updated.\\n-  userPatch: UserPatch!\\n+  userPatch: UserPatchSet!\\n \\n   # Public-facing username (or 'handle') of the user.\\n   username: String!\\n@@ -2380,7 +2380,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `UserEmail` being updated.\\n-  userEmailPatch: UserEmailPatch!\\n+  userEmailPatch: UserEmailPatchSet!\\n   id: Int!\\n }\\n \\n@@ -2391,7 +2391,7 @@\\n   clientMutationId: String\\n \\n   # An object where the defined keys will be set on the `UserEmail` being updated.\\n-  userEmailPatch: UserEmailPatch!\\n+  userEmailPatch: UserEmailPatchSet!\\n   userId: Int!\\n \\n   # The users email address, in `a@b.c` format.\\n@@ -2408,7 +2408,7 @@\\n   nodeId: ID!\\n \\n   # An object where the defined keys will be set on the `UserEmail` being updated.\\n-  userEmailPatch: UserEmailPatch!\\n+  userEmailPatch: UserEmailPatchSet!\\n }\\n \\n # The output of our update `UserEmail` mutation.\\n@@ -2443,7 +2443,7 @@\\n   nodeId: ID!\\n \\n   # An object where the defined keys will be set on the `User` being updated.\\n-  userPatch: UserPatch!\\n+  userPatch: UserPatchSet!\\n }\\n \\n # The output of our update `User` mutation.\\n@@ -2617,7 +2617,7 @@\\n }\\n \\n # Represents an update to a `UserAuthentication`. Fields that are set will be updated.\\n-input UserAuthenticationPatch {\\n+input UserAuthenticationPatchSet {\\n   id: Int\\n \\n   # The login service used, e.g. `twitter` or `github`.\\n@@ -2713,7 +2713,7 @@\\n }\\n \\n # Represents an update to a `UserEmail`. Fields that are set will be updated.\\n-input UserEmailPatch {\\n+input UserEmailPatchSet {\\n   id: Int\\n   userId: Int\\n \\n@@ -2791,7 +2791,7 @@\\n }\\n \\n # Represents an update to a `User`. Fields that are set will be updated.\\n-input UserPatch {\\n+input UserPatchSet {\\n   # Unique identifier for the user.\\n   id: Int\\n \\n\",\"resultLanguage\":\"diff\"},{\"title\":\"PgShortenAllRowsInflectorPlugin\",\"example\":\"/**\\n * Simply renames the `allUsers` and `allPosts` Query fields to `users` and\\n * `posts` respectively.\\n *\\n * Not particularly useful, just an example.\\n *\\n * Replaces this inflector:\\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L460-L464\\n */\\nmodule.exports = function PgShortenAllRowsInflectorPlugin(\\n  builder\\n) {\\n  builder.hook(\\n    \\\"inflection\\\",\\n    inflector => ({\\n      // Retain the existing inflectors\\n      ...inflector,\\n\\n      // Override the allRows inflector\\n      allRows(table) {\\n        return this.camelCase(\\n          // Was: `all-${this.pluralize(this._singularizedTableName(table))}`\\n          // Now:\\n          this.pluralize(\\n            this._singularizedTableName(\\n              table\\n            )\\n          )\\n        );\\n      },\\n    })\\n  );\\n};\\n\",\"exampleLanguage\":\"javascript\",\"result\":\"--- Original GraphQL Schema\\n+++ Modified GraphQL Schema\\n@@ -1333,7 +1333,7 @@\\n   ): Node\\n \\n   # Reads and enables pagination through a set of `Forum`.\\n-  allForums(\\n+  forums(\\n     # Only read the first `n` values of the set.\\n     first: Int\\n \\n@@ -1358,7 +1358,7 @@\\n   ): ForumsConnection\\n \\n   # Reads and enables pagination through a set of `Quiz`.\\n-  allQuizzes(\\n+  quizzes(\\n     # Only read the first `n` values of the set.\\n     first: Int\\n \\n@@ -1383,7 +1383,7 @@\\n   ): QuizzesConnection\\n \\n   # Reads and enables pagination through a set of `QuizEntry`.\\n-  allQuizEntries(\\n+  quizEntries(\\n     # Only read the first `n` values of the set.\\n     first: Int\\n \\n@@ -1408,7 +1408,7 @@\\n   ): QuizEntriesConnection\\n \\n   # Reads and enables pagination through a set of `QuizEntryAnswer`.\\n-  allQuizEntryAnswers(\\n+  quizEntryAnswers(\\n     # Only read the first `n` values of the set.\\n     first: Int\\n \\n\",\"resultLanguage\":\"diff\"}]}},{\"node\":{\"category\":\"plugins\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [4] >>> JSON\",\"title\":\"Types\",\"examples\":[{\"title\":\"PgNumericToFloatPlugin\",\"example\":\"/**\\n * Use of this plugin is NOT recommended, please see\\n * PgSmallNumericToFloatPlugin for a more appropriate replacement if you need\\n * one.\\n *\\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\\n * for *all* DECIMAL / NUMERIC values, for making PostGraphile v4 slightly more\\n * backwards-compatible with v3.\\n *\\n * It's generally a bad idea to use floating point numbers to represent\\n * arbitrary precision numbers such as NUMERIC because loss of precision can\\n * occur.\\n */\\nmodule.exports = function PgNumericToFloatPlugin(\\n  builder\\n) {\\n  builder.hook(\\\"build\\\", build => {\\n    // Register a type handler for NUMERIC / DECIMAL (oid = 1700), always\\n    // returning the GraphQLFloat type\\n    build.pgRegisterGqlTypeByTypeId(\\n      \\\"1700\\\",\\n      () => build.graphql.GraphQLFloat\\n    );\\n    return build;\\n  });\\n};\\n\",\"exampleLanguage\":\"javascript\",\"result\":\"--- Original GraphQL Schema\\n+++ Modified GraphQL Schema\\n@@ -1,6 +1,3 @@\\n-# A floating point number that requires more precision than IEEE 754 binary 64\\n-scalar BigFloat\\n-\\n # All input for the create `Forum` mutation.\\n input CreateForumInput {\\n   # An arbitrary string value with no semantic meaning. Will be included in the\\n@@ -1529,8 +1526,8 @@\\n   id: Int!\\n   name: String!\\n   updatedAt: Datetime!\\n-  precision12Scale2: BigFloat\\n-  precision200Scale100: BigFloat\\n+  precision12Scale2: Float\\n+  precision200Scale100: Float\\n \\n   # Reads and enables pagination through a set of `QuizEntry`.\\n   quizEntries(\\n@@ -1570,10 +1567,10 @@\\n   updatedAt: Datetime\\n \\n   # Checks for equality with the object’s `precision12Scale2` field.\\n-  precision12Scale2: BigFloat\\n+  precision12Scale2: Float\\n \\n   # Checks for equality with the object’s `precision200Scale100` field.\\n-  precision200Scale100: BigFloat\\n+  precision200Scale100: Float\\n }\\n \\n # A connection to a list of `QuizEntry` values.\\n@@ -1767,8 +1764,8 @@\\n   id: Int\\n   name: String!\\n   updatedAt: Datetime\\n-  precision12Scale2: BigFloat\\n-  precision200Scale100: BigFloat\\n+  precision12Scale2: Float\\n+  precision200Scale100: Float\\n }\\n \\n # Represents an update to a `Quiz`. Fields that are set will be updated.\\n@@ -1776,8 +1773,8 @@\\n   id: Int\\n   name: String\\n   updatedAt: Datetime\\n-  precision12Scale2: BigFloat\\n-  precision200Scale100: BigFloat\\n+  precision12Scale2: Float\\n+  precision200Scale100: Float\\n }\\n \\n # A connection to a list of `Quiz` values.\\n\",\"resultLanguage\":\"diff\"},{\"title\":\"PgSmallNumericToFloatPlugin\",\"example\":\"/**\\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\\n * for DECIMAL / NUMERIC values that have a precision and scale under the given\\n * limits (currently 12 and 2 respectively).\\n *\\n * It's generally a bad idea to use floating point numbers to represent\\n * arbitrary precision numbers such as NUMERIC because loss of precision can\\n * occur; however some systems are okay with this compromise.\\n */\\nmodule.exports = function PgSmallNumericToFloatPlugin(\\n  builder,\\n  {\\n    pgNumericToFloatPrecisionCap = 12,\\n    pgNumericToFloatScaleCap = 2,\\n  }\\n) {\\n  builder.hook(\\\"build\\\", build => {\\n    // Register a type handler for NUMERIC / DECIMAL (oid = 1700)\\n    build.pgRegisterGqlTypeByTypeId(\\n      \\\"1700\\\",\\n      (_set, modifier) => {\\n        if (\\n          modifier &&\\n          typeof modifier ===\\n            \\\"number\\\" &&\\n          modifier > 0\\n        ) {\\n          // Ref: https://stackoverflow.com/a/3351120/141284\\n          const precision =\\n            ((modifier - 4) >> 16) &\\n            65535;\\n          const scale =\\n            (modifier - 4) & 65535;\\n          if (\\n            precision <=\\n              pgNumericToFloatPrecisionCap &&\\n            scale <=\\n              pgNumericToFloatScaleCap\\n          ) {\\n            // This number is no more precise than our cap, so we're declaring\\n            // that we can handle it as a float:\\n            return build.graphql\\n              .GraphQLFloat;\\n          }\\n        }\\n        // If all else fails, let PostGraphile do it's default handling - i.e.\\n        // BigFloat\\n        return null;\\n      }\\n    );\\n\\n    // We didn't modify _init, but we still must return it.\\n    return build;\\n  });\\n};\\n\",\"exampleLanguage\":\"javascript\",\"result\":\"--- Original GraphQL Schema\\n+++ Modified GraphQL Schema\\n@@ -1529,7 +1529,7 @@\\n   id: Int!\\n   name: String!\\n   updatedAt: Datetime!\\n-  precision12Scale2: BigFloat\\n+  precision12Scale2: Float\\n   precision200Scale100: BigFloat\\n \\n   # Reads and enables pagination through a set of `QuizEntry`.\\n@@ -1570,7 +1570,7 @@\\n   updatedAt: Datetime\\n \\n   # Checks for equality with the object’s `precision12Scale2` field.\\n-  precision12Scale2: BigFloat\\n+  precision12Scale2: Float\\n \\n   # Checks for equality with the object’s `precision200Scale100` field.\\n   precision200Scale100: BigFloat\\n@@ -1767,7 +1767,7 @@\\n   id: Int\\n   name: String!\\n   updatedAt: Datetime\\n-  precision12Scale2: BigFloat\\n+  precision12Scale2: Float\\n   precision200Scale100: BigFloat\\n }\\n \\n@@ -1776,7 +1776,7 @@\\n   id: Int\\n   name: String\\n   updatedAt: Datetime\\n-  precision12Scale2: BigFloat\\n+  precision12Scale2: Float\\n   precision200Scale100: BigFloat\\n }\\n \\n\",\"resultLanguage\":\"diff\"},{\"title\":\"SetInputObjectDefaultValue\",\"example\":\"/**\\n * This plugin sets a defaultValue on all input object fields that match the\\n * given criteria (specifically the 'create' input types, for columns named\\n * 'name')\\n */\\nmodule.exports = function SetInputObjectDefaultValue(\\n  builder\\n) {\\n  builder.hook(\\n    \\\"GraphQLInputObjectType:fields:field\\\",\\n    (field, build, context) => {\\n      const {\\n        scope: {\\n          isPgRowType,\\n          isInputType,\\n          isPgPatch,\\n          pgFieldIntrospection: attr,\\n        },\\n      } = context;\\n      if (\\n        !isPgRowType ||\\n        !isInputType ||\\n        isPgPatch ||\\n        !attr ||\\n        attr.kind !== \\\"attribute\\\" ||\\n        attr.name !== \\\"name\\\"\\n      ) {\\n        return field;\\n      }\\n\\n      return {\\n        ...field,\\n        type: build.graphql.getNamedType(\\n          field.type\\n        ), // Since it has a default, it can be nullable\\n        defaultValue:\\n          // attr.tags.defaultValue: enables overriding this with a\\n          // `@defaultValue Alice Smith` smart comment\\n          attr.tags.defaultValue ||\\n          \\\"Bobby Tables\\\",\\n      };\\n    }\\n  );\\n};\\n\",\"exampleLanguage\":\"javascript\",\"result\":\"--- Original GraphQL Schema\\n+++ Modified GraphQL Schema\\n@@ -796,7 +796,7 @@\\n   slug: String!\\n \\n   # The name of the `Forum` (indicates its subject matter).\\n-  name: String!\\n+  name: String = \\\"Bobby Tables\\\"\\n \\n   # A brief description of the `Forum` including it's purpose.\\n   description: String\\n@@ -1765,7 +1765,7 @@\\n # An input for mutations affecting `Quiz`\\n input QuizInput {\\n   id: Int\\n-  name: String!\\n+  name: String = \\\"Bobby Tables\\\"\\n   updatedAt: Datetime\\n   precision12Scale2: BigFloat\\n   precision200Scale100: BigFloat\\n@@ -2779,7 +2779,7 @@\\n   username: String!\\n \\n   # Public-facing name (or pseudonym) of the user.\\n-  name: String\\n+  name: String = \\\"Bobby Tables\\\"\\n \\n   # Optional avatar URL.\\n   avatarUrl: String\\n\",\"resultLanguage\":\"diff\"}]}},{\"node\":{\"category\":\"plugins\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [5] >>> JSON\",\"title\":\"Mutation wrappers\",\"examples\":[{\"title\":\"OverrideArgValuePlugin\",\"example\":\"/**\\n * This plugin sets the `input.quizPatch.updatedAt` to the current timestamp in\\n * the `updateQuiz*` mutations IFF it's not already set.\\n */\\nmodule.exports = function SetInputObjectDefaultValue(\\n  builder\\n) {\\n  builder.hook(\\n    \\\"GraphQLObjectType:fields:field\\\",\\n    (field, build, context) => {\\n      const {\\n        scope: {\\n          isPgUpdateMutationField,\\n          pgFieldIntrospection: table,\\n        },\\n      } = context;\\n      if (\\n        !isPgUpdateMutationField ||\\n        table.kind !== \\\"class\\\" ||\\n        table.name !== \\\"quiz\\\"\\n      ) {\\n        return field;\\n      }\\n\\n      const oldResolve =\\n        field.resolve;\\n\\n      return {\\n        ...field,\\n        resolve(\\n          _mutation,\\n          args,\\n          context,\\n          info\\n        ) {\\n          // Override the `updatedAt` field if it's not already set.\\n          if (\\n            args.input.quizPatch\\n              .updatedAt == null\\n          ) {\\n            args.input.quizPatch.updatedAt = new Date().toISOString();\\n          }\\n          return oldResolve(\\n            _mutation,\\n            args,\\n            context,\\n            info\\n          );\\n        },\\n      };\\n    }\\n  );\\n};\\n\\n// Tested via:\\n// npx postgraphile --append-plugins @graphile-contrib/pg-simplify-inflector,`pwd`/examples/plugins/0300_mutation_wrappers/OverrideArgValuePlugin.js -c graphile_org_demo -s app_public\\n\",\"exampleLanguage\":\"javascript\",\"result\":\"\",\"resultLanguage\":\"diff\"}]}},{\"node\":{\"category\":\"plugins\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [6] >>> JSON\",\"title\":\"Customisation\",\"examples\":[{\"title\":\"OmitMutationsByDefaultPlugin\",\"example\":\"/**\\n * This plugin treats any table that doesn't have an `@omit` comment as if it\\n * had `@omit create,update,delete` (thereby disabling mutations).\\n *\\n * Override it by adding a smart comment to the table. To restore all\\n * mutations, do `COMMENT ON my_table IS E'@omit :';` (the `:` is special\\n * syntax for \\\"nothing\\\").\\n */\\nmodule.exports = function OmitMutationsByDefaultPlugin(\\n  builder\\n) {\\n  builder.hook(\\\"build\\\", build => {\\n    const {\\n      pgIntrospectionResultsByKind,\\n    } = build;\\n    pgIntrospectionResultsByKind.class\\n      .filter(\\n        table =>\\n          table.isSelectable &&\\n          table.namespace\\n      )\\n      .forEach(table => {\\n        if (!(\\\"omit\\\" in table.tags)) {\\n          table.tags.omit =\\n            \\\"create,update,delete\\\";\\n        }\\n      });\\n    return build;\\n  });\\n};\\n\\n// Tested via:\\n// npx postgraphile --append-plugins @graphile-contrib/pg-simplify-inflector,`pwd`/examples/plugins/0400_customisation/OmitMutationsByDefaultPlugin.js -c graphile_org_demo -s app_public\\n\",\"exampleLanguage\":\"javascript\",\"result\":\"--- Original GraphQL Schema\\n+++ Modified GraphQL Schema\\n@@ -1,35 +1,6 @@\\n # A floating point number that requires more precision than IEEE 754 binary 64\\n scalar BigFloat\\n \\n-# All input for the create `Forum` mutation.\\n-input CreateForumInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The `Forum` to be created by this mutation.\\n-  forum: ForumInput!\\n-}\\n-\\n-# The output of our create `Forum` mutation.\\n-type CreateForumPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `Forum` that was created by this mutation.\\n-  forum: Forum\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # An edge for our `Forum`. May be used by Relay 1.\\n-  forumEdge(\\n-    # The method to use when ordering `Forum`.\\n-    orderBy: [ForumsOrderBy!] = PRIMARY_KEY_ASC\\n-  ): ForumsEdge\\n-}\\n-\\n # All input for the create `Post` mutation.\\n input CreatePostInput {\\n   # An arbitrary string value with no semantic meaning. Will be included in the\\n@@ -65,102 +36,6 @@\\n   ): PostsEdge\\n }\\n \\n-# All input for the create `QuizEntryAnswer` mutation.\\n-input CreateQuizEntryAnswerInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The `QuizEntryAnswer` to be created by this mutation.\\n-  quizEntryAnswer: QuizEntryAnswerInput!\\n-}\\n-\\n-# The output of our create `QuizEntryAnswer` mutation.\\n-type CreateQuizEntryAnswerPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `QuizEntryAnswer` that was created by this mutation.\\n-  quizEntryAnswer: QuizEntryAnswer\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\\n-  quizEntry: QuizEntry\\n-\\n-  # An edge for our `QuizEntryAnswer`. May be used by Relay 1.\\n-  quizEntryAnswerEdge(\\n-    # The method to use when ordering `QuizEntryAnswer`.\\n-    orderBy: [QuizEntryAnswersOrderBy!] = PRIMARY_KEY_ASC\\n-  ): QuizEntryAnswersEdge\\n-}\\n-\\n-# All input for the create `QuizEntry` mutation.\\n-input CreateQuizEntryInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The `QuizEntry` to be created by this mutation.\\n-  quizEntry: QuizEntryInput!\\n-}\\n-\\n-# The output of our create `QuizEntry` mutation.\\n-type CreateQuizEntryPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `QuizEntry` that was created by this mutation.\\n-  quizEntry: QuizEntry\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # Reads a single `User` that is related to this `QuizEntry`.\\n-  user: User\\n-\\n-  # Reads a single `Quiz` that is related to this `QuizEntry`.\\n-  quiz: Quiz\\n-\\n-  # An edge for our `QuizEntry`. May be used by Relay 1.\\n-  quizEntryEdge(\\n-    # The method to use when ordering `QuizEntry`.\\n-    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\\n-  ): QuizEntriesEdge\\n-}\\n-\\n-# All input for the create `Quiz` mutation.\\n-input CreateQuizInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The `Quiz` to be created by this mutation.\\n-  quiz: QuizInput!\\n-}\\n-\\n-# The output of our create `Quiz` mutation.\\n-type CreateQuizPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `Quiz` that was created by this mutation.\\n-  quiz: Quiz\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # An edge for our `Quiz`. May be used by Relay 1.\\n-  quizEdge(\\n-    # The method to use when ordering `Quiz`.\\n-    orderBy: [QuizzesOrderBy!] = PRIMARY_KEY_ASC\\n-  ): QuizzesEdge\\n-}\\n-\\n # All input for the create `Topic` mutation.\\n input CreateTopicInput {\\n   # An arbitrary string value with no semantic meaning. Will be included in the\\n@@ -293,54 +168,6 @@\\n # 8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.\\n scalar Datetime\\n \\n-# All input for the `deleteForumById` mutation.\\n-input DeleteForumByIdInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-  id: Int!\\n-}\\n-\\n-# All input for the `deleteForumBySlug` mutation.\\n-input DeleteForumBySlugInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # An URL-safe alias for the `Forum`.\\n-  slug: String!\\n-}\\n-\\n-# All input for the `deleteForum` mutation.\\n-input DeleteForumInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The globally unique `ID` which will identify a single `Forum` to be deleted.\\n-  nodeId: ID!\\n-}\\n-\\n-# The output of our delete `Forum` mutation.\\n-type DeleteForumPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `Forum` that was deleted by this mutation.\\n-  forum: Forum\\n-  deletedForumId: ID\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # An edge for our `Forum`. May be used by Relay 1.\\n-  forumEdge(\\n-    # The method to use when ordering `Forum`.\\n-    orderBy: [ForumsOrderBy!] = PRIMARY_KEY_ASC\\n-  ): ForumsEdge\\n-}\\n-\\n # All input for the `deletePostById` mutation.\\n input DeletePostByIdInput {\\n   # An arbitrary string value with no semantic meaning. Will be included in the\\n@@ -385,129 +212,6 @@\\n   ): PostsEdge\\n }\\n \\n-# All input for the `deleteQuizById` mutation.\\n-input DeleteQuizByIdInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-  id: Int!\\n-}\\n-\\n-# All input for the `deleteQuizEntryAnswerById` mutation.\\n-input DeleteQuizEntryAnswerByIdInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-  id: Int!\\n-}\\n-\\n-# All input for the `deleteQuizEntryAnswer` mutation.\\n-input DeleteQuizEntryAnswerInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The globally unique `ID` which will identify a single `QuizEntryAnswer` to be deleted.\\n-  nodeId: ID!\\n-}\\n-\\n-# The output of our delete `QuizEntryAnswer` mutation.\\n-type DeleteQuizEntryAnswerPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `QuizEntryAnswer` that was deleted by this mutation.\\n-  quizEntryAnswer: QuizEntryAnswer\\n-  deletedQuizEntryAnswerId: ID\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\\n-  quizEntry: QuizEntry\\n-\\n-  # An edge for our `QuizEntryAnswer`. May be used by Relay 1.\\n-  quizEntryAnswerEdge(\\n-    # The method to use when ordering `QuizEntryAnswer`.\\n-    orderBy: [QuizEntryAnswersOrderBy!] = PRIMARY_KEY_ASC\\n-  ): QuizEntryAnswersEdge\\n-}\\n-\\n-# All input for the `deleteQuizEntryById` mutation.\\n-input DeleteQuizEntryByIdInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-  id: Int!\\n-}\\n-\\n-# All input for the `deleteQuizEntry` mutation.\\n-input DeleteQuizEntryInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The globally unique `ID` which will identify a single `QuizEntry` to be deleted.\\n-  nodeId: ID!\\n-}\\n-\\n-# The output of our delete `QuizEntry` mutation.\\n-type DeleteQuizEntryPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `QuizEntry` that was deleted by this mutation.\\n-  quizEntry: QuizEntry\\n-  deletedQuizEntryId: ID\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # Reads a single `User` that is related to this `QuizEntry`.\\n-  user: User\\n-\\n-  # Reads a single `Quiz` that is related to this `QuizEntry`.\\n-  quiz: Quiz\\n-\\n-  # An edge for our `QuizEntry`. May be used by Relay 1.\\n-  quizEntryEdge(\\n-    # The method to use when ordering `QuizEntry`.\\n-    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\\n-  ): QuizEntriesEdge\\n-}\\n-\\n-# All input for the `deleteQuiz` mutation.\\n-input DeleteQuizInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The globally unique `ID` which will identify a single `Quiz` to be deleted.\\n-  nodeId: ID!\\n-}\\n-\\n-# The output of our delete `Quiz` mutation.\\n-type DeleteQuizPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `Quiz` that was deleted by this mutation.\\n-  quiz: Quiz\\n-  deletedQuizId: ID\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # An edge for our `Quiz`. May be used by Relay 1.\\n-  quizEdge(\\n-    # The method to use when ordering `Quiz`.\\n-    orderBy: [QuizzesOrderBy!] = PRIMARY_KEY_ASC\\n-  ): QuizzesEdge\\n-}\\n-\\n # All input for the `deleteTopicById` mutation.\\n input DeleteTopicByIdInput {\\n   # An arbitrary string value with no semantic meaning. Will be included in the\\n@@ -788,38 +492,6 @@\\n   updatedAt: Datetime\\n }\\n \\n-# An input for mutations affecting `Forum`\\n-input ForumInput {\\n-  id: Int\\n-\\n-  # An URL-safe alias for the `Forum`.\\n-  slug: String!\\n-\\n-  # The name of the `Forum` (indicates its subject matter).\\n-  name: String!\\n-\\n-  # A brief description of the `Forum` including it's purpose.\\n-  description: String\\n-  createdAt: Datetime\\n-  updatedAt: Datetime\\n-}\\n-\\n-# Represents an update to a `Forum`. Fields that are set will be updated.\\n-input ForumPatch {\\n-  id: Int\\n-\\n-  # An URL-safe alias for the `Forum`.\\n-  slug: String\\n-\\n-  # The name of the `Forum` (indicates its subject matter).\\n-  name: String\\n-\\n-  # A brief description of the `Forum` including it's purpose.\\n-  description: String\\n-  createdAt: Datetime\\n-  updatedAt: Datetime\\n-}\\n-\\n # A connection to a list of `Forum` values.\\n type ForumsConnection {\\n   # A list of `Forum` objects.\\n@@ -865,36 +537,12 @@\\n \\n # The root mutation type which contains root level fields which mutate data.\\n type Mutation {\\n-  # Creates a single `Forum`.\\n-  createForum(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: CreateForumInput!\\n-  ): CreateForumPayload\\n-\\n   # Creates a single `Post`.\\n   createPost(\\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n     input: CreatePostInput!\\n   ): CreatePostPayload\\n \\n-  # Creates a single `Quiz`.\\n-  createQuiz(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: CreateQuizInput!\\n-  ): CreateQuizPayload\\n-\\n-  # Creates a single `QuizEntry`.\\n-  createQuizEntry(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: CreateQuizEntryInput!\\n-  ): CreateQuizEntryPayload\\n-\\n-  # Creates a single `QuizEntryAnswer`.\\n-  createQuizEntryAnswer(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: CreateQuizEntryAnswerInput!\\n-  ): CreateQuizEntryAnswerPayload\\n-\\n   # Creates a single `Topic`.\\n   createTopic(\\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n@@ -919,24 +567,6 @@\\n     input: CreateUserInput!\\n   ): CreateUserPayload\\n \\n-  # Updates a single `Forum` using its globally unique id and a patch.\\n-  updateForum(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: UpdateForumInput!\\n-  ): UpdateForumPayload\\n-\\n-  # Updates a single `Forum` using a unique key and a patch.\\n-  updateForumById(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: UpdateForumByIdInput!\\n-  ): UpdateForumPayload\\n-\\n-  # Updates a single `Forum` using a unique key and a patch.\\n-  updateForumBySlug(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: UpdateForumBySlugInput!\\n-  ): UpdateForumPayload\\n-\\n   # Updates a single `Post` using its globally unique id and a patch.\\n   updatePost(\\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n@@ -949,42 +579,6 @@\\n     input: UpdatePostByIdInput!\\n   ): UpdatePostPayload\\n \\n-  # Updates a single `Quiz` using its globally unique id and a patch.\\n-  updateQuiz(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: UpdateQuizInput!\\n-  ): UpdateQuizPayload\\n-\\n-  # Updates a single `Quiz` using a unique key and a patch.\\n-  updateQuizById(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: UpdateQuizByIdInput!\\n-  ): UpdateQuizPayload\\n-\\n-  # Updates a single `QuizEntry` using its globally unique id and a patch.\\n-  updateQuizEntry(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: UpdateQuizEntryInput!\\n-  ): UpdateQuizEntryPayload\\n-\\n-  # Updates a single `QuizEntry` using a unique key and a patch.\\n-  updateQuizEntryById(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: UpdateQuizEntryByIdInput!\\n-  ): UpdateQuizEntryPayload\\n-\\n-  # Updates a single `QuizEntryAnswer` using its globally unique id and a patch.\\n-  updateQuizEntryAnswer(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: UpdateQuizEntryAnswerInput!\\n-  ): UpdateQuizEntryAnswerPayload\\n-\\n-  # Updates a single `QuizEntryAnswer` using a unique key and a patch.\\n-  updateQuizEntryAnswerById(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: UpdateQuizEntryAnswerByIdInput!\\n-  ): UpdateQuizEntryAnswerPayload\\n-\\n   # Updates a single `Topic` using its globally unique id and a patch.\\n   updateTopic(\\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n@@ -1051,24 +645,6 @@\\n     input: UpdateUserByUsernameInput!\\n   ): UpdateUserPayload\\n \\n-  # Deletes a single `Forum` using its globally unique id.\\n-  deleteForum(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: DeleteForumInput!\\n-  ): DeleteForumPayload\\n-\\n-  # Deletes a single `Forum` using a unique key.\\n-  deleteForumById(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: DeleteForumByIdInput!\\n-  ): DeleteForumPayload\\n-\\n-  # Deletes a single `Forum` using a unique key.\\n-  deleteForumBySlug(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: DeleteForumBySlugInput!\\n-  ): DeleteForumPayload\\n-\\n   # Deletes a single `Post` using its globally unique id.\\n   deletePost(\\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n@@ -1081,42 +657,6 @@\\n     input: DeletePostByIdInput!\\n   ): DeletePostPayload\\n \\n-  # Deletes a single `Quiz` using its globally unique id.\\n-  deleteQuiz(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: DeleteQuizInput!\\n-  ): DeleteQuizPayload\\n-\\n-  # Deletes a single `Quiz` using a unique key.\\n-  deleteQuizById(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: DeleteQuizByIdInput!\\n-  ): DeleteQuizPayload\\n-\\n-  # Deletes a single `QuizEntry` using its globally unique id.\\n-  deleteQuizEntry(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: DeleteQuizEntryInput!\\n-  ): DeleteQuizEntryPayload\\n-\\n-  # Deletes a single `QuizEntry` using a unique key.\\n-  deleteQuizEntryById(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: DeleteQuizEntryByIdInput!\\n-  ): DeleteQuizEntryPayload\\n-\\n-  # Deletes a single `QuizEntryAnswer` using its globally unique id.\\n-  deleteQuizEntryAnswer(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: DeleteQuizEntryAnswerInput!\\n-  ): DeleteQuizEntryAnswerPayload\\n-\\n-  # Deletes a single `QuizEntryAnswer` using a unique key.\\n-  deleteQuizEntryAnswerById(\\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n-    input: DeleteQuizEntryAnswerByIdInput!\\n-  ): DeleteQuizEntryAnswerPayload\\n-\\n   # Deletes a single `Topic` using its globally unique id.\\n   deleteTopic(\\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\\n@@ -1680,22 +1220,6 @@\\n   answer: Int\\n }\\n \\n-# An input for mutations affecting `QuizEntryAnswer`\\n-input QuizEntryAnswerInput {\\n-  id: Int\\n-  quizEntryId: Int!\\n-  question: String!\\n-  answer: Int\\n-}\\n-\\n-# Represents an update to a `QuizEntryAnswer`. Fields that are set will be updated.\\n-input QuizEntryAnswerPatch {\\n-  id: Int\\n-  quizEntryId: Int\\n-  question: String\\n-  answer: Int\\n-}\\n-\\n # A connection to a list of `QuizEntryAnswer` values.\\n type QuizEntryAnswersConnection {\\n   # A list of `QuizEntryAnswer` objects.\\n@@ -1748,38 +1272,6 @@\\n   quizId: Int\\n }\\n \\n-# An input for mutations affecting `QuizEntry`\\n-input QuizEntryInput {\\n-  id: Int\\n-  userId: Int!\\n-  quizId: Int!\\n-}\\n-\\n-# Represents an update to a `QuizEntry`. Fields that are set will be updated.\\n-input QuizEntryPatch {\\n-  id: Int\\n-  userId: Int\\n-  quizId: Int\\n-}\\n-\\n-# An input for mutations affecting `Quiz`\\n-input QuizInput {\\n-  id: Int\\n-  name: String!\\n-  updatedAt: Datetime\\n-  precision12Scale2: BigFloat\\n-  precision200Scale100: BigFloat\\n-}\\n-\\n-# Represents an update to a `Quiz`. Fields that are set will be updated.\\n-input QuizPatch {\\n-  id: Int\\n-  name: String\\n-  updatedAt: Datetime\\n-  precision12Scale2: BigFloat\\n-  precision200Scale100: BigFloat\\n-}\\n-\\n # A connection to a list of `Quiz` values.\\n type QuizzesConnection {\\n   # A list of `Quiz` objects.\\n@@ -1996,62 +1488,6 @@\\n   PRIMARY_KEY_DESC\\n }\\n \\n-# All input for the `updateForumById` mutation.\\n-input UpdateForumByIdInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # An object where the defined keys will be set on the `Forum` being updated.\\n-  forumPatch: ForumPatch!\\n-  id: Int!\\n-}\\n-\\n-# All input for the `updateForumBySlug` mutation.\\n-input UpdateForumBySlugInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # An object where the defined keys will be set on the `Forum` being updated.\\n-  forumPatch: ForumPatch!\\n-\\n-  # An URL-safe alias for the `Forum`.\\n-  slug: String!\\n-}\\n-\\n-# All input for the `updateForum` mutation.\\n-input UpdateForumInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The globally unique `ID` which will identify a single `Forum` to be updated.\\n-  nodeId: ID!\\n-\\n-  # An object where the defined keys will be set on the `Forum` being updated.\\n-  forumPatch: ForumPatch!\\n-}\\n-\\n-# The output of our update `Forum` mutation.\\n-type UpdateForumPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `Forum` that was updated by this mutation.\\n-  forum: Forum\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # An edge for our `Forum`. May be used by Relay 1.\\n-  forumEdge(\\n-    # The method to use when ordering `Forum`.\\n-    orderBy: [ForumsOrderBy!] = PRIMARY_KEY_ASC\\n-  ): ForumsEdge\\n-}\\n-\\n # All input for the `updatePostById` mutation.\\n input UpdatePostByIdInput {\\n   # An arbitrary string value with no semantic meaning. Will be included in the\\n@@ -2101,144 +1537,6 @@\\n   ): PostsEdge\\n }\\n \\n-# All input for the `updateQuizById` mutation.\\n-input UpdateQuizByIdInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # An object where the defined keys will be set on the `Quiz` being updated.\\n-  quizPatch: QuizPatch!\\n-  id: Int!\\n-}\\n-\\n-# All input for the `updateQuizEntryAnswerById` mutation.\\n-input UpdateQuizEntryAnswerByIdInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\\n-  quizEntryAnswerPatch: QuizEntryAnswerPatch!\\n-  id: Int!\\n-}\\n-\\n-# All input for the `updateQuizEntryAnswer` mutation.\\n-input UpdateQuizEntryAnswerInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The globally unique `ID` which will identify a single `QuizEntryAnswer` to be updated.\\n-  nodeId: ID!\\n-\\n-  # An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\\n-  quizEntryAnswerPatch: QuizEntryAnswerPatch!\\n-}\\n-\\n-# The output of our update `QuizEntryAnswer` mutation.\\n-type UpdateQuizEntryAnswerPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `QuizEntryAnswer` that was updated by this mutation.\\n-  quizEntryAnswer: QuizEntryAnswer\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\\n-  quizEntry: QuizEntry\\n-\\n-  # An edge for our `QuizEntryAnswer`. May be used by Relay 1.\\n-  quizEntryAnswerEdge(\\n-    # The method to use when ordering `QuizEntryAnswer`.\\n-    orderBy: [QuizEntryAnswersOrderBy!] = PRIMARY_KEY_ASC\\n-  ): QuizEntryAnswersEdge\\n-}\\n-\\n-# All input for the `updateQuizEntryById` mutation.\\n-input UpdateQuizEntryByIdInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # An object where the defined keys will be set on the `QuizEntry` being updated.\\n-  quizEntryPatch: QuizEntryPatch!\\n-  id: Int!\\n-}\\n-\\n-# All input for the `updateQuizEntry` mutation.\\n-input UpdateQuizEntryInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The globally unique `ID` which will identify a single `QuizEntry` to be updated.\\n-  nodeId: ID!\\n-\\n-  # An object where the defined keys will be set on the `QuizEntry` being updated.\\n-  quizEntryPatch: QuizEntryPatch!\\n-}\\n-\\n-# The output of our update `QuizEntry` mutation.\\n-type UpdateQuizEntryPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `QuizEntry` that was updated by this mutation.\\n-  quizEntry: QuizEntry\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # Reads a single `User` that is related to this `QuizEntry`.\\n-  user: User\\n-\\n-  # Reads a single `Quiz` that is related to this `QuizEntry`.\\n-  quiz: Quiz\\n-\\n-  # An edge for our `QuizEntry`. May be used by Relay 1.\\n-  quizEntryEdge(\\n-    # The method to use when ordering `QuizEntry`.\\n-    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\\n-  ): QuizEntriesEdge\\n-}\\n-\\n-# All input for the `updateQuiz` mutation.\\n-input UpdateQuizInput {\\n-  # An arbitrary string value with no semantic meaning. Will be included in the\\n-  # payload verbatim. May be used to track mutations by the client.\\n-  clientMutationId: String\\n-\\n-  # The globally unique `ID` which will identify a single `Quiz` to be updated.\\n-  nodeId: ID!\\n-\\n-  # An object where the defined keys will be set on the `Quiz` being updated.\\n-  quizPatch: QuizPatch!\\n-}\\n-\\n-# The output of our update `Quiz` mutation.\\n-type UpdateQuizPayload {\\n-  # The exact same `clientMutationId` that was provided in the mutation input,\\n-  # unchanged and unused. May be used by a client to track mutations.\\n-  clientMutationId: String\\n-\\n-  # The `Quiz` that was updated by this mutation.\\n-  quiz: Quiz\\n-\\n-  # Our root query field type. Allows us to run any query from our mutation payload.\\n-  query: Query\\n-\\n-  # An edge for our `Quiz`. May be used by Relay 1.\\n-  quizEdge(\\n-    # The method to use when ordering `Quiz`.\\n-    orderBy: [QuizzesOrderBy!] = PRIMARY_KEY_ASC\\n-  ): QuizzesEdge\\n-}\\n-\\n # All input for the `updateTopicById` mutation.\\n input UpdateTopicByIdInput {\\n   # An arbitrary string value with no semantic meaning. Will be included in the\\n\",\"resultLanguage\":\"diff\"}]}},{\"node\":{\"category\":\"queries\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [7] >>> JSON\",\"title\":\"Basic\",\"examples\":[{\"title\":\"Forums\",\"example\":\"{\\n  allForums {\\n    nodes {\\n      nodeId\\n      id\\n      slug\\n      name\\n      description\\n    }\\n  }\\n}\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"allForums\\\": {\\n    \\\"nodes\\\": [\\n      {\\n        \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDFd\\\",\\n        \\\"id\\\": 1,\\n        \\\"slug\\\": \\\"cat-life\\\",\\n        \\\"name\\\": \\\"Cat Life\\\",\\n        \\\"description\\\":\\n          \\\"A forum all about cats and how fluffy they are and how they completely ignore their owners unless there is food. Or yarn.\\\"\\n      },\\n      {\\n        \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDJd\\\",\\n        \\\"id\\\": 2,\\n        \\\"slug\\\": \\\"dog-life\\\",\\n        \\\"name\\\": \\\"Dog Life\\\",\\n        \\\"description\\\": \\\"\\\"\\n      },\\n      {\\n        \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDNd\\\",\\n        \\\"id\\\": 3,\\n        \\\"slug\\\": \\\"slug-life\\\",\\n        \\\"name\\\": \\\"Slug Life\\\",\\n        \\\"description\\\": \\\"\\\"\\n      }\\n    ]\\n  }\\n}\\n\",\"resultLanguage\":\"json\"},{\"title\":\"Forum by slug\",\"example\":\"{\\n  forumBySlug(slug: \\\"slug-life\\\") {\\n    nodeId\\n    id\\n    slug\\n    name\\n    description\\n  }\\n}\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"forumBySlug\\\": {\\n    \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDNd\\\",\\n    \\\"id\\\": 3,\\n    \\\"slug\\\": \\\"slug-life\\\",\\n    \\\"name\\\": \\\"Slug Life\\\",\\n    \\\"description\\\": \\\"\\\"\\n  }\\n}\\n\",\"resultLanguage\":\"json\"}]}},{\"node\":{\"category\":\"queries\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [8] >>> JSON\",\"title\":\"Collections\",\"examples\":[{\"title\":\"First offset\",\"example\":\"{\\n  allForums(first: 1, offset: 1) {\\n    nodes {\\n      nodeId\\n      id\\n      name\\n    }\\n  }\\n}\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"allForums\\\": {\\n    \\\"nodes\\\": [\\n      {\\n        \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDJd\\\",\\n        \\\"id\\\": 2,\\n        \\\"name\\\": \\\"Dog Life\\\"\\n      }\\n    ]\\n  }\\n}\\n\",\"resultLanguage\":\"json\"},{\"title\":\"Relation condition\",\"example\":\"{\\n  forumBySlug(slug: \\\"cat-life\\\") {\\n    nodeId\\n    id\\n    name\\n    topics(\\n      condition: { authorId: 1 }\\n    ) {\\n      nodes {\\n        nodeId\\n        id\\n        title\\n      }\\n    }\\n  }\\n}\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"forumBySlug\\\": {\\n    \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDFd\\\",\\n    \\\"id\\\": 1,\\n    \\\"name\\\": \\\"Cat Life\\\",\\n    \\\"topics\\\": {\\n      \\\"nodes\\\": [\\n        {\\n          \\\"nodeId\\\":\\n            \\\"WyJ0b3BpY3MiLDFd\\\",\\n          \\\"id\\\": 1,\\n          \\\"title\\\": \\\"cats cats cats\\\"\\n        },\\n        {\\n          \\\"nodeId\\\":\\n            \\\"WyJ0b3BpY3MiLDJd\\\",\\n          \\\"id\\\": 2,\\n          \\\"title\\\": \\\"snooze life\\\"\\n        },\\n        {\\n          \\\"nodeId\\\":\\n            \\\"WyJ0b3BpY3MiLDNd\\\",\\n          \\\"id\\\": 3,\\n          \\\"title\\\": \\\"too hot\\\"\\n        }\\n      ]\\n    }\\n  }\\n}\\n\",\"resultLanguage\":\"json\"}]}},{\"node\":{\"category\":\"queries\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [9] >>> JSON\",\"title\":\"Relations\",\"examples\":[{\"title\":\"Forums topics posts\",\"example\":\"{\\n  forumById(id: 1) {\\n    name\\n    topics(\\n      first: 1\\n      orderBy: [CREATED_AT_ASC]\\n    ) {\\n      nodes {\\n        id\\n        title\\n        bodySummary\\n        author {\\n          id\\n          username\\n        }\\n        posts(\\n          first: 1\\n          orderBy: [ID_DESC]\\n        ) {\\n          nodes {\\n            id\\n            author {\\n              id\\n              username\\n            }\\n            body\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"forumById\\\": {\\n    \\\"name\\\": \\\"Cat Life\\\",\\n    \\\"topics\\\": {\\n      \\\"nodes\\\": [\\n        {\\n          \\\"id\\\": 1,\\n          \\\"title\\\": \\\"cats cats cats\\\",\\n          \\\"bodySummary\\\":\\n            \\\"lets discuss cats because t...\\\",\\n          \\\"author\\\": {\\n            \\\"id\\\": 1,\\n            \\\"username\\\": \\\"user\\\"\\n          },\\n          \\\"posts\\\": {\\n            \\\"nodes\\\": [\\n              {\\n                \\\"id\\\": 3,\\n                \\\"author\\\": {\\n                  \\\"id\\\": 1,\\n                  \\\"username\\\": \\\"user\\\"\\n                },\\n                \\\"body\\\":\\n                  \\\"I love it when they completely ignore you until they want something. So much better than dogs am I rite?\\\"\\n              }\\n            ]\\n          }\\n        }\\n      ]\\n    }\\n  }\\n}\\n\",\"resultLanguage\":\"json\"}]}},{\"node\":{\"category\":\"queries\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [10] >>> JSON\",\"title\":\"Mutations\",\"examples\":[{\"title\":\"Create\",\"example\":\"mutation {\\n  createTopic(\\n    input: {\\n      topic: {\\n        forumId: 1\\n        title: \\\"My question relates to mutations...\\\"\\n        body: \\\"How do you write them?\\\"\\n      }\\n    }\\n  ) {\\n    topic {\\n      nodeId\\n      id\\n      forumId\\n      title\\n      body\\n    }\\n  }\\n}\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"createTopic\\\": {\\n    \\\"topic\\\": {\\n      \\\"nodeId\\\": \\\"WyJ0b3BpY3MiLDRd\\\",\\n      \\\"id\\\": 4,\\n      \\\"forumId\\\": 1,\\n      \\\"title\\\":\\n        \\\"My question relates to mutations...\\\",\\n      \\\"body\\\": \\\"How do you write them?\\\"\\n    }\\n  }\\n}\\n\",\"resultLanguage\":\"json\"},{\"title\":\"Update\",\"example\":\"mutation {\\n  updateTopicById(\\n    input: {\\n      id: 1\\n      topicPatch: {\\n        title: \\\"My (edited) title\\\"\\n      }\\n    }\\n  ) {\\n    topic {\\n      nodeId\\n      id\\n      title\\n      body\\n    }\\n  }\\n}\\n\\n# Works for a table like:\\n#\\n#   create table app_public.topics (\\n#     id serial primary key,\\n#     forum_id integer NOT NULL references app_public.forums on delete cascade,\\n#     title text NOT NULL,\\n#     body text DEFAULT ''::text NOT NULL\\n#   );\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"updateTopicById\\\": {\\n    \\\"topic\\\": {\\n      \\\"nodeId\\\": \\\"WyJ0b3BpY3MiLDFd\\\",\\n      \\\"id\\\": 1,\\n      \\\"title\\\": \\\"My (edited) title\\\",\\n      \\\"body\\\":\\n        \\\"lets discuss cats because theyre totally cool\\\"\\n    }\\n  }\\n}\\n\",\"resultLanguage\":\"json\"},{\"title\":\"Delete\",\"example\":\"mutation {\\n  deleteTopicById(input: { id: 1 }) {\\n    deletedTopicId\\n  }\\n}\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"deleteTopicById\\\": {\\n    \\\"deletedTopicId\\\":\\n      \\\"WyJ0b3BpY3MiLDFd\\\"\\n  }\\n}\\n\",\"resultLanguage\":\"json\"}]}},{\"node\":{\"category\":\"queries\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [11] >>> JSON\",\"title\":\"Custom queries\",\"examples\":[{\"title\":\"Single scalar\",\"example\":\"{\\n  randomNumber\\n}\\n\\n# Generated by SQL like:\\n#\\n#  create function app_public.random_number() returns int\\n#  language sql stable\\n#  as $$\\n#    select 4; -- Chosen by fair dice roll. Guaranteed to be random. XKCD#221\\n#  $$;\\n#\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{ \\\"randomNumber\\\": 4 }\\n\",\"resultLanguage\":\"json\"},{\"title\":\"Single row\",\"example\":\"{\\n  currentUser {\\n    nodeId\\n    id\\n    username\\n  }\\n}\\n\\n# Added to the GraphQL schema via\\n# this SQL:\\n#\\n#   create function current_user()\\n#   returns app_public.users\\n#   language sql stable\\n#   as $$\\n#     select users.*\\n#     from app_public.users\\n#     where id = current_user_id();\\n#   $$;\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"currentUser\\\": {\\n    \\\"nodeId\\\": \\\"WyJ1c2VycyIsMV0=\\\",\\n    \\\"id\\\": 1,\\n    \\\"username\\\": \\\"user\\\"\\n  }\\n}\\n\",\"resultLanguage\":\"json\"},{\"title\":\"Rows connection\",\"example\":\"{\\n  forumsAboutCats {\\n    nodes {\\n      nodeId\\n      id\\n      name\\n      slug\\n    }\\n  }\\n}\\n\\n# Created from SQL like:\\n#\\n#  create function app_public.forums_about_cats()\\n#  returns setof app_public.forums\\n#  language sql stable\\n#  as $$\\n#    select *\\n#    from app_public.forums\\n#    where slug like 'cat-%';\\n#  $$;\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"forumsAboutCats\\\": {\\n    \\\"nodes\\\": [\\n      {\\n        \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDFd\\\",\\n        \\\"id\\\": 1,\\n        \\\"name\\\": \\\"Cat Life\\\",\\n        \\\"slug\\\": \\\"cat-life\\\"\\n      }\\n    ]\\n  }\\n}\\n\",\"resultLanguage\":\"json\"}]}},{\"node\":{\"category\":\"queries\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [12] >>> JSON\",\"title\":\"Custom mutations\",\"examples\":[{\"title\":\"Forgot password\",\"example\":\"mutation {\\n  forgotPassword(\\n    input: {\\n      email: \\\"user@example.com\\\"\\n    }\\n  ) {\\n    success\\n  }\\n}\\n\\n# Generated with SQL like this:\\n#\\n#  create function forgot_password(email text)\\n#  returns boolean\\n#  language plpgsql volatile\\n#  as $$\\n#    ...\\n#  $$;\\n#\\n#  -- Optionally rename the result field:\\n#  comment on function\\n#    forgot_password(email text)\\n#    is '@resultFieldName success';\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"forgotPassword\\\": {\\n    \\\"success\\\": true\\n  }\\n}\\n\",\"resultLanguage\":\"json\"}]}},{\"node\":{\"category\":\"queries\",\"id\":\"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [13] >>> JSON\",\"title\":\"Computed columns\",\"examples\":[{\"title\":\"Topic summary\",\"example\":\"{\\n  topicById(id: 2) {\\n    body\\n    bodySummary\\n  }\\n}\\n\\n# Generated by SQL like:\\n#\\n#  create function app_public.topics_body_summary(\\n#    t app_public.topics,\\n#    max_length int = 30\\n#  )\\n#  returns text\\n#  language sql stable\\n#  as $$\\n#    select case\\n#      when length(t.body) > max_length\\n#      then left(t.body, max_length - 3)\\n#             || '...'\\n#      else t.body\\n#      end;\\n#  $$;\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"topicById\\\": {\\n    \\\"body\\\":\\n      \\\"do you find your cat just sleeps everywhere\\\",\\n    \\\"bodySummary\\\":\\n      \\\"do you find your cat just s...\\\"\\n  }\\n}\\n\",\"resultLanguage\":\"json\"},{\"title\":\"Topic summary with arg\",\"example\":\"{\\n  topicById(id: 2) {\\n    body\\n    bodySummary(maxLength: 20)\\n  }\\n}\\n\\n# Generated by SQL like:\\n#\\n#  create function app_public.topics_body_summary(\\n#    t app_public.topics,\\n#    max_length int = 30\\n#  )\\n#  returns text\\n#  language sql stable\\n#  as $$\\n#    select case\\n#      when length(t.body) > max_length\\n#      then left(t.body, max_length - 3)\\n#             || '...'\\n#      else t.body\\n#      end;\\n#  $$;\\n\",\"exampleLanguage\":\"graphql\",\"result\":\"{\\n  \\\"topicById\\\": {\\n    \\\"body\\\":\\n      \\\"do you find your cat just sleeps everywhere\\\",\\n    \\\"bodySummary\\\":\\n      \\\"do you find your ...\\\"\\n  }\\n}\\n\",\"resultLanguage\":\"json\"}]}}]}},\"pathContext\":{\"layout\":\"page\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/postgraphile-production.json\n// module id = 471\n// module chunks = 163587040327238"],"sourceRoot":""}