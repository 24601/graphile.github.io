webpackJsonp([57656932303775],{473:function(e,n){e.exports={data:{remark:{html:'<h2 id="v4-feature-guide"><a href="#v4-feature-guide" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>v4 Feature Guide</h2>\n<p>Though the entry point to v4 is almost identical to v3 (with a few additional\noptions!), the guts of PostGraphile have been re-written from the ground up -\nabout 80% of the codebase has been replaced with the new Graphile Engine\nsystem which is plugin-based.</p>\n<p>Despite this huge change, v4 is still broadly compatible with v3; you can\nread more about migrating from v3 to v4 in our <a href="/postgraphile/v3-migration/">migration\nguide</a>.</p>\n<p><strong>Headlines</strong>:</p>\n<ul>\n<li>ðŸš€ðŸš€ðŸš€ Massively improved base performance: up to 55x faster, 90% reduced RAM, 1/20th latency</li>\n<li>Cluster mode (<code class="language-text">--cluster-workers 4</code>) for even greater performance still (uses more cores, RAM)</li>\n<li>Plugin system - no need to maintain a fork; mix and match additional functionality</li>\n<li>\n<p>Tidier schema:</p>\n<ul>\n<li>PostgreSQL extension resources automatically omitted (disable with <code class="language-text">--include-extension-resources</code>)</li>\n<li>with <code class="language-text">--no-ignore-rbac</code>, automatically omit tables and columns you don\'t have permission to access</li>\n<li><a href="/postgraphile/smart-comments/">smart comments</a> for omitting, renaming and deprecating things easily</li>\n<li>\n<p><a href="/postgraphile/inflection/">write your own naming functions</a> if you don\'t like the built in ones!</p>\n<ul>\n<li><code class="language-text">userByAuthorId</code> becomes just <code class="language-text">author</code> with the help of <code class="language-text">@graphile-contrib/pg-simplify-inflector</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>One-to-one relationships detected correctly (connection interface still present but deprecated)</li>\n<li>Simple collections: option to avoid <code class="language-text">edges</code> / <code class="language-text">nodes</code> should you so desire</li>\n<li>GraphQL query batching</li>\n<li><code class="language-text">orderBy</code> more than one column </li>\n<li>GraphiQL improvements around watch mode</li>\n<li>Introspection cache (<code class="language-text">--read-cache</code> / <code class="language-text">--write-cache</code>)</li>\n<li>Better errors - with details on why it\'s occurred and often hints on how to fix!</li>\n<li>Support for PostgreSQL v10 identity columns</li>\n<li>Support for actually starting against PostgreSQL v11</li>\n<li>Support for <code class="language-text">pg@7.x</code> npm module</li>\n<li>Support for <code class="language-text">graphql@0.13.x</code></li>\n<li>PostGraphileRC configuration file</li>\n<li>CLI <code class="language-text">--no-server</code> option for writing out GraphQL schema and exiting</li>\n<li>Better support for common envvars</li>\n<li>TypeScript typings bundled</li>\n<li>Lots more hidden features</li>\n<li>Many many many many fixes</li>\n<li>Much better PostgreSQL feature support</li>\n</ul>\n<hr>\n<h3 id="performance-goodbye-n1-queries"><a href="#performance-goodbye-n1-queries" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Performance: goodbye N+1 queries!</h3>\n<p>The performance of PostGraphile has massively increased over PostGraphQL v3;\nand the memory usage has decreased too! If you run your database and\nPostGraphile on different servers then you should find query times are improved\neven further by the (significant!) reduction in the number of SQL queries that\nwe generate.</p>\n<p>I created an <a href="https://github.com/graphile/postgraphile_changes/blob/master/db/reset.sh">example database\nschema</a>\nbased on the forum example (but with some bells and whistles), filled it with\nsome data, and then benchmarked a <a href="https://github.com/graphile/postgraphile_changes/tree/master/graphql">number of queries</a>\nagainst it (running everything locally on my machine (a 2011 iMac), using the\nlatest LTS release of Node.js for both v3 and v4).</p>\n<p>The most extreme improvements came in the form of\n<a href="https://github.com/graphile/postgraphile_changes/blob/master/graphql/ThreadViewWithEmoji.graphql">ThreadViewWithEmoji.graphql</a>.\nThis is a query that emulates loading the data to show a single thread page\nwithin a complex forum - the thread itself (and its author), plus the first 20\nposts within that thread, their authors, and the emoji responses that each of\nthe posts have received. It uses a computed column for the user <code class="language-text">fullName</code>s,\nbut other than that it\'s just regular relations. Here\'s the results of v4 vs\nv3 for this query:</p>\n<ul>\n<li>at concurrency = 1: 12x more requests/second, 90% reduction in RAM usage, and less than 1/10th the latency</li>\n<li>at concurrency = 10: 17x more requests/second, 92% reduction in RAM usage, and nearly 1/20th the latency</li>\n<li>at concurrency = 100: 55x more requests/second, 91% reduction in RAM usage, and around 1/40th the latency</li>\n</ul>\n<p>Simpler queries still reveal good performance improvements. All in all,\nPostGraphile v4 is capable of scaling much better than v3. There\'s still\nlots of performance improvements to be made - we\'re not resting on our\nlaurels!</p>\n<h3 id="plugins-plugins-plugins"><a href="#plugins-plugins-plugins" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Plugins plugins plugins</h3>\n<p>PostGraphile\'s schema generation (and even the introspection itself!) are now\nprovided by a number of Graphile Engine plugins. Graphile Engine was invented\nfor PostGraphile (though it is also suitable for use in other GraphQL\nprojects) to enable easy extensibility of the core system. This means we can\nnow have community led feature development such as\n<a href="https://github.com/mattbretl/postgraphile-plugin-connection-filter">postgraphile-plugin-connection-filter</a>\n(which adds a much more powerful filter engine to PostGraphile that the built\nin <code class="language-text">condition</code> argument) without having to have users maintain forks of the\nproject. These plugins can be maintained separately, and might be merged into\ncore at a later point.</p>\n<p>It\'s also possible to turn off, or even replace, built in plugins - and of\ncourse to add your own. So you can really customise PostGraphile now! See\n<a href="/postgraphile/extending/">Schema Plugins</a> for more information.</p>\n<h3 id="tidier-schema"><a href="#tidier-schema" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tidier schema</h3>\n<p>PostGraphile no longer includes resources from extensions automatically, so\nyour schema by default only includes the functionality you\'ve added yourself.\n(Go back to the old behaviour with <code class="language-text">--include-extension-resources</code>.)</p>\n<p>We highly recommend you enable the new <code class="language-text">--no-ignore-rbac</code> option which tells\nPostGraphile to omit anything from your GraphQL schema that you do not have\naccess to. This means that if you only do <code class="language-text">GRANT UPDATE (name, bio) ON users\nTO graphql_visitor;</code> then the update mutation will only expose the <code class="language-text">name</code> and\n<code class="language-text">bio</code> fields. No more useless GraphQL fields that throw errors when you\nattempt to use them! This option will probably be enabled by default in v5.</p>\n<h3 id="omitting-things"><a href="#omitting-things" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Omitting things</h3>\n<p>If there\'s something (a column, table, function, filter, relation) that you\ndon\'t want to express to GraphQL you can now remove it using our <a href="/postgraphile/smart-comments/">smart\ncomments</a> feature. This feature is highly\nflexible, so get in touch if you can think of more ways for it to help you\nbuild your perfect schema!</p>\n<h3 id="deprecating-tablescolumnsfunctions"><a href="#deprecating-tablescolumnsfunctions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Deprecating tables/columns/functions</h3>\n<p>It\'s also possible to deprecate fields, tables, functions, etc by adding a\n"smart comment"; e.g.</p>\n<div class="gatsby-highlight">\n      <pre class="language-sql"><code class="language-sql"><span class="token keyword">comment</span> <span class="token keyword">on</span> <span class="token keyword">column</span> c<span class="token punctuation">.</span>person<span class="token punctuation">.</span>site <span class="token operator">is</span> E<span class="token string">\'@deprecated Use `website` instead\\nThe user\'</span><span class="token string">\'s homepage\'</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3 id="naming-things"><a href="#naming-things" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Naming things</h3>\n<p>You no longer have to trust us to come up with the best names for your\nfields. You can override individual fields using our <a href="/postgraphile/smart-comments/">smart\ncomments</a> feature, or override the names that\nwe auto-generate by using a plugin to <a href="/postgraphile/inflection/">override our\ninflectors</a> with your own.</p>\n<p>These naming overrides can be shared like other plugins, for example I\'ve\n<a href="https://github.com/graphile-contrib/pg-simplify-inflector">written\n<code class="language-text">@graphile-contrib/pg-simplify-inflector</code></a>\nwhich changes fields like <code class="language-text">userByAuthorId: User</code> into simply <code class="language-text">author: User</code> -\nI recommend you check it out.</p>\n<h3 id="one-to-one-relationships"><a href="#one-to-one-relationships" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>One-to-one relationships</h3>\n<p>If you have tables like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> foo <span class="token punctuation">(</span>\n  id <span class="token keyword">serial</span> <span class="token keyword">primary</span> <span class="token keyword">key</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">create</span> <span class="token keyword">table</span> bar <span class="token punctuation">(</span>\n  foo_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">references</span> foo<span class="token punctuation">,</span>\n  name <span class="token keyword">text</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>in V3 the one-to-one nature of the relationship was not accounted for, so you would have to query like:</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token punctuation">{</span>\n  fooById<span class="token punctuation">(</span><span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment"># Due to this being one-to-one, at most one row would ever be returned,</span>\n    <span class="token comment"># however we didn\'t account for this and returned a connection anyway</span>\n<span class="gatsby-highlight-code-line">    barsByFooId <span class="token punctuation">{</span>\n</span><span class="gatsby-highlight-code-line">      edges <span class="token punctuation">{</span>\n</span><span class="gatsby-highlight-code-line">        node <span class="token punctuation">{</span>\n</span>          name\n<span class="gatsby-highlight-code-line">        <span class="token punctuation">}</span>\n</span><span class="gatsby-highlight-code-line">      <span class="token punctuation">}</span>\n</span><span class="gatsby-highlight-code-line">    <span class="token punctuation">}</span>\n</span>  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>with v4\'s native support for these relations you can now use this much neater query:</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token punctuation">{</span>\n  fooById<span class="token punctuation">(</span><span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="gatsby-highlight-code-line">    barByFooId <span class="token punctuation">{</span>\n</span>      name\n<span class="gatsby-highlight-code-line">    <span class="token punctuation">}</span>\n</span>  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>No more unnecessary indirection!</p>\n<p>Don\'t worry though, we still have the old relation too (to prevent this being a breaking change), we\'ve just deprecated it so it won\'t show up by default in autocomplete/documentation/etc.</p>\n<h3 id="simple-collections"><a href="#simple-collections" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Simple collections</h3>\n<p>PostGraphile has long supported Relay-compatible connections, but it now\nsupports simple list-based collections too. They\'re disabled by default, but\nyou can enable both interfaces with <code class="language-text">--simple-collections both</code> or use the\nsimpler interface exclusively with <code class="language-text">--simple-collections only</code>.</p>\n<h3 id="graphql-query-batching"><a href="#graphql-query-batching" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>GraphQL query batching</h3>\n<p>With the <code class="language-text">--enable-query-batching</code> option for <a href="/postgraphile/usage-cli/">the\nCLI</a>; or <code class="language-text">enableQueryBatching: true</code> for the\n<a href="/postgraphile/usage-library/">library</a> you can enable our experimental Query\nBatching support.</p>\n<p>Your GraphQL client will need query batching support to make use of\nthis (non-batched queries still work fine).</p>\n<p>For Apollo, you can use the\n<a href="https://www.apollographql.com/docs/link/links/batch-http.html">BatchHttpLink</a>\nlink - something like:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> ApolloClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'apollo-client\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> BatchHttpLink <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"apollo-link-batch-http"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> link <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BatchHttpLink</span><span class="token punctuation">(</span><span class="token punctuation">{</span> uri<span class="token punctuation">:</span> <span class="token string">"/graphql"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApolloClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  link<span class="token punctuation">,</span>\n  <span class="token comment">// other options like cache</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3 id="order-order"><a href="#order-order" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Order! Order!</h3>\n<p>Connections now support ordering by an array of columns rather than just one -\na much requested feature!</p>\n<h3 id="cache-invalidation-serverless"><a href="#cache-invalidation-serverless" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Cache invalidation (Serverless)</h3>\n<p>People have been running PostGraphile on AWS Lambda and similar environments, and one of the common issues that I hear is that boot up time is too slow. V4 addresses this in two ways:</p>\n<ol>\n<li>we offer the <code class="language-text">--read-cache</code> and <code class="language-text">--write-cache</code> options that allow plugins (including the introspection plugin!) to cache work that they do up front - note that we do <em>not</em> handle invalidating this cache, so that remains your responsibility.</li>\n<li>by changing the minimum requirements of PostGraphile to Node.js 8.6 we can make use of native async/await support, resulting in much less code for Node to parse and execute.</li>\n</ol>\n<h3 id="better-support-better-errors"><a href="#better-support-better-errors" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Better support, better errors</h3>\n<ul>\n<li>Many previously invalid enums are now made valid</li>\n<li>When the introspection results in an empty name, an error is thrown explaining why</li>\n<li>When schema building results in a naming clash, an error it thrown explaining where the two names originated, and even hinting how to fix the issue</li>\n<li>When you specify <code class="language-text">--schema</code> and that schema doesn\'t exist, you will be warned</li>\n<li>Tables that end in <code class="language-text">_input</code> or <code class="language-text">_patch</code> are renamed to FooInputRecord or similar to avoid clashes with mutation types on other tables</li>\n<li>Support <code class="language-text">point</code>, <code class="language-text">hstore</code> and <code class="language-text">inet</code> types</li>\n</ul>\n<h3 id="column-level-select-grants-may-now-work"><a href="#column-level-select-grants-may-now-work" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Column-level SELECT grants may now work</h3>\n<p>As part of the performance work, we now select only the fields we need (and\nwe also inline computed columns, in case you\'re interested!). As such, if you\nhave column-level SELECT grants you may find that this works with\nPostGraphile now. Note, however, that this will not work with PostGraphile\'s\ndefault mutations, nor with some computed columns. We do not recommend using\ncolumn-level SELECT grants - instead split your concerns into multiple tables\nand use the one-to-one relationship feature to link them.</p>\n<h3 id="pg7x-and-duck-typed-pg"><a href="#pg7x-and-duck-typed-pg" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>pg@7.x and duck-typed pg</h3>\n<p>In v3 it was quite common to have conflicts with <code class="language-text">pg</code> - where you had your own\nversion installed, and PostGraphile installed it\'s own version, and when you\npassed a pgPool over to PostGraphile it would throw an error. Well no more! We\nnow look at the pgPool you\'ve handed us and if it quacks like <del>a duck</del>\n<code class="language-text">pg.Pool</code> then we\'ll trust you and treat it as a pg.Pool.</p>\n<h3 id="lots-of-hidden-features"><a href="#lots-of-hidden-features" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Lots of hidden features</h3>\n<p>There\'s absolutely loads of things going on under the hood that we\'ve not\nofficially exposed yet. You can use some of this goodness (e.g.\n<code class="language-text">pgColumnFilter</code>) by tapping into the <code class="language-text">graphileBuildOptions</code> setting, but\nyou\'ll currently have to go digging to see what they are and how they work; and\nuntil they\'re documented they\'re seen as experimental so there\'s no guarantees\nthat they won\'t be removed or modified.</p>\n<ul>\n<li><code class="language-text">handleErrors</code> for overriding how errors are output</li>\n<li><code class="language-text">X-GraphQL-Event-Stream</code> header support</li>\n<li>using variables in JSON subfields</li>\n<li><code class="language-text">prettier</code> for code formatting</li>\n</ul>',frontmatter:{path:"/postgraphile/v4-new-features/",title:"v4 Feature Guide",showExamples:null}},nav:{edges:[{node:{id:"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [0] >>> JSON",name:"news",sections:[{id:"main",title:"Archive"},{id:"about",title:"About"}],pages:[{to:"/news/postgraphile-version-4/",title:"Version 4 Announcement",sectionId:"main",subpages:null},{to:"/news/press-kit/",title:"Press Kit",sectionId:"about",subpages:null}]}},{node:{id:"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [1] >>> JSON",name:"graphile-build",sections:[{id:"guides",title:"Overview"},{id:"library-reference",title:"Using the Library"},{id:"plugin-reference",title:"Building a Plugin"}],pages:[{to:"/graphile-build/getting-started/",title:"Getting Started",sectionId:"guides",subpages:[]},{to:"/graphile-build/plugins/",title:"Plugins",sectionId:"guides",subpages:[]},{to:"/graphile-build/hooks/",title:"Hooks",sectionId:"guides",subpages:[]},{to:"/graphile-build/look-ahead/",title:"Look Ahead",sectionId:"guides",subpages:[]},{to:"/graphile-build/graphile-build/",title:"graphile-build",sectionId:"library-reference",subpages:[]},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"library-reference",subpages:[]},{to:"/graphile-build/plugin-options/",title:"Options",sectionId:"library-reference",subpages:[]},{to:"/graphile-build/default-plugins/",title:"Default Plugins",sectionId:"library-reference",subpages:[]},{to:"/graphile-build/omitting-plugins/",title:"Omitting Plugins",sectionId:"guides",subpages:[]},{to:"/graphile-build/all-hooks/",title:"All Hooks",sectionId:"plugin-reference",subpages:[]},{to:"/graphile-build/build-object/",title:"Build Object",sectionId:"plugin-reference",subpages:[]},{to:"/graphile-build/context-object/",title:"Context Object",sectionId:"plugin-reference",subpages:[]},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"plugin-reference",subpages:[]}]}},{node:{id:"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [2] >>> JSON",name:"postgraphile",sections:[{id:"overview",title:"Overview"},{id:"basics",title:"Operation"},{id:"customising",title:"Customising"},{id:"guides",title:"Guides"},{id:"community",title:"Community"},{id:"faq",title:"FAQ"}],pages:[{to:"/postgraphile/introduction/",title:"Introduction",sectionId:"overview",subpages:[]},{to:"/postgraphile/examples/",title:"Example Gallery",sectionId:"overview",subpages:[]},{to:"/postgraphile/usage/",title:"Usage",sectionId:"overview",subpages:[{to:"/postgraphile/usage-cli/",title:"CLI Usage",sectionId:"overview"},{to:"/postgraphile/usage-library/",title:"Library Usage",sectionId:"overview"},{to:"/postgraphile/usage-schema/",title:"Schema-only Usage",sectionId:"overview"}]},{to:"/postgraphile/performance/",title:"Performance",sectionId:"overview",subpages:[]},{to:"/postgraphile/requirements/",title:"Requirements",sectionId:"overview",subpages:[]},{to:"/postgraphile/quick-start-guide/",title:"Quick Start Guide",sectionId:"basics",subpages:[]},{to:"/postgraphile/namespaces/",title:"Namespaces",sectionId:"basics",subpages:null},{to:"/postgraphile/inflection/",title:"Inflection",sectionId:"basics",subpages:null},{to:"/postgraphile/tables/",title:"Tables",sectionId:"basics",subpages:[{to:"/postgraphile/relations/",title:"Relations",sectionId:"basics"},{to:"/postgraphile/connections/",title:"Connections",sectionId:"basics"},{to:"/postgraphile/filtering/",title:"Filtering",sectionId:"basics"},{to:"/postgraphile/crud-mutations/",title:"CRUD Mutations",sectionId:"basics"},{to:"/postgraphile/node-id/",title:"nodeId / id",sectionId:"basics"}]},{to:"/postgraphile/functions/",title:"Functions",sectionId:"basics",subpages:[{to:"/postgraphile/computed-columns/",title:"Computed Columns",sectionId:"basics"},{to:"/postgraphile/custom-queries/",title:"Custom Queries",sectionId:"basics"},{to:"/postgraphile/custom-mutations/",title:"Custom Mutations",sectionId:"basics"},{to:"/postgraphile/function-restrictions/",title:"Function Restrictions",sectionId:"basics"},{to:"/postgraphile/function-gallery/",title:"Function Gallery",sectionId:"customising"}]},{to:"/postgraphile/postgresql-indexes/",title:"PostgreSQL Indexes",sectionId:"basics",
subpages:[]},{to:"/postgraphile/security/",title:"Security",sectionId:"basics",subpages:[]},{to:"/postgraphile/subscriptions/",title:"Subscriptions",sectionId:"basics",subpages:[]},{to:"/postgraphile/reserved-keywords/",title:"Reserved Keywords",sectionId:"basics",subpages:[]},{to:"/postgraphile/debugging/",title:"Debugging",sectionId:"basics",subpages:[]},{to:"/postgraphile/smart-comments/",title:"Smart Comments",sectionId:"customising",subpages:[]},{to:"/postgraphile/extending/",title:"Schema Plugins",sectionId:"customising",subpages:[{to:"/postgraphile/make-extend-schema-plugin/",title:"makeExtendSchemaPlugin",sectionId:"customising"},{to:"/postgraphile/make-add-inflectors-plugin/",title:"makeAddInflectorsPlugin",sectionId:"customising"},{to:"/postgraphile/extending-raw/",title:"Graphile Engine",sectionId:"customising"},{to:"/postgraphile/plugin-gallery/",title:"Plugin Gallery",sectionId:"customising"}]},{to:"/postgraphile/plugins/",title:"Server Plugins",sectionId:"customising",subpages:[]},{to:"/postgraphile/evaluating/",title:"Evaluating for your Project",sectionId:"guides",subpages:[]},{to:"/postgraphile/postgresql-schema-design/",title:"PostgreSQL Schema Design",sectionId:"guides",subpages:[]},{to:"/postgraphile/production/",title:"Production Considerations",sectionId:"guides",subpages:[]},{to:"/postgraphile/jwt-guide/",title:"PostGraphile JWT Guide",sectionId:"guides",subpages:[]},{to:"/postgraphile/jwk-verification/",title:"JWK Verification (e.g. Auth0)",sectionId:"guides",subpages:[]},{to:"/postgraphile/default-role/",title:"The Default Role",sectionId:"guides",subpages:[]},{to:"/postgraphile/v4-new-features/",title:"v4 Feature Guide",sectionId:"guides",subpages:[]},{to:"/postgraphile/v3-migration/",title:"v3 â†’ v4 Migration Guide",sectionId:"guides",subpages:[]},{to:"/postgraphile/testing-jest/",title:"Testing with Jest",sectionId:"guides",subpages:[]},{to:"/postgraphile/community-plugins/",title:"Community Plugins",sectionId:"community",subpages:[]},{to:"/postgraphile/community-chat/",title:"Community Chat",sectionId:"community",subpages:[]},{to:"/postgraphile/code-of-conduct/",title:"Code of Conduct",sectionId:"community",subpages:[]},{to:"/postgraphile/introspection/",title:"Introspection?",sectionId:"faq",subpages:[]},{to:"/postgraphile/why-nullable/",title:"Why is it nullable?",sectionId:"faq",subpages:[]},{to:"/postgraphile/versioning-policy/",title:"Versioning policy?",sectionId:"faq",subpages:[]}]}},{node:{id:"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [3] >>> JSON",name:"graphile-build-pg",sections:[{id:"overview",title:"Usage"}],pages:[{to:"/graphile-build-pg/settings/",title:"Settings",sectionId:"overview",subpages:[]}]}}]},examples:{edges:[{node:{category:"functions",id:"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [0] >>> JSON",title:"Custom queries",examples:[{title:"Logged in user field",example:"create function viewer()\nreturns users\nas $$\n  select *\n  from users\n  where id = current_user_id();\n  /*\n   * current_user_id() is a function\n   * that returns the logged in user's\n   * id, e.g. by extracting from the JWT\n   * or indicated via pgSettings.\n   */\n$$ language sql stable set search_path from current;\n",exampleLanguage:"sql",result:"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1467,6 +1467,7 @@\n \n   # Chosen by fair dice roll. Guaranteed to be random. XKCD#221\n   randomNumber: Int\n+  viewer: User\n \n   # Reads a single `Forum` using its globally unique `ID`.\n   forum(\n",resultLanguage:"diff"}]}},{node:{category:"functions",id:"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [1] >>> JSON",title:"Computed columns",examples:[{title:"User primary email",example:'/*\n * Returns the primary email of the\n * current user; for all other users\n * this function will return null.\n */\ncreate function "users_primaryEmail"(u users)\nreturns text\nas $$\n  select email\n  from user_emails\n  where user_id = current_user_id()\n  and user_id = u.id\n  and is_verified is true\n  order by id asc\n  limit 1;\n$$ language sql stable set search_path from current;\n',exampleLanguage:"sql",result:"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -2586,6 +2586,7 @@\n     # A condition to be used in determining which values should be returned by the collection.\n     condition: QuizEntryCondition\n   ): QuizEntriesConnection!\n+  primaryEmail: String\n }\n \n # Contains information about the login providers this user has used, so that they may disconnect them should they wish.\n",resultLanguage:"diff"}]}},{node:{category:"functions",id:"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [2] >>> JSON",title:"Custom mutations",examples:[{title:"Insert multiple records",example:"/**\n * Occasionally you'll want to create a bunch of rows in different tables in a\n * single mutation. Here's an example of how to do that.\n *\n * Pretend we're registering quiz entries, and we want to store each answer in\n * its own table as we want to be able to operate on the answers independently\n * later.\n *\n * This means we want:\n *\n *  1. A mutation that takes input data for inserting one quiz entry and\n *  multiple answers.\n *  2. A function that inserts a new quiz entry, inserts an answer for each\n *  answer provided in the input data, and connects each answer to the created\n *  quiz entry.\n *  3. Finally, we want the function to return the inserted quiz entry itself.\n */\n\n/**\n * This type is used for input in the mutation\n */\ncreate type quiz_entry_input as (\n  question text,\n  answer int\n);\n\n/**\n * Here's the function that gets turned into a \"custom mutation\"\n */\ncreate function add_quiz_entry(\n  quiz_id int,\n  answers quiz_entry_input[]\n)\nreturns quiz_entry\nas $$\n  declare\n    q quiz_entry;\n    a quiz_entry_answer;\n  begin\n    insert into quiz_entry(user_id, quiz_id)\n      values(current_user_id(), quiz_id)\n      returning * into q;\n\n    foreach a in array answers loop\n      insert into quiz_entry_answer(quiz_entry_id, question, answer)\n        values (quiz_id, a.question, a.answer);\n    end loop;\n\n    return q;\n  end;\n$$ language plpgsql volatile strict set search_path from current;\n",exampleLanguage:"sql",result:"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1,3 +1,35 @@\n+# All input for the `addQuizEntry` mutation.\n+input AddQuizEntryInput {\n+  # An arbitrary string value with no semantic meaning. Will be included in the\n+  # payload verbatim. May be used to track mutations by the client.\n+  clientMutationId: String\n+  quizId: Int!\n+  answers: [QuizEntryInputRecordInput]!\n+}\n+\n+# The output of our `addQuizEntry` mutation.\n+type AddQuizEntryPayload {\n+  # The exact same `clientMutationId` that was provided in the mutation input,\n+  # unchanged and unused. May be used by a client to track mutations.\n+  clientMutationId: String\n+  quizEntry: QuizEntry\n+\n+  # Our root query field type. Allows us to run any query from our mutation payload.\n+  query: Query\n+\n+  # Reads a single `User` that is related to this `QuizEntry`.\n+  user: User\n+\n+  # Reads a single `Quiz` that is related to this `QuizEntry`.\n+  quiz: Quiz\n+\n+  # An edge for our `QuizEntry`. May be used by Relay 1.\n+  quizEntryEdge(\n+    # The method to use when ordering `QuizEntry`.\n+    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\n+  ): QuizEntriesEdge\n+}\n+\n # A floating point number that requires more precision than IEEE 754 binary 64\n scalar BigFloat\n \n@@ -1182,6 +1214,10 @@\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n     input: DeleteUserByUsernameInput!\n   ): DeleteUserPayload\n+  addQuizEntry(\n+    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n+    input: AddQuizEntryInput!\n+  ): AddQuizEntryPayload\n \n   # If you've forgotten your password, give us one of your email addresses and we'\n   # send you a reset token. Note this only works if you have added an email address!\n@@ -1755,6 +1791,12 @@\n   quizId: Int!\n }\n \n+# An input for mutations affecting `QuizEntryInputRecord`\n+input QuizEntryInputRecordInput {\n+  question: String\n+  answer: Int\n+}\n+\n # Represents an update to a `QuizEntry`. Fields that are set will be updated.\n input QuizEntryPatch {\n   id: Int\n",resultLanguage:"diff"}]}},{node:{category:"plugins",id:"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [3] >>> JSON",title:"Inflector",examples:[{title:"PgRenamePatchToPatchSetPlugin",example:"/**\n * Simply renames the `UserPatch` and `PostPatch` type names to be called\n * `UserPatchSet` and `PostPatchSet` instead.\n *\n * Not particularly useful, just an example. ('PatchSet' chosen to minimise\n * diff to make example clearer.)\n *\n * Replaces this inflector:\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L309-L311\n */\nmodule.exports = function PgRenamePatchToPatchSetPlugin(\n  builder\n) {\n  builder.hook(\n    \"inflection\",\n    inflector => ({\n      // Retain the existing inflectors\n      ...inflector,\n\n      // Override the patchType inflector\n      patchType(typeName) {\n        // return this.upperCamelCase(`${typeName}-patch`);\n        return this.upperCamelCase(\n          `${typeName}-patch-set`\n        );\n      },\n    })\n  );\n};\n",exampleLanguage:"javascript",result:"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -805,7 +805,7 @@\n }\n \n # Represents an update to a `Forum`. Fields that are set will be updated.\n-input ForumPatch {\n+input ForumPatchSet {\n   id: Int\n \n   # An URL-safe alias for the `Forum`.\n@@ -1269,7 +1269,7 @@\n }\n \n # Represents an update to a `Post`. Fields that are set will be updated.\n-input PostPatch {\n+input PostPatchSet {\n   # The body of the `Topic`, which Posts reply to.\n   body: String\n }\n@@ -1689,7 +1689,7 @@\n }\n \n # Represents an update to a `QuizEntryAnswer`. Fields that are set will be updated.\n-input QuizEntryAnswerPatch {\n+input QuizEntryAnswerPatchSet {\n   id: Int\n   quizEntryId: Int\n   question: String\n@@ -1756,7 +1756,7 @@\n }\n \n # Represents an update to a `QuizEntry`. Fields that are set will be updated.\n-input QuizEntryPatch {\n+input QuizEntryPatchSet {\n   id: Int\n   userId: Int\n   quizId: Int\n@@ -1772,7 +1772,7 @@\n }\n \n # Represents an update to a `Quiz`. Fields that are set will be updated.\n-input QuizPatch {\n+input QuizPatchSet {\n   id: Int\n   name: String\n   updatedAt: Datetime\n@@ -1937,7 +1937,7 @@\n }\n \n # Represents an update to a `Topic`. Fields that are set will be updated.\n-input TopicPatch {\n+input TopicPatchSet {\n   id: Int\n   forumId: Int\n   authorId: Int\n@@ -2003,7 +2003,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `Forum` being updated.\n-  forumPatch: ForumPatch!\n+  forumPatch: ForumPatchSet!\n   id: Int!\n }\n \n@@ -2014,7 +2014,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `Forum` being updated.\n-  forumPatch: ForumPatch!\n+  forumPatch: ForumPatchSet!\n \n   # An URL-safe alias for the `Forum`.\n   slug: String!\n@@ -2030,7 +2030,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `Forum` being updated.\n-  forumPatch: ForumPatch!\n+  forumPatch: ForumPatchSet!\n }\n \n # The output of our update `Forum` mutation.\n@@ -2059,7 +2059,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `Post` being updated.\n-  postPatch: PostPatch!\n+  postPatch: PostPatchSet!\n   id: Int!\n }\n \n@@ -2073,7 +2073,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `Post` being updated.\n-  postPatch: PostPatch!\n+  postPatch: PostPatchSet!\n }\n \n # The output of our update `Post` mutation.\n@@ -2108,7 +2108,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `Quiz` being updated.\n-  quizPatch: QuizPatch!\n+  quizPatch: QuizPatchSet!\n   id: Int!\n }\n \n@@ -2119,7 +2119,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n-  quizEntryAnswerPatch: QuizEntryAnswerPatch!\n+  quizEntryAnswerPatch: QuizEntryAnswerPatchSet!\n   id: Int!\n }\n \n@@ -2133,7 +2133,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n-  quizEntryAnswerPatch: QuizEntryAnswerPatch!\n+  quizEntryAnswerPatch: QuizEntryAnswerPatchSet!\n }\n \n # The output of our update `QuizEntryAnswer` mutation.\n@@ -2165,7 +2165,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `QuizEntry` being updated.\n-  quizEntryPatch: QuizEntryPatch!\n+  quizEntryPatch: QuizEntryPatchSet!\n   id: Int!\n }\n \n@@ -2179,7 +2179,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `QuizEntry` being updated.\n-  quizEntryPatch: QuizEntryPatch!\n+  quizEntryPatch: QuizEntryPatchSet!\n }\n \n # The output of our update `QuizEntry` mutation.\n@@ -2217,7 +2217,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `Quiz` being updated.\n-  quizPatch: QuizPatch!\n+  quizPatch: QuizPatchSet!\n }\n \n # The output of our update `Quiz` mutation.\n@@ -2246,7 +2246,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `Topic` being updated.\n-  topicPatch: TopicPatch!\n+  topicPatch: TopicPatchSet!\n   id: Int!\n }\n \n@@ -2260,7 +2260,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `Topic` being updated.\n-  topicPatch: TopicPatch!\n+  topicPatch: TopicPatchSet!\n }\n \n # The output of our update `Topic` mutation.\n@@ -2295,7 +2295,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `UserAuthentication` being updated.\n-  userAuthenticationPatch: UserAuthenticationPatch!\n+  userAuthenticationPatch: UserAuthenticationPatchSet!\n   id: Int!\n }\n \n@@ -2306,7 +2306,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `UserAuthentication` being updated.\n-  userAuthenticationPatch: UserAuthenticationPatch!\n+  userAuthenticationPatch: UserAuthenticationPatchSet!\n \n   # The login service used, e.g. `twitter` or `github`.\n   service: String!\n@@ -2325,7 +2325,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `UserAuthentication` being updated.\n-  userAuthenticationPatch: UserAuthenticationPatch!\n+  userAuthenticationPatch: UserAuthenticationPatchSet!\n }\n \n # The output of our update `UserAuthentication` mutation.\n@@ -2354,7 +2354,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `User` being updated.\n-  userPatch: UserPatch!\n+  userPatch: UserPatchSet!\n \n   # Unique identifier for the user.\n   id: Int!\n@@ -2367,7 +2367,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `User` being updated.\n-  userPatch: UserPatch!\n+  userPatch: UserPatchSet!\n \n   # Public-facing username (or 'handle') of the user.\n   username: String!\n@@ -2380,7 +2380,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `UserEmail` being updated.\n-  userEmailPatch: UserEmailPatch!\n+  userEmailPatch: UserEmailPatchSet!\n   id: Int!\n }\n \n@@ -2391,7 +2391,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `UserEmail` being updated.\n-  userEmailPatch: UserEmailPatch!\n+  userEmailPatch: UserEmailPatchSet!\n   userId: Int!\n \n   # The users email address, in `a@b.c` format.\n@@ -2408,7 +2408,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `UserEmail` being updated.\n-  userEmailPatch: UserEmailPatch!\n+  userEmailPatch: UserEmailPatchSet!\n }\n \n # The output of our update `UserEmail` mutation.\n@@ -2443,7 +2443,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `User` being updated.\n-  userPatch: UserPatch!\n+  userPatch: UserPatchSet!\n }\n \n # The output of our update `User` mutation.\n@@ -2617,7 +2617,7 @@\n }\n \n # Represents an update to a `UserAuthentication`. Fields that are set will be updated.\n-input UserAuthenticationPatch {\n+input UserAuthenticationPatchSet {\n   id: Int\n \n   # The login service used, e.g. `twitter` or `github`.\n@@ -2713,7 +2713,7 @@\n }\n \n # Represents an update to a `UserEmail`. Fields that are set will be updated.\n-input UserEmailPatch {\n+input UserEmailPatchSet {\n   id: Int\n   userId: Int\n \n@@ -2791,7 +2791,7 @@\n }\n \n # Represents an update to a `User`. Fields that are set will be updated.\n-input UserPatch {\n+input UserPatchSet {\n   # Unique identifier for the user.\n   id: Int\n \n",resultLanguage:"diff"},{title:"PgShortenAllRowsInflectorPlugin",example:'/**\n * Simply renames the `allUsers` and `allPosts` Query fields to `users` and\n * `posts` respectively.\n *\n * Not particularly useful, just an example.\n *\n * Replaces this inflector:\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L460-L464\n */\nmodule.exports = function PgShortenAllRowsInflectorPlugin(\n  builder\n) {\n  builder.hook(\n    "inflection",\n    inflector => ({\n      // Retain the existing inflectors\n      ...inflector,\n\n      // Override the allRows inflector\n      allRows(table) {\n        return this.camelCase(\n          // Was: `all-${this.pluralize(this._singularizedTableName(table))}`\n          // Now:\n          this.pluralize(\n            this._singularizedTableName(\n              table\n            )\n          )\n        );\n      },\n    })\n  );\n};\n',exampleLanguage:"javascript",result:"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1333,7 +1333,7 @@\n   ): Node\n \n   # Reads and enables pagination through a set of `Forum`.\n-  allForums(\n+  forums(\n     # Only read the first `n` values of the set.\n     first: Int\n \n@@ -1358,7 +1358,7 @@\n   ): ForumsConnection\n \n   # Reads and enables pagination through a set of `Quiz`.\n-  allQuizzes(\n+  quizzes(\n     # Only read the first `n` values of the set.\n     first: Int\n \n@@ -1383,7 +1383,7 @@\n   ): QuizzesConnection\n \n   # Reads and enables pagination through a set of `QuizEntry`.\n-  allQuizEntries(\n+  quizEntries(\n     # Only read the first `n` values of the set.\n     first: Int\n \n@@ -1408,7 +1408,7 @@\n   ): QuizEntriesConnection\n \n   # Reads and enables pagination through a set of `QuizEntryAnswer`.\n-  allQuizEntryAnswers(\n+  quizEntryAnswers(\n     # Only read the first `n` values of the set.\n     first: Int\n \n",resultLanguage:"diff"}]}},{node:{category:"plugins",id:"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [4] >>> JSON",title:"Types",examples:[{title:"PgNumericToFloatPlugin",example:'/**\n * Use of this plugin is NOT recommended, please see\n * PgSmallNumericToFloatPlugin for a more appropriate replacement if you need\n * one.\n *\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\n * for *all* DECIMAL / NUMERIC values, for making PostGraphile v4 slightly more\n * backwards-compatible with v3.\n *\n * It\'s generally a bad idea to use floating point numbers to represent\n * arbitrary precision numbers such as NUMERIC because loss of precision can\n * occur.\n */\nmodule.exports = function PgNumericToFloatPlugin(\n  builder\n) {\n  builder.hook("build", build => {\n    // Register a type handler for NUMERIC / DECIMAL (oid = 1700), always\n    // returning the GraphQLFloat type\n    build.pgRegisterGqlTypeByTypeId(\n      "1700",\n      () => build.graphql.GraphQLFloat\n    );\n    return build;\n  });\n};\n',exampleLanguage:"javascript",result:"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1,6 +1,3 @@\n-# A floating point number that requires more precision than IEEE 754 binary 64\n-scalar BigFloat\n-\n # All input for the create `Forum` mutation.\n input CreateForumInput {\n   # An arbitrary string value with no semantic meaning. Will be included in the\n@@ -1529,8 +1526,8 @@\n   id: Int!\n   name: String!\n   updatedAt: Datetime!\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n+  precision12Scale2: Float\n+  precision200Scale100: Float\n \n   # Reads and enables pagination through a set of `QuizEntry`.\n   quizEntries(\n@@ -1570,10 +1567,10 @@\n   updatedAt: Datetime\n \n   # Checks for equality with the objectâ€™s `precision12Scale2` field.\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n \n   # Checks for equality with the objectâ€™s `precision200Scale100` field.\n-  precision200Scale100: BigFloat\n+  precision200Scale100: Float\n }\n \n # A connection to a list of `QuizEntry` values.\n@@ -1767,8 +1764,8 @@\n   id: Int\n   name: String!\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n+  precision12Scale2: Float\n+  precision200Scale100: Float\n }\n \n # Represents an update to a `Quiz`. Fields that are set will be updated.\n@@ -1776,8 +1773,8 @@\n   id: Int\n   name: String\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n+  precision12Scale2: Float\n+  precision200Scale100: Float\n }\n \n # A connection to a list of `Quiz` values.\n",resultLanguage:"diff"},{title:"PgSmallNumericToFloatPlugin",example:'/**\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\n * for DECIMAL / NUMERIC values that have a precision and scale under the given\n * limits (currently 12 and 2 respectively).\n *\n * It\'s generally a bad idea to use floating point numbers to represent\n * arbitrary precision numbers such as NUMERIC because loss of precision can\n * occur; however some systems are okay with this compromise.\n */\nmodule.exports = function PgSmallNumericToFloatPlugin(\n  builder,\n  {\n    pgNumericToFloatPrecisionCap = 12,\n    pgNumericToFloatScaleCap = 2,\n  }\n) {\n  builder.hook("build", build => {\n    // Register a type handler for NUMERIC / DECIMAL (oid = 1700)\n    build.pgRegisterGqlTypeByTypeId(\n      "1700",\n      (_set, modifier) => {\n        if (\n          modifier &&\n          typeof modifier ===\n            "number" &&\n          modifier > 0\n        ) {\n          // Ref: https://stackoverflow.com/a/3351120/141284\n          const precision =\n            ((modifier - 4) >> 16) &\n            65535;\n          const scale =\n            (modifier - 4) & 65535;\n          if (\n            precision <=\n              pgNumericToFloatPrecisionCap &&\n            scale <=\n              pgNumericToFloatScaleCap\n          ) {\n            // This number is no more precise than our cap, so we\'re declaring\n            // that we can handle it as a float:\n            return build.graphql\n              .GraphQLFloat;\n          }\n        }\n        // If all else fails, let PostGraphile do it\'s default handling - i.e.\n        // BigFloat\n        return null;\n      }\n    );\n\n    // We didn\'t modify _init, but we still must return it.\n    return build;\n  });\n};\n',exampleLanguage:"javascript",result:"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1529,7 +1529,7 @@\n   id: Int!\n   name: String!\n   updatedAt: Datetime!\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n   precision200Scale100: BigFloat\n \n   # Reads and enables pagination through a set of `QuizEntry`.\n@@ -1570,7 +1570,7 @@\n   updatedAt: Datetime\n \n   # Checks for equality with the objectâ€™s `precision12Scale2` field.\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n \n   # Checks for equality with the objectâ€™s `precision200Scale100` field.\n   precision200Scale100: BigFloat\n@@ -1767,7 +1767,7 @@\n   id: Int\n   name: String!\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n   precision200Scale100: BigFloat\n }\n \n@@ -1776,7 +1776,7 @@\n   id: Int\n   name: String\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n   precision200Scale100: BigFloat\n }\n \n",resultLanguage:"diff"},{title:"SetInputObjectDefaultValue",example:'/**\n * This plugin sets a defaultValue on all input object fields that match the\n * given criteria (specifically the \'create\' input types, for columns named\n * \'name\')\n */\nmodule.exports = function SetInputObjectDefaultValue(\n  builder\n) {\n  builder.hook(\n    "GraphQLInputObjectType:fields:field",\n    (field, build, context) => {\n      const {\n        scope: {\n          isPgRowType,\n          isInputType,\n          isPgPatch,\n          pgFieldIntrospection: attr,\n        },\n      } = context;\n      if (\n        !isPgRowType ||\n        !isInputType ||\n        isPgPatch ||\n        !attr ||\n        attr.kind !== "attribute" ||\n        attr.name !== "name"\n      ) {\n        return field;\n      }\n\n      return {\n        ...field,\n        type: build.graphql.getNamedType(\n          field.type\n        ), // Since it has a default, it can be nullable\n        defaultValue:\n          // attr.tags.defaultValue: enables overriding this with a\n          // `@defaultValue Alice Smith` smart comment\n          attr.tags.defaultValue ||\n          "Bobby Tables",\n      };\n    }\n  );\n};\n',exampleLanguage:"javascript",result:'--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -796,7 +796,7 @@\n   slug: String!\n \n   # The name of the `Forum` (indicates its subject matter).\n-  name: String!\n+  name: String = "Bobby Tables"\n \n   # A brief description of the `Forum` including it\'s purpose.\n   description: String\n@@ -1765,7 +1765,7 @@\n # An input for mutations affecting `Quiz`\n input QuizInput {\n   id: Int\n-  name: String!\n+  name: String = "Bobby Tables"\n   updatedAt: Datetime\n   precision12Scale2: BigFloat\n   precision200Scale100: BigFloat\n@@ -2779,7 +2779,7 @@\n   username: String!\n \n   # Public-facing name (or pseudonym) of the user.\n-  name: String\n+  name: String = "Bobby Tables"\n \n   # Optional avatar URL.\n   avatarUrl: String\n',resultLanguage:"diff"}]}},{node:{category:"plugins",id:"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [5] >>> JSON",title:"Mutation wrappers",examples:[{title:"OverrideArgValuePlugin",example:'/**\n * This plugin sets the `input.quizPatch.updatedAt` to the current timestamp in\n * the `updateQuiz*` mutations IFF it\'s not already set.\n */\nmodule.exports = function SetInputObjectDefaultValue(\n  builder\n) {\n  builder.hook(\n    "GraphQLObjectType:fields:field",\n    (field, build, context) => {\n      const {\n        scope: {\n          isPgUpdateMutationField,\n          pgFieldIntrospection: table,\n        },\n      } = context;\n      if (\n        !isPgUpdateMutationField ||\n        table.kind !== "class" ||\n        table.name !== "quiz"\n      ) {\n        return field;\n      }\n\n      const oldResolve =\n        field.resolve;\n\n      return {\n        ...field,\n        resolve(\n          _mutation,\n          args,\n          context,\n          info\n        ) {\n          // Override the `updatedAt` field if it\'s not already set.\n          if (\n            args.input.quizPatch\n              .updatedAt == null\n          ) {\n            args.input.quizPatch.updatedAt = new Date().toISOString();\n          }\n          return oldResolve(\n            _mutation,\n            args,\n            context,\n            info\n          );\n        },\n      };\n    }\n  );\n};\n\n// Tested via:\n// npx postgraphile --append-plugins @graphile-contrib/pg-simplify-inflector,`pwd`/examples/plugins/0300_mutation_wrappers/OverrideArgValuePlugin.js -c graphile_org_demo -s app_public\n',exampleLanguage:"javascript",result:"",resultLanguage:"diff"}]}},{node:{category:"plugins",id:"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [6] >>> JSON",title:"Customisation",examples:[{title:"OmitMutationsByDefaultPlugin",example:'/**\n * This plugin treats any table that doesn\'t have an `@omit` comment as if it\n * had `@omit create,update,delete` (thereby disabling mutations).\n *\n * Override it by adding a smart comment to the table. To restore all\n * mutations, do `COMMENT ON my_table IS E\'@omit :\';` (the `:` is special\n * syntax for "nothing").\n */\nmodule.exports = function OmitMutationsByDefaultPlugin(\n  builder\n) {\n  builder.hook("build", build => {\n    const {\n      pgIntrospectionResultsByKind,\n    } = build;\n    pgIntrospectionResultsByKind.class\n      .filter(\n        table =>\n          table.isSelectable &&\n          table.namespace\n      )\n      .forEach(table => {\n        if (!("omit" in table.tags)) {\n          table.tags.omit =\n            "create,update,delete";\n        }\n      });\n    return build;\n  });\n};\n\n// Tested via:\n// npx postgraphile --append-plugins @graphile-contrib/pg-simplify-inflector,`pwd`/examples/plugins/0400_customisation/OmitMutationsByDefaultPlugin.js -c graphile_org_demo -s app_public\n',exampleLanguage:"javascript",result:"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1,35 +1,6 @@\n # A floating point number that requires more precision than IEEE 754 binary 64\n scalar BigFloat\n \n-# All input for the create `Forum` mutation.\n-input CreateForumInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The `Forum` to be created by this mutation.\n-  forum: ForumInput!\n-}\n-\n-# The output of our create `Forum` mutation.\n-type CreateForumPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `Forum` that was created by this mutation.\n-  forum: Forum\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # An edge for our `Forum`. May be used by Relay 1.\n-  forumEdge(\n-    # The method to use when ordering `Forum`.\n-    orderBy: [ForumsOrderBy!] = PRIMARY_KEY_ASC\n-  ): ForumsEdge\n-}\n-\n # All input for the create `Post` mutation.\n input CreatePostInput {\n   # An arbitrary string value with no semantic meaning. Will be included in the\n@@ -65,102 +36,6 @@\n   ): PostsEdge\n }\n \n-# All input for the create `QuizEntryAnswer` mutation.\n-input CreateQuizEntryAnswerInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The `QuizEntryAnswer` to be created by this mutation.\n-  quizEntryAnswer: QuizEntryAnswerInput!\n-}\n-\n-# The output of our create `QuizEntryAnswer` mutation.\n-type CreateQuizEntryAnswerPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `QuizEntryAnswer` that was created by this mutation.\n-  quizEntryAnswer: QuizEntryAnswer\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\n-  quizEntry: QuizEntry\n-\n-  # An edge for our `QuizEntryAnswer`. May be used by Relay 1.\n-  quizEntryAnswerEdge(\n-    # The method to use when ordering `QuizEntryAnswer`.\n-    orderBy: [QuizEntryAnswersOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntryAnswersEdge\n-}\n-\n-# All input for the create `QuizEntry` mutation.\n-input CreateQuizEntryInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The `QuizEntry` to be created by this mutation.\n-  quizEntry: QuizEntryInput!\n-}\n-\n-# The output of our create `QuizEntry` mutation.\n-type CreateQuizEntryPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `QuizEntry` that was created by this mutation.\n-  quizEntry: QuizEntry\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # Reads a single `User` that is related to this `QuizEntry`.\n-  user: User\n-\n-  # Reads a single `Quiz` that is related to this `QuizEntry`.\n-  quiz: Quiz\n-\n-  # An edge for our `QuizEntry`. May be used by Relay 1.\n-  quizEntryEdge(\n-    # The method to use when ordering `QuizEntry`.\n-    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntriesEdge\n-}\n-\n-# All input for the create `Quiz` mutation.\n-input CreateQuizInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The `Quiz` to be created by this mutation.\n-  quiz: QuizInput!\n-}\n-\n-# The output of our create `Quiz` mutation.\n-type CreateQuizPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `Quiz` that was created by this mutation.\n-  quiz: Quiz\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # An edge for our `Quiz`. May be used by Relay 1.\n-  quizEdge(\n-    # The method to use when ordering `Quiz`.\n-    orderBy: [QuizzesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizzesEdge\n-}\n-\n # All input for the create `Topic` mutation.\n input CreateTopicInput {\n   # An arbitrary string value with no semantic meaning. Will be included in the\n@@ -293,54 +168,6 @@\n # 8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.\n scalar Datetime\n \n-# All input for the `deleteForumById` mutation.\n-input DeleteForumByIdInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-# All input for the `deleteForumBySlug` mutation.\n-input DeleteForumBySlugInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # An URL-safe alias for the `Forum`.\n-  slug: String!\n-}\n-\n-# All input for the `deleteForum` mutation.\n-input DeleteForumInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The globally unique `ID` which will identify a single `Forum` to be deleted.\n-  nodeId: ID!\n-}\n-\n-# The output of our delete `Forum` mutation.\n-type DeleteForumPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `Forum` that was deleted by this mutation.\n-  forum: Forum\n-  deletedForumId: ID\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # An edge for our `Forum`. May be used by Relay 1.\n-  forumEdge(\n-    # The method to use when ordering `Forum`.\n-    orderBy: [ForumsOrderBy!] = PRIMARY_KEY_ASC\n-  ): ForumsEdge\n-}\n-\n # All input for the `deletePostById` mutation.\n input DeletePostByIdInput {\n   # An arbitrary string value with no semantic meaning. Will be included in the\n@@ -385,129 +212,6 @@\n   ): PostsEdge\n }\n \n-# All input for the `deleteQuizById` mutation.\n-input DeleteQuizByIdInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-# All input for the `deleteQuizEntryAnswerById` mutation.\n-input DeleteQuizEntryAnswerByIdInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-# All input for the `deleteQuizEntryAnswer` mutation.\n-input DeleteQuizEntryAnswerInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The globally unique `ID` which will identify a single `QuizEntryAnswer` to be deleted.\n-  nodeId: ID!\n-}\n-\n-# The output of our delete `QuizEntryAnswer` mutation.\n-type DeleteQuizEntryAnswerPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `QuizEntryAnswer` that was deleted by this mutation.\n-  quizEntryAnswer: QuizEntryAnswer\n-  deletedQuizEntryAnswerId: ID\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\n-  quizEntry: QuizEntry\n-\n-  # An edge for our `QuizEntryAnswer`. May be used by Relay 1.\n-  quizEntryAnswerEdge(\n-    # The method to use when ordering `QuizEntryAnswer`.\n-    orderBy: [QuizEntryAnswersOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntryAnswersEdge\n-}\n-\n-# All input for the `deleteQuizEntryById` mutation.\n-input DeleteQuizEntryByIdInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-# All input for the `deleteQuizEntry` mutation.\n-input DeleteQuizEntryInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The globally unique `ID` which will identify a single `QuizEntry` to be deleted.\n-  nodeId: ID!\n-}\n-\n-# The output of our delete `QuizEntry` mutation.\n-type DeleteQuizEntryPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `QuizEntry` that was deleted by this mutation.\n-  quizEntry: QuizEntry\n-  deletedQuizEntryId: ID\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # Reads a single `User` that is related to this `QuizEntry`.\n-  user: User\n-\n-  # Reads a single `Quiz` that is related to this `QuizEntry`.\n-  quiz: Quiz\n-\n-  # An edge for our `QuizEntry`. May be used by Relay 1.\n-  quizEntryEdge(\n-    # The method to use when ordering `QuizEntry`.\n-    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntriesEdge\n-}\n-\n-# All input for the `deleteQuiz` mutation.\n-input DeleteQuizInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The globally unique `ID` which will identify a single `Quiz` to be deleted.\n-  nodeId: ID!\n-}\n-\n-# The output of our delete `Quiz` mutation.\n-type DeleteQuizPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `Quiz` that was deleted by this mutation.\n-  quiz: Quiz\n-  deletedQuizId: ID\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # An edge for our `Quiz`. May be used by Relay 1.\n-  quizEdge(\n-    # The method to use when ordering `Quiz`.\n-    orderBy: [QuizzesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizzesEdge\n-}\n-\n # All input for the `deleteTopicById` mutation.\n input DeleteTopicByIdInput {\n   # An arbitrary string value with no semantic meaning. Will be included in the\n@@ -788,38 +492,6 @@\n   updatedAt: Datetime\n }\n \n-# An input for mutations affecting `Forum`\n-input ForumInput {\n-  id: Int\n-\n-  # An URL-safe alias for the `Forum`.\n-  slug: String!\n-\n-  # The name of the `Forum` (indicates its subject matter).\n-  name: String!\n-\n-  # A brief description of the `Forum` including it's purpose.\n-  description: String\n-  createdAt: Datetime\n-  updatedAt: Datetime\n-}\n-\n-# Represents an update to a `Forum`. Fields that are set will be updated.\n-input ForumPatch {\n-  id: Int\n-\n-  # An URL-safe alias for the `Forum`.\n-  slug: String\n-\n-  # The name of the `Forum` (indicates its subject matter).\n-  name: String\n-\n-  # A brief description of the `Forum` including it's purpose.\n-  description: String\n-  createdAt: Datetime\n-  updatedAt: Datetime\n-}\n-\n # A connection to a list of `Forum` values.\n type ForumsConnection {\n   # A list of `Forum` objects.\n@@ -865,36 +537,12 @@\n \n # The root mutation type which contains root level fields which mutate data.\n type Mutation {\n-  # Creates a single `Forum`.\n-  createForum(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: CreateForumInput!\n-  ): CreateForumPayload\n-\n   # Creates a single `Post`.\n   createPost(\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n     input: CreatePostInput!\n   ): CreatePostPayload\n \n-  # Creates a single `Quiz`.\n-  createQuiz(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: CreateQuizInput!\n-  ): CreateQuizPayload\n-\n-  # Creates a single `QuizEntry`.\n-  createQuizEntry(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: CreateQuizEntryInput!\n-  ): CreateQuizEntryPayload\n-\n-  # Creates a single `QuizEntryAnswer`.\n-  createQuizEntryAnswer(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: CreateQuizEntryAnswerInput!\n-  ): CreateQuizEntryAnswerPayload\n-\n   # Creates a single `Topic`.\n   createTopic(\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n@@ -919,24 +567,6 @@\n     input: CreateUserInput!\n   ): CreateUserPayload\n \n-  # Updates a single `Forum` using its globally unique id and a patch.\n-  updateForum(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: UpdateForumInput!\n-  ): UpdateForumPayload\n-\n-  # Updates a single `Forum` using a unique key and a patch.\n-  updateForumById(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: UpdateForumByIdInput!\n-  ): UpdateForumPayload\n-\n-  # Updates a single `Forum` using a unique key and a patch.\n-  updateForumBySlug(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: UpdateForumBySlugInput!\n-  ): UpdateForumPayload\n-\n   # Updates a single `Post` using its globally unique id and a patch.\n   updatePost(\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n@@ -949,42 +579,6 @@\n     input: UpdatePostByIdInput!\n   ): UpdatePostPayload\n \n-  # Updates a single `Quiz` using its globally unique id and a patch.\n-  updateQuiz(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: UpdateQuizInput!\n-  ): UpdateQuizPayload\n-\n-  # Updates a single `Quiz` using a unique key and a patch.\n-  updateQuizById(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: UpdateQuizByIdInput!\n-  ): UpdateQuizPayload\n-\n-  # Updates a single `QuizEntry` using its globally unique id and a patch.\n-  updateQuizEntry(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: UpdateQuizEntryInput!\n-  ): UpdateQuizEntryPayload\n-\n-  # Updates a single `QuizEntry` using a unique key and a patch.\n-  updateQuizEntryById(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: UpdateQuizEntryByIdInput!\n-  ): UpdateQuizEntryPayload\n-\n-  # Updates a single `QuizEntryAnswer` using its globally unique id and a patch.\n-  updateQuizEntryAnswer(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: UpdateQuizEntryAnswerInput!\n-  ): UpdateQuizEntryAnswerPayload\n-\n-  # Updates a single `QuizEntryAnswer` using a unique key and a patch.\n-  updateQuizEntryAnswerById(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: UpdateQuizEntryAnswerByIdInput!\n-  ): UpdateQuizEntryAnswerPayload\n-\n   # Updates a single `Topic` using its globally unique id and a patch.\n   updateTopic(\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n@@ -1051,24 +645,6 @@\n     input: UpdateUserByUsernameInput!\n   ): UpdateUserPayload\n \n-  # Deletes a single `Forum` using its globally unique id.\n-  deleteForum(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: DeleteForumInput!\n-  ): DeleteForumPayload\n-\n-  # Deletes a single `Forum` using a unique key.\n-  deleteForumById(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: DeleteForumByIdInput!\n-  ): DeleteForumPayload\n-\n-  # Deletes a single `Forum` using a unique key.\n-  deleteForumBySlug(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: DeleteForumBySlugInput!\n-  ): DeleteForumPayload\n-\n   # Deletes a single `Post` using its globally unique id.\n   deletePost(\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n@@ -1081,42 +657,6 @@\n     input: DeletePostByIdInput!\n   ): DeletePostPayload\n \n-  # Deletes a single `Quiz` using its globally unique id.\n-  deleteQuiz(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: DeleteQuizInput!\n-  ): DeleteQuizPayload\n-\n-  # Deletes a single `Quiz` using a unique key.\n-  deleteQuizById(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: DeleteQuizByIdInput!\n-  ): DeleteQuizPayload\n-\n-  # Deletes a single `QuizEntry` using its globally unique id.\n-  deleteQuizEntry(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: DeleteQuizEntryInput!\n-  ): DeleteQuizEntryPayload\n-\n-  # Deletes a single `QuizEntry` using a unique key.\n-  deleteQuizEntryById(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: DeleteQuizEntryByIdInput!\n-  ): DeleteQuizEntryPayload\n-\n-  # Deletes a single `QuizEntryAnswer` using its globally unique id.\n-  deleteQuizEntryAnswer(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: DeleteQuizEntryAnswerInput!\n-  ): DeleteQuizEntryAnswerPayload\n-\n-  # Deletes a single `QuizEntryAnswer` using a unique key.\n-  deleteQuizEntryAnswerById(\n-    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n-    input: DeleteQuizEntryAnswerByIdInput!\n-  ): DeleteQuizEntryAnswerPayload\n-\n   # Deletes a single `Topic` using its globally unique id.\n   deleteTopic(\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\n@@ -1680,22 +1220,6 @@\n   answer: Int\n }\n \n-# An input for mutations affecting `QuizEntryAnswer`\n-input QuizEntryAnswerInput {\n-  id: Int\n-  quizEntryId: Int!\n-  question: String!\n-  answer: Int\n-}\n-\n-# Represents an update to a `QuizEntryAnswer`. Fields that are set will be updated.\n-input QuizEntryAnswerPatch {\n-  id: Int\n-  quizEntryId: Int\n-  question: String\n-  answer: Int\n-}\n-\n # A connection to a list of `QuizEntryAnswer` values.\n type QuizEntryAnswersConnection {\n   # A list of `QuizEntryAnswer` objects.\n@@ -1748,38 +1272,6 @@\n   quizId: Int\n }\n \n-# An input for mutations affecting `QuizEntry`\n-input QuizEntryInput {\n-  id: Int\n-  userId: Int!\n-  quizId: Int!\n-}\n-\n-# Represents an update to a `QuizEntry`. Fields that are set will be updated.\n-input QuizEntryPatch {\n-  id: Int\n-  userId: Int\n-  quizId: Int\n-}\n-\n-# An input for mutations affecting `Quiz`\n-input QuizInput {\n-  id: Int\n-  name: String!\n-  updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n-}\n-\n-# Represents an update to a `Quiz`. Fields that are set will be updated.\n-input QuizPatch {\n-  id: Int\n-  name: String\n-  updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n-}\n-\n # A connection to a list of `Quiz` values.\n type QuizzesConnection {\n   # A list of `Quiz` objects.\n@@ -1996,62 +1488,6 @@\n   PRIMARY_KEY_DESC\n }\n \n-# All input for the `updateForumById` mutation.\n-input UpdateForumByIdInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # An object where the defined keys will be set on the `Forum` being updated.\n-  forumPatch: ForumPatch!\n-  id: Int!\n-}\n-\n-# All input for the `updateForumBySlug` mutation.\n-input UpdateForumBySlugInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # An object where the defined keys will be set on the `Forum` being updated.\n-  forumPatch: ForumPatch!\n-\n-  # An URL-safe alias for the `Forum`.\n-  slug: String!\n-}\n-\n-# All input for the `updateForum` mutation.\n-input UpdateForumInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The globally unique `ID` which will identify a single `Forum` to be updated.\n-  nodeId: ID!\n-\n-  # An object where the defined keys will be set on the `Forum` being updated.\n-  forumPatch: ForumPatch!\n-}\n-\n-# The output of our update `Forum` mutation.\n-type UpdateForumPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `Forum` that was updated by this mutation.\n-  forum: Forum\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # An edge for our `Forum`. May be used by Relay 1.\n-  forumEdge(\n-    # The method to use when ordering `Forum`.\n-    orderBy: [ForumsOrderBy!] = PRIMARY_KEY_ASC\n-  ): ForumsEdge\n-}\n-\n # All input for the `updatePostById` mutation.\n input UpdatePostByIdInput {\n   # An arbitrary string value with no semantic meaning. Will be included in the\n@@ -2101,144 +1537,6 @@\n   ): PostsEdge\n }\n \n-# All input for the `updateQuizById` mutation.\n-input UpdateQuizByIdInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # An object where the defined keys will be set on the `Quiz` being updated.\n-  quizPatch: QuizPatch!\n-  id: Int!\n-}\n-\n-# All input for the `updateQuizEntryAnswerById` mutation.\n-input UpdateQuizEntryAnswerByIdInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n-  quizEntryAnswerPatch: QuizEntryAnswerPatch!\n-  id: Int!\n-}\n-\n-# All input for the `updateQuizEntryAnswer` mutation.\n-input UpdateQuizEntryAnswerInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The globally unique `ID` which will identify a single `QuizEntryAnswer` to be updated.\n-  nodeId: ID!\n-\n-  # An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n-  quizEntryAnswerPatch: QuizEntryAnswerPatch!\n-}\n-\n-# The output of our update `QuizEntryAnswer` mutation.\n-type UpdateQuizEntryAnswerPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `QuizEntryAnswer` that was updated by this mutation.\n-  quizEntryAnswer: QuizEntryAnswer\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\n-  quizEntry: QuizEntry\n-\n-  # An edge for our `QuizEntryAnswer`. May be used by Relay 1.\n-  quizEntryAnswerEdge(\n-    # The method to use when ordering `QuizEntryAnswer`.\n-    orderBy: [QuizEntryAnswersOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntryAnswersEdge\n-}\n-\n-# All input for the `updateQuizEntryById` mutation.\n-input UpdateQuizEntryByIdInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # An object where the defined keys will be set on the `QuizEntry` being updated.\n-  quizEntryPatch: QuizEntryPatch!\n-  id: Int!\n-}\n-\n-# All input for the `updateQuizEntry` mutation.\n-input UpdateQuizEntryInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The globally unique `ID` which will identify a single `QuizEntry` to be updated.\n-  nodeId: ID!\n-\n-  # An object where the defined keys will be set on the `QuizEntry` being updated.\n-  quizEntryPatch: QuizEntryPatch!\n-}\n-\n-# The output of our update `QuizEntry` mutation.\n-type UpdateQuizEntryPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `QuizEntry` that was updated by this mutation.\n-  quizEntry: QuizEntry\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # Reads a single `User` that is related to this `QuizEntry`.\n-  user: User\n-\n-  # Reads a single `Quiz` that is related to this `QuizEntry`.\n-  quiz: Quiz\n-\n-  # An edge for our `QuizEntry`. May be used by Relay 1.\n-  quizEntryEdge(\n-    # The method to use when ordering `QuizEntry`.\n-    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntriesEdge\n-}\n-\n-# All input for the `updateQuiz` mutation.\n-input UpdateQuizInput {\n-  # An arbitrary string value with no semantic meaning. Will be included in the\n-  # payload verbatim. May be used to track mutations by the client.\n-  clientMutationId: String\n-\n-  # The globally unique `ID` which will identify a single `Quiz` to be updated.\n-  nodeId: ID!\n-\n-  # An object where the defined keys will be set on the `Quiz` being updated.\n-  quizPatch: QuizPatch!\n-}\n-\n-# The output of our update `Quiz` mutation.\n-type UpdateQuizPayload {\n-  # The exact same `clientMutationId` that was provided in the mutation input,\n-  # unchanged and unused. May be used by a client to track mutations.\n-  clientMutationId: String\n-\n-  # The `Quiz` that was updated by this mutation.\n-  quiz: Quiz\n-\n-  # Our root query field type. Allows us to run any query from our mutation payload.\n-  query: Query\n-\n-  # An edge for our `Quiz`. May be used by Relay 1.\n-  quizEdge(\n-    # The method to use when ordering `Quiz`.\n-    orderBy: [QuizzesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizzesEdge\n-}\n-\n # All input for the `updateTopicById` mutation.\n input UpdateTopicByIdInput {\n   # An arbitrary string value with no semantic meaning. Will be included in the\n",
resultLanguage:"diff"}]}},{node:{category:"queries",id:"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [7] >>> JSON",title:"Basic",examples:[{title:"Forums",example:"{\n  allForums {\n    nodes {\n      nodeId\n      id\n      slug\n      name\n      description\n    }\n  }\n}\n",exampleLanguage:"graphql",result:'{\n  "allForums": {\n    "nodes": [\n      {\n        "nodeId": "WyJmb3J1bXMiLDFd",\n        "id": 1,\n        "slug": "cat-life",\n        "name": "Cat Life",\n        "description":\n          "A forum all about cats and how fluffy they are and how they completely ignore their owners unless there is food. Or yarn."\n      },\n      {\n        "nodeId": "WyJmb3J1bXMiLDJd",\n        "id": 2,\n        "slug": "dog-life",\n        "name": "Dog Life",\n        "description": ""\n      },\n      {\n        "nodeId": "WyJmb3J1bXMiLDNd",\n        "id": 3,\n        "slug": "slug-life",\n        "name": "Slug Life",\n        "description": ""\n      }\n    ]\n  }\n}\n',resultLanguage:"json"},{title:"Forum by slug",example:'{\n  forumBySlug(slug: "slug-life") {\n    nodeId\n    id\n    slug\n    name\n    description\n  }\n}\n',exampleLanguage:"graphql",result:'{\n  "forumBySlug": {\n    "nodeId": "WyJmb3J1bXMiLDNd",\n    "id": 3,\n    "slug": "slug-life",\n    "name": "Slug Life",\n    "description": ""\n  }\n}\n',resultLanguage:"json"}]}},{node:{category:"queries",id:"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [8] >>> JSON",title:"Collections",examples:[{title:"First offset",example:"{\n  allForums(first: 1, offset: 1) {\n    nodes {\n      nodeId\n      id\n      name\n    }\n  }\n}\n",exampleLanguage:"graphql",result:'{\n  "allForums": {\n    "nodes": [\n      {\n        "nodeId": "WyJmb3J1bXMiLDJd",\n        "id": 2,\n        "name": "Dog Life"\n      }\n    ]\n  }\n}\n',resultLanguage:"json"},{title:"Relation condition",example:'{\n  forumBySlug(slug: "cat-life") {\n    nodeId\n    id\n    name\n    topics(\n      condition: { authorId: 1 }\n    ) {\n      nodes {\n        nodeId\n        id\n        title\n      }\n    }\n  }\n}\n',exampleLanguage:"graphql",result:'{\n  "forumBySlug": {\n    "nodeId": "WyJmb3J1bXMiLDFd",\n    "id": 1,\n    "name": "Cat Life",\n    "topics": {\n      "nodes": [\n        {\n          "nodeId":\n            "WyJ0b3BpY3MiLDFd",\n          "id": 1,\n          "title": "cats cats cats"\n        },\n        {\n          "nodeId":\n            "WyJ0b3BpY3MiLDJd",\n          "id": 2,\n          "title": "snooze life"\n        },\n        {\n          "nodeId":\n            "WyJ0b3BpY3MiLDNd",\n          "id": 3,\n          "title": "too hot"\n        }\n      ]\n    }\n  }\n}\n',resultLanguage:"json"}]}},{node:{category:"queries",id:"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [9] >>> JSON",title:"Relations",examples:[{title:"Forums topics posts",example:"{\n  forumById(id: 1) {\n    name\n    topics(\n      first: 1\n      orderBy: [CREATED_AT_ASC]\n    ) {\n      nodes {\n        id\n        title\n        bodySummary\n        author {\n          id\n          username\n        }\n        posts(\n          first: 1\n          orderBy: [ID_DESC]\n        ) {\n          nodes {\n            id\n            author {\n              id\n              username\n            }\n            body\n          }\n        }\n      }\n    }\n  }\n}\n",exampleLanguage:"graphql",result:'{\n  "forumById": {\n    "name": "Cat Life",\n    "topics": {\n      "nodes": [\n        {\n          "id": 1,\n          "title": "cats cats cats",\n          "bodySummary":\n            "lets discuss cats because t...",\n          "author": {\n            "id": 1,\n            "username": "user"\n          },\n          "posts": {\n            "nodes": [\n              {\n                "id": 3,\n                "author": {\n                  "id": 1,\n                  "username": "user"\n                },\n                "body":\n                  "I love it when they completely ignore you until they want something. So much better than dogs am I rite?"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n',resultLanguage:"json"}]}},{node:{category:"queries",id:"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [10] >>> JSON",title:"Mutations",examples:[{title:"Create",example:'mutation {\n  createTopic(\n    input: {\n      topic: {\n        forumId: 1\n        title: "My question relates to mutations..."\n        body: "How do you write them?"\n      }\n    }\n  ) {\n    topic {\n      nodeId\n      id\n      forumId\n      title\n      body\n    }\n  }\n}\n',exampleLanguage:"graphql",result:'{\n  "createTopic": {\n    "topic": {\n      "nodeId": "WyJ0b3BpY3MiLDRd",\n      "id": 4,\n      "forumId": 1,\n      "title":\n        "My question relates to mutations...",\n      "body": "How do you write them?"\n    }\n  }\n}\n',resultLanguage:"json"},{title:"Update",example:"mutation {\n  updateTopicById(\n    input: {\n      id: 1\n      topicPatch: {\n        title: \"My (edited) title\"\n      }\n    }\n  ) {\n    topic {\n      nodeId\n      id\n      title\n      body\n    }\n  }\n}\n\n# Works for a table like:\n#\n#   create table app_public.topics (\n#     id serial primary key,\n#     forum_id integer NOT NULL references app_public.forums on delete cascade,\n#     title text NOT NULL,\n#     body text DEFAULT ''::text NOT NULL\n#   );\n",exampleLanguage:"graphql",result:'{\n  "updateTopicById": {\n    "topic": {\n      "nodeId": "WyJ0b3BpY3MiLDFd",\n      "id": 1,\n      "title": "My (edited) title",\n      "body":\n        "lets discuss cats because theyre totally cool"\n    }\n  }\n}\n',resultLanguage:"json"},{title:"Delete",example:"mutation {\n  deleteTopicById(input: { id: 1 }) {\n    deletedTopicId\n  }\n}\n",exampleLanguage:"graphql",result:'{\n  "deleteTopicById": {\n    "deletedTopicId":\n      "WyJ0b3BpY3MiLDFd"\n  }\n}\n',resultLanguage:"json"}]}},{node:{category:"queries",id:"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [11] >>> JSON",title:"Custom queries",examples:[{title:"Single scalar",example:"{\n  randomNumber\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.random_number() returns int\n#  language sql stable\n#  as $$\n#    select 4; -- Chosen by fair dice roll. Guaranteed to be random. XKCD#221\n#  $$;\n#\n",exampleLanguage:"graphql",result:'{ "randomNumber": 4 }\n',resultLanguage:"json"},{title:"Single row",example:"{\n  currentUser {\n    nodeId\n    id\n    username\n  }\n}\n\n# Added to the GraphQL schema via\n# this SQL:\n#\n#   create function current_user()\n#   returns app_public.users\n#   language sql stable\n#   as $$\n#     select users.*\n#     from app_public.users\n#     where id = current_user_id();\n#   $$;\n",exampleLanguage:"graphql",result:'{\n  "currentUser": {\n    "nodeId": "WyJ1c2VycyIsMV0=",\n    "id": 1,\n    "username": "user"\n  }\n}\n',resultLanguage:"json"},{title:"Rows connection",example:"{\n  forumsAboutCats {\n    nodes {\n      nodeId\n      id\n      name\n      slug\n    }\n  }\n}\n\n# Created from SQL like:\n#\n#  create function app_public.forums_about_cats()\n#  returns setof app_public.forums\n#  language sql stable\n#  as $$\n#    select *\n#    from app_public.forums\n#    where slug like 'cat-%';\n#  $$;\n",exampleLanguage:"graphql",result:'{\n  "forumsAboutCats": {\n    "nodes": [\n      {\n        "nodeId": "WyJmb3J1bXMiLDFd",\n        "id": 1,\n        "name": "Cat Life",\n        "slug": "cat-life"\n      }\n    ]\n  }\n}\n',resultLanguage:"json"}]}},{node:{category:"queries",id:"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [12] >>> JSON",title:"Custom mutations",examples:[{title:"Forgot password",example:"mutation {\n  forgotPassword(\n    input: {\n      email: \"user@example.com\"\n    }\n  ) {\n    success\n  }\n}\n\n# Generated with SQL like this:\n#\n#  create function forgot_password(email text)\n#  returns boolean\n#  language plpgsql volatile\n#  as $$\n#    ...\n#  $$;\n#\n#  -- Optionally rename the result field:\n#  comment on function\n#    forgot_password(email text)\n#    is '@resultFieldName success';\n",exampleLanguage:"graphql",result:'{\n  "forgotPassword": {\n    "success": true\n  }\n}\n',resultLanguage:"json"}]}},{node:{category:"queries",id:"/Users/benjiegillam/Documents/graphile.org/src/data/examples.json absPath of file [13] >>> JSON",title:"Computed columns",examples:[{title:"Topic summary",example:"{\n  topicById(id: 2) {\n    body\n    bodySummary\n  }\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.topics_body_summary(\n#    t app_public.topics,\n#    max_length int = 30\n#  )\n#  returns text\n#  language sql stable\n#  as $$\n#    select case\n#      when length(t.body) > max_length\n#      then left(t.body, max_length - 3)\n#             || '...'\n#      else t.body\n#      end;\n#  $$;\n",exampleLanguage:"graphql",result:'{\n  "topicById": {\n    "body":\n      "do you find your cat just sleeps everywhere",\n    "bodySummary":\n      "do you find your cat just s..."\n  }\n}\n',resultLanguage:"json"},{title:"Topic summary with arg",example:"{\n  topicById(id: 2) {\n    body\n    bodySummary(maxLength: 20)\n  }\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.topics_body_summary(\n#    t app_public.topics,\n#    max_length int = 30\n#  )\n#  returns text\n#  language sql stable\n#  as $$\n#    select case\n#      when length(t.body) > max_length\n#      then left(t.body, max_length - 3)\n#             || '...'\n#      else t.body\n#      end;\n#  $$;\n",exampleLanguage:"graphql",result:'{\n  "topicById": {\n    "body":\n      "do you find your cat just sleeps everywhere",\n    "bodySummary":\n      "do you find your ..."\n  }\n}\n',resultLanguage:"json"}]}}]}},pathContext:{layout:"page"}}}});
//# sourceMappingURL=path---postgraphile-v-4-new-features-f0db16c06ae858e29d20.js.map