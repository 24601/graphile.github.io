webpackJsonp([0x66c274c4c8b2],{425:function(n,s){n.exports={data:{remark:{html:'<h2 id="graphql-subscriptions-supporter"><a href="#graphql-subscriptions-supporter" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>GraphQL Subscriptions [SUPPORTER]</h2>\n<p>Using the <a href="/postgraphile/plugins">Supporter Plugin</a> PostGraphile\ngains a simple subscriptions ability.</p>\n<p>To enable this, use the <code class="language-text">--simple-subscriptions</code> CLI flag (or\n<code class="language-text">simpleSubscriptions: true</code> middleware option).</p>\n<p>This will expose a <code class="language-text">listen</code> subscription field that can be used for generic\nsubscriptions to a named topic which can be triggered using PostgreSQL\'s built\nin LISTEN/NOTIFY functionality.</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql">type ListenPayload <span class="token punctuation">{</span>\n  <span class="token attr-name">query</span><span class="token punctuation">:</span> Query\n  <span class="token attr-name">relatedNode</span><span class="token punctuation">:</span> Node\n  <span class="token attr-name">relatedNodeId</span><span class="token punctuation">:</span> ID\n<span class="token punctuation">}</span>\n\ntype Subscription <span class="token punctuation">{</span>\n  listen<span class="token punctuation">(</span><span class="token attr-name">topic</span><span class="token punctuation">:</span> String<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ListenPayload<span class="token operator">!</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="topic-prefix"><a href="#topic-prefix" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Topic prefix</h3>\n<p>All topics are automatically prefixed with <code class="language-text">postgraphile:</code> (but you can\ncustomise this with the <code class="language-text">pgSubscriptionPrefix</code> setting if you\'re using the\nmiddleware version) - GraphQL consumers will not need to know about this,\nbut you will need to remember to add it to your <code class="language-text">NOTIFY</code> topic otherwise\nsubscribers will not see the messages.</p>\n<p>For example a user may perform the following subscription:</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql">subscription <span class="token punctuation">{</span>\n  listen<span class="token punctuation">(</span><span class="token attr-name">topic</span><span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    relatedNodeId\n    relatedNode <span class="token punctuation">{</span>\n      nodeId\n      <span class="token operator">...</span> <span class="token keyword">on</span> Foo <span class="token punctuation">{</span>\n        id\n        title\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>To cause the subscription to receive a message, you could run:</p>\n<div class="gatsby-highlight">\n      <pre class="language-sql"><code class="language-sql"><span class="token keyword">select</span> pg_notify<span class="token punctuation">(</span>\n  <span class="token string">\'postgraphile:hello\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'{}\'</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Resulting in this GraphQL payload:</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"listen"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"relatedNodeId"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>\n      <span class="token property">"relatedNode"</span><span class="token operator">:</span> <span class="token null">null</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Which is sufficient to know that the event <em>occurred</em>, but chances are that you\nwant to know more than this...</p>\n<p>It\'s also possible to send a <code class="language-text">Node</code> along with your GraphQL payload using the\n<code class="language-text">__node__</code> field on the <code class="language-text">pg_notify</code> body (which is interpreted as JSON). The\n<code class="language-text">__node__</code> field is similar to the <code class="language-text">nodeId</code> (or <code class="language-text">id</code> if you use\n<code class="language-text">--classic-ids</code>) field in your GraphQL requests, except it\'s the raw JSON\nbefore it gets stringified and base64 encoded. (The reason for this is that\nPostgres\' JSON functions leave some optional spaces in, so when they are base64\nencoded the strings do not match.)</p>\n<p>Assuming that you have a table of the form\n<code class="language-text">foos(id serial primary key, title text, ...)</code> you can add the <code class="language-text">__node__</code> field\nas follows and the record with id=32 will be made available as the <code class="language-text">relatedNode</code>\nin the GraphQL subscription payload:</p>\n<div class="gatsby-highlight">\n      <pre class="language-sql"><code class="language-sql"><span class="token keyword">select</span> pg_notify<span class="token punctuation">(</span>\n  <span class="token string">\'postgraphile:hello\'</span><span class="token punctuation">,</span>\n  json_build_object<span class="token punctuation">(</span>\n    <span class="token string">\'__node__\'</span><span class="token punctuation">,</span> json_build_array<span class="token punctuation">(</span><span class="token string">\'foos\'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>::<span class="token keyword">text</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Resulting in this GraphQL payload:</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"listen"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"relatedNodeId"</span><span class="token operator">:</span> <span class="token string">"WyJmb29zIiwzMl0="</span><span class="token punctuation">,</span>\n      <span class="token property">"relatedNode"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"nodeId"</span><span class="token operator">:</span> <span class="token string">"WyJmb29zIiwzMl0="</span><span class="token punctuation">,</span>\n        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>\n        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Howdy!"</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<blockquote>\n<p><strong>NOTE</strong>: This solution is still taking shape, so it\'s not yet certain how other fields\non the NOTIFY message JSON will be exposed via GraphQL. You are advised to\ntreat the content of this message JSON as if it\'s visible to the user, as at\nsome point it may be.</p>\n</blockquote>\n<blockquote>\n<p><strong>NOTE</strong>: In PostgreSQL the channel is an "identifier" which by default is\nlimited to 63 characters. Subtracting the <code class="language-text">postgraphile:</code> prefix leaves 50\ncharacters for your topic name.</p>\n</blockquote>\n<h3 id="subscription-security"><a href="#subscription-security" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Subscription security</h3>\n<p>By default, any user may subscribe to any topic, whether logged in or not, and\nthey will remain subscribed until they close the connection themselves. This\ncan cause a number of security issues; so we give you a method to implement\nsecurity around subscriptions.</p>\n<p>By specifying <code class="language-text">--subscription-authorization-function [fn]</code> on the PostGraphile CLI (or using the\n<code class="language-text">subscriptionAuthorizationFunction</code> option) you can have PostGraphile call the\nfunction you specified to ensure that the user is\nallowed to subscribe to the relevant topic. The function must accept one text\nargument <code class="language-text">topic</code> and must return a string or raise an exception (note: the <code class="language-text">topic</code>\nargument WILL be sent including the <code class="language-text">postgraphile:</code> prefix).</p>\n<p>The function will probably take the following form:</p>\n<div class="gatsby-highlight">\n      <pre class="language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span>\n  app_hidden<span class="token punctuation">.</span>validate_subscription<span class="token punctuation">(</span>topic <span class="token keyword">text</span><span class="token punctuation">)</span>\n<span class="token keyword">RETURNS</span> <span class="token keyword">TEXT</span> <span class="token keyword">AS</span> $$\n<span class="token keyword">BEGIN</span>\n  <span class="token keyword">IF</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">THEN</span>\n    <span class="token keyword">RETURN</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>::<span class="token keyword">text</span><span class="token punctuation">;</span>\n  <span class="token keyword">ELSE</span>\n    RAISE EXCEPTION <span class="token string">\'Subscription denied\'</span>\n      <span class="token keyword">USING</span> errcode <span class="token operator">=</span> <span class="token string">\'.....\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>\n<span class="token keyword">END</span><span class="token punctuation">;</span>\n$$ <span class="token keyword">LANGUAGE</span> plpgsql VOLATILE SECURITY <span class="token keyword">DEFINER</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>You must define this function with your custom security logic.  To use this\nfunction you\'d pass the CLI flag:\n<code class="language-text">--subscription-authorization-function app_private.validate_subscription</code></p>\n<p>The text value returned is used to tell the system when to cancel the\nsubscription - if you don\'t need this functionality then you may return a\n<em>static</em> unique value, e.g.  generate a random UUID (manually) and then return\nthis same UUID over and over from your function, e.g.:</p>\n<div class="gatsby-highlight">\n      <pre class="language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> app_hidden<span class="token punctuation">.</span>validate_subscription<span class="token punctuation">(</span>topic <span class="token keyword">text</span><span class="token punctuation">)</span>\n<span class="token keyword">RETURNS</span> <span class="token keyword">TEXT</span> <span class="token keyword">AS</span> $$\n<span class="token keyword">BEGIN</span>\n  <span class="token keyword">IF</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">THEN</span>\n    <span class="token keyword">RETURN</span> <span class="token string">\'4A2D27CD-7E67-4585-9AD8-50AF17D98E0B\'</span>::<span class="token keyword">text</span><span class="token punctuation">;</span>\n  <span class="token keyword">ELSE</span>\n    RAISE EXCEPTION <span class="token string">\'Subscription denied\'</span> <span class="token keyword">USING</span> errcode <span class="token operator">=</span> <span class="token string">\'.....\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>\n<span class="token keyword">END</span><span class="token punctuation">;</span>\n$$ <span class="token keyword">LANGUAGE</span> plpgsql VOLATILE SECURITY <span class="token keyword">DEFINER</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>When a message is published to the topic identified by the return value of this\nfunction (NOTE: this topic will NOT be prefixed with <code class="language-text">postgraphile:</code> because it\nshould be private), the associated subscription will automatically be terminated.</p>\n<h3 id="naming-your-topics"><a href="#naming-your-topics" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Naming your topics</h3>\n<p>You might want to make the topic a combination of things, for example the\nsubject type and identifier - e.g. \'channel:123\'. If you do this then your\nfunction could determine which subject the user is attempting to subscribe to,\ncheck the user has access to that subject, and finally return a PostgreSQL\ntopic that will be published to in the event the user is kicked from the\nchannel, e.g.  <code class="language-text">&#39;channel:123:kick:987&#39;</code> (assuming \'987\' is the id\nof the current user).</p>\n<h3 id="example-walk-through"><a href="#example-walk-through" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example walk-through</h3>\n<p>First, set up a <code class="language-text">.postgraphilerc.js</code> containing the following:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token string">"@graphile/plugin-supporter"</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    connection<span class="token punctuation">:</span> <span class="token string">"postgres://localhost/subs"</span><span class="token punctuation">,</span>\n    schema<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"app_public"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    simpleSubscriptions<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Next, in terminal 1, run:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">createdb subs || true\npostgraphile</code></pre>\n      </div>\n<p>In terminal 2, connect to the subs DB using <code class="language-text">psql subs</code> and run the following:</p>\n<div class="gatsby-highlight">\n      <pre class="language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">schema</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> app_public<span class="token punctuation">;</span>\n<span class="token keyword">create</span> <span class="token keyword">schema</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> app_private<span class="token punctuation">;</span>\n\n<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> app_public<span class="token punctuation">.</span>foo <span class="token punctuation">(</span>\n id <span class="token keyword">serial</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>\n title <span class="token keyword">text</span> <span class="token operator">not</span> <span class="token boolean">null</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">function</span>\n  app_private<span class="token punctuation">.</span>validate_subscription<span class="token punctuation">(</span>topic <span class="token keyword">text</span><span class="token punctuation">)</span>\n  <span class="token keyword">returns</span> <span class="token keyword">text</span> <span class="token keyword">as</span>\n$$\n <span class="token keyword">select</span> <span class="token string">\'CANCEL_ALL_SUBSCRIPTIONS\'</span>::<span class="token keyword">text</span><span class="token punctuation">;</span>\n$$ <span class="token keyword">language</span> <span class="token keyword">sql</span> stable<span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Then using a GraphQL client that supports subscriptions, such as <a href="https://github.com/graphcool/graphql-playground">GraphQL Playground</a>,\nperform the following subscription:</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql">subscription <span class="token punctuation">{</span>\n listen<span class="token punctuation">(</span><span class="token attr-name">topic</span><span class="token punctuation">:</span><span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   relatedNodeId\n   relatedNode <span class="token punctuation">{</span>\n     nodeId\n     <span class="token operator">...</span> <span class="token keyword">on</span> Foo <span class="token punctuation">{</span>\n       id\n       title\n     <span class="token punctuation">}</span>\n   <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>You are not expecting an immediate result; first you have to trigger the event. To do so, back in your <code class="language-text">psql</code> session in terminal 2, execute:</p>\n<div class="gatsby-highlight">\n      <pre class="language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> app_public<span class="token punctuation">.</span>foo <span class="token punctuation">(</span>title<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">\'Howdy!\'</span><span class="token punctuation">)</span> returning <span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token keyword">select</span> pg_notify<span class="token punctuation">(</span>\n  <span class="token string">\'postgraphile:hello\'</span><span class="token punctuation">,</span>\n  json_build_object<span class="token punctuation">(</span>\n    <span class="token string">\'__node__\'</span><span class="token punctuation">,</span> json_build_array<span class="token punctuation">(</span>\n      <span class="token string">\'foos\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> app_public<span class="token punctuation">.</span>foo<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>::<span class="token keyword">text</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>You should find that the event has been received by the client and the \'Howdy!\'\nnode has come through. You can run the above a few more times, or experiment a\nbit by changing the values if you like.</p>\n<p>Finally to cancel the subscription, execute the following SQL:</p>\n<div class="gatsby-highlight">\n      <pre class="language-sql"><code class="language-sql"><span class="token keyword">select</span> pg_notify<span class="token punctuation">(</span>\n  <span class="token string">\'CANCEL_ALL_SUBSCRIPTIONS\'</span><span class="token punctuation">,</span>\n  json_build_object<span class="token punctuation">(</span><span class="token punctuation">)</span>::<span class="token keyword">text</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>You should notice that your client is no longer subscribed.</p>\n<p><strong>Bonus</strong>: the SQL commands in this walk-through can be automated with this handy\nbash script:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>\n<span class="token keyword">set</span> -e\ncreatedb subs <span class="token operator">||</span> <span class="token boolean">true</span>\npsql -1X -v ON_ERROR_STOP<span class="token operator">=</span>1 subs <span class="token operator">&lt;&lt;</span> <span class="token string">HERE\ncreate schema if not exists app_public;\ncreate table if not exists app_public.foo (\n id serial primary key,\n title text not null\n);\ncreate schema if not exists app_private;\ncreate or replace function app_private.validate_subscription(topic text)\nreturns text as \\$\\$\n select \'CANCEL_ALL_SUBSCRIPTIONS\'::text;\n\\$\\$ language sql stable;\nHERE</span>\n\n<span class="token function">sleep</span> 1\n\npsql -1X -v ON_ERROR_STOP<span class="token operator">=</span>1 subs <span class="token operator">&lt;&lt;</span> <span class="token string">HERE\n do \\$\\$\n declare\n   v_foo app_public.foo;\n begin\n   insert into app_public.foo (title) values (\'Howdy!\') returning * into v_foo;\n   perform pg_notify(\n     \'postgraphile:hello\',\n     json_build_object(\'__node__\', json_build_array(\'foos\', v_foo.id))::text\n   );\n end;\n \\$\\$ language plpgsql;\nHERE</span>\n\n<span class="token function">sleep</span> 3\n\npsql -1X -v ON_ERROR_STOP<span class="token operator">=</span>1 subs <span class="token operator">&lt;&lt;</span> <span class="token string">HERE\n do \\$\\$\n declare\n   v_foo app_public.foo;\n begin\n   insert into app_public.foo (title) values (\'Goodbye!\') returning * into v_foo;\n   perform pg_notify(\n     \'postgraphile:hello\',\n     json_build_object(\'__node__\', json_build_array(\'foos\', v_foo.id))::text\n   );\n   perform pg_notify(\n     \'CANCEL_ALL_SUBSCRIPTIONS\',\n     json_build_object()::text\n   );\n end;\n \\$\\$ language plpgsql;\nHERE</span></code></pre>\n      </div>',frontmatter:{path:"/postgraphile/subscriptions/",title:"GraphQL Subscriptions"}},nav:{edges:[{node:{id:"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [0] >>> JSON",name:"graphile-build",sections:[{id:"guides",title:"Overview"},{id:"library-reference",title:"Using the Library"},{id:"plugin-reference",title:"Building a Plugin"}],pages:[{to:"/graphile-build/getting-started/",title:"Getting Started",sectionId:"guides"},{to:"/graphile-build/plugins/",title:"Plugins",sectionId:"guides"},{to:"/graphile-build/hooks/",title:"Hooks",sectionId:"guides"},{to:"/graphile-build/look-ahead/",title:"Look Ahead",sectionId:"guides"},{to:"/graphile-build/graphile-build/",title:"graphile-build",sectionId:"library-reference"},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"library-reference"},{to:"/graphile-build/plugin-options/",title:"Options",sectionId:"library-reference"},{to:"/graphile-build/default-plugins/",title:"Default Plugins",sectionId:"library-reference"},{to:"/graphile-build/omitting-plugins/",title:"Omitting Plugins",sectionId:"guides"},{to:"/graphile-build/all-hooks/",title:"All Hooks",sectionId:"plugin-reference"},{to:"/graphile-build/build-object/",title:"Build Object",sectionId:"plugin-reference"},{to:"/graphile-build/context-object/",title:"Context Object",sectionId:"plugin-reference"},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"plugin-reference"}]}},{node:{id:"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [1] >>> JSON",name:"postgraphile",sections:[{id:"overview",title:"Overview"},{id:"guides",title:"Guides"},{id:"usage",title:"Usage"}],pages:[{to:"/postgraphile/introduction/",title:"Introduction",sectionId:"overview"},{to:"/postgraphile/quick-start-guide/",title:"Quick Start Guide",sectionId:"overview"},{to:"/postgraphile/evaluating/",title:"Evaluating for your Project",sectionId:"guides"},{to:"/postgraphile/requirements/",title:"Requirements",sectionId:"overview"},{to:"/postgraphile/performance/",title:"Performance",sectionId:"overview"},{to:"/postgraphile/connections/",title:"Connections",sectionId:"overview"},{to:"/postgraphile/filtering/",title:"Filtering",sectionId:"overview"},{to:"/postgraphile/relations/",title:"Relations",sectionId:"overview"},{to:"/postgraphile/crud-mutations/",title:"CRUD Mutations",sectionId:"overview"},{to:"/postgraphile/computed-columns/",title:"Computed Columns",sectionId:"overview"},{to:"/postgraphile/custom-queries/",title:"Custom Queries",sectionId:"overview"},{to:"/postgraphile/custom-mutations/",title:"Custom Mutations",sectionId:"overview"},{to:"/postgraphile/smart-comments/",title:"Smart Comments",sectionId:"overview"},{to:"/postgraphile/security/",title:"Security",sectionId:"overview"},{to:"/postgraphile/introspection/",title:"Introspection",sectionId:"overview"},{to:"/postgraphile/extending/",title:"Schema Plugins",sectionId:"overview"},{to:"/postgraphile/plugins/",title:"Server Plugins",sectionId:"overview"},{to:"/postgraphile/subscriptions/",title:"Subscriptions [SUPPORTER]",sectionId:"overview"},{to:"/postgraphile/production/",title:"Production Considerations",sectionId:"overview"},{to:"/postgraphile/reserved-keywords/",title:"Reserved Keywords",sectionId:"overview"},{to:"/postgraphile/debugging/",title:"Debugging",sectionId:"overview"},{to:"/postgraphile/jwt-guide/",title:"PostGraphile JWT Guide",sectionId:"guides"},{to:"/postgraphile/default-role/",title:"The Default Role",sectionId:"guides"},{to:"/postgraphile/procedures/",title:"PostgreSQL Procedures",sectionId:"guides"},{to:"/postgraphile/postgresql-schema-design/",title:"PostgreSQL Schema Design",sectionId:"guides"},{to:"/postgraphile/postgresql-indexes/",title:"PostgreSQL Indexes",sectionId:"guides"},{to:"/postgraphile/v4-new-features/",title:"v4 Feature Guide",sectionId:"guides"},{to:"/postgraphile/v3-migration/",title:"v3 → v4 Migration Guide",sectionId:"guides"},{to:"/postgraphile/usage-cli/",title:"CLI Usage",sectionId:"usage"},{to:"/postgraphile/usage-library/",title:"Library Usage",sectionId:"usage"},{to:"/postgraphile/usage-schema/",title:"Schema-only Usage",sectionId:"usage"}]}},{node:{id:"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [2] >>> JSON",name:"graphile-build-pg",sections:[{id:"usage",title:"Usage"}],pages:[{to:"/postgraphile/settings/",title:"Settings",sectionId:"usage"}]}}]}},pathContext:{layout:"page"}}}});
//# sourceMappingURL=path---postgraphile-subscriptions-8bf5eaa5fe7e2e3f5b1b.js.map