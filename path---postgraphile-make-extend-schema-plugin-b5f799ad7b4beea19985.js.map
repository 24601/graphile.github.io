{"version":3,"sources":["webpack:///path---postgraphile-make-extend-schema-plugin-b5f799ad7b4beea19985.js","webpack:///./.cache/json/postgraphile-make-extend-schema-plugin.json"],"names":["webpackJsonp","444","module","exports","data","remark","html","frontmatter","path","title","showExamples","nav","edges","node","id","name","sections","pages","to","sectionId","subpages","examples","query","result","pathContext","layout"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,QAAUC,KAAA;AAAk40CC,aAA+cC,KAAA,2CAAAC,MAAA,wCAAAC,aAAA,OAAuHC,KAAQC,QAAUC,MAAQC,GAAA,sFAAAC,KAAA,OAAAC,WAAsHF,GAAA,OAAAL,MAAA,YAAgCK,GAAA,QAAAL,MAAA,UAA6BQ,QAAYC,GAAA,gCAAAT,MAAA,yBAAAU,UAAA,OAAAC,SAAA,OAA2GF,GAAA,mBAAAT,MAAA,YAAAU,UAAA,QAAAC,SAAA,UAAqFP,MAAQC,GAAA,sFAAAC,KAAA,iBAAAC,WAAgIF,GAAA,SAAAL,MAAA,aAAmCK,GAAA,oBAAAL,MAAA,sBAAuDK,GAAA,mBAAAL,MAAA,sBAAoDQ,QAAYC,GAAA,mCAAAT,MAAA,kBAAAU,UAAA,SAAAC,cAAuGF,GAAA,2BAAAT,MAAA,UAAAU,UAAA,SAAAC,cAAuFF,GAAA,yBAAAT,MAAA,QAAAU,UAAA,SAAAC,cAAmFF,GAAA,8BAAAT,MAAA,aAAAU,UAAA,SAAAC,cAA6FF,GAAA,kCAAAT,MAAA,iBAAAU,UAAA,oBAAAC,cAAgHF,GAAA,kCAAAT,MAAA,gBAAAU,UAAA,oBAAAC,cAA+GF,GAAA,kCAAAT,MAAA,UAAAU,UAAA,oBAAAC,cAAyGF,GAAA,mCAAAT,MAAA,kBAAAU,UAAA,oBAAAC,cAAkHF,GAAA,oCAAAT,MAAA,mBAAAU,UAAA,SAAAC,cAAyGF,GAAA,6BAAAT,MAAA,YAAAU,UAAA,mBAAAC,cAAqGF,GAAA,gCAAAT,MAAA,eAAAU,UAAA,mBAAAC,cAA2GF,GAAA,kCAAAT,MAAA,iBAAAU,UAAA,mBAAAC,cAA+GF,GAAA,kCAAAT,MAAA,gBAAAU,UAAA,mBAAAC,iBAAiHP,MAAQC,GAAA,sFAAAC,KAAA,eAAAC,WAA8HF,GAAA,WAAAL,MAAA,aAAqCK,GAAA,SAAAL,MAAA,cAAoCK,GAAA,cAAAL,MAAA,gBAA2CK,GAAA,SAAAL,MAAA,WAAiCK,GAAA,YAAAL,MAAA,cAAuCK,GAAA,MAAAL,MAAA,QAAyBQ,QAAYC,GAAA,8BAAAT,MAAA,eAAAU,UAAA,WAAAC,cAAiGF,GAAA,0BAAAT,MAAA,WAAAU,UAAA,WAAAC,cAAyFF,GAAA,uBAAAT,MAAA,QAAAU,UAAA,WAAAC,WAAgFF,GAAA,2BAAAT,MAAA,YAAAU,UAAA,aAA6ED,GAAA,+BAAAT,MAAA,gBAAAU,UAAA,aAAqFD,GAAA,8BAAAT,MAAA,oBAAAU,UAAA,eAA0FD,GAAA,6BAAAT,MAAA,cAAAU,UAAA,WAAAC,cAA+FF,GAAA,8BAAAT,MAAA,eAAAU,UAAA,WAAAC,cAAiGF,GAAA,mCAAAT,MAAA,oBAAAU,UAAA,SAAAC,cAAyGF,GAAA,4BAAAT,MAAA,aAAAU,UAAA,SAAAC,SAAA,OAA6FF,GAAA,4BAAAT,MAAA,aAAAU,UAAA,SAAAC,SAAA,OAA6FF,GAAA,wBAAAT,MAAA,SAAAU,UAAA,SAAAC,WAAgFF,GAAA,2BAAAT,MAAA,YAAAU,UAAA,WAA2ED,GAAA,6BAAAT,MAAA,cAAAU,UAAA,WAA+ED,GAAA,2BAAAT,MAAA,YAAAU,UAAA,WAA2ED,GAAA,gCAAAT,MAAA,iBAAAU,UAAA,WAAqFD,GAAA,yBAAAT,MAAA,cAAAU,UAAA,aAA6ED,GAAA,2BAAAT,MAAA,YAAAU,UAAA,SAAAC,WAAsFF,GAAA,kCAAAT,MAAA,mBAAAU,UAAA,WAAyFD,GAAA,gCAAAT,MAAA,iBAAAU,UAAA,WAAqFD,GAAA,kCAAAT,MAAA,mBAAAU,UAAA,WAAyFD,GAAA,uCAAAT,MAAA,wBAAAU,UAAA,aAAqGD,GAAA,oCAAAT,MAAA,qBAAAU,UAAA,SAAAC,cAA2GF,GAAA,0BAAAT,MAAA,WAAAU,UAAA,SAAAC,cAAuFF,GAAA,+BAAAT,MAAA,gBAAAU,UAAA,SAAAC,cAAiGF,GAAA,mCAAAT,MAAA,oBAAAU,UAAA,SAAAC,cAAyGF,GAAA,2BAAAT,MAAA,YAAAU,UAAA,SAAAC,cAAyFF,GAAA,gCAAAT,MAAA,iBAAAU,UAAA,cAAAC,cAAwGF,GAAA,2BAAAT,MAAA,iBAAAU,UAAA,cAAAC,WAAgGF,GAAA,2CAAAT,MAAA,yBAAAU,UAAA,gBAA6GD,GAAA,4CAAAT,MAAA,0BAAAU,UAAA,gBAA+GD,GAAA,+BAAAT,MAAA,kBAAAU,UAAA,kBAA4FD,GAAA,yBAAAT,MAAA,iBAAAU,UAAA,cAAAC,cAAiGF,GAAA,4BAAAT,MAAA,8BAAAU,UAAA,SAAAC,cAA4GF,GAAA,0CAAAT,MAAA,2BAAAU,UAAA,SAAAC,cAAuHF,GAAA,4BAAAT,MAAA,4BAAAU,UAAA,SAAAC,cAA0GF,GAAA,2BAAAT,MAAA,yBAAAU,UAAA,SAAAC,cAAsGF,GAAA,8BAAAT,MAAA,mBAAAU,UAAA,SAAAC,cAAmGF,GAAA,iCAAAT,MAAA,mBAAAU,UAAA,SAAAC,cAAsGF,GAAA,8BAAAT,MAAA,0BAAAU,UAAA,SAAAC,cAA0GF,GAAA,8BAAAT,MAAA,oBAAAU,UAAA,SAAAC,cAAoGF,GAAA,mCAAAT,MAAA,oBAAAU,UAAA,YAAAC,cAA4GF,GAAA,gCAAAT,MAAA,iBAAAU,UAAA,YAAAC,cAAsGF,GAAA,iCAAAT,MAAA,kBAAAU,UAAA,YAAAC,cAAwGF,GAAA,+BAAAT,MAAA,iBAAAU,UAAA,MAAAC,cAA+FF,GAAA,8BAAAT,MAAA,sBAAAU,UAAA,MAAAC,iBAAsGP,MAAQC,GAAA,sFAAAC,KAAA,oBAAAC,WAAmIF,GAAA,WAAAL,MAAA,UAAgCQ,QAAYC,GAAA,+BAAAT,MAAA,WAAAU,UAAA,WAAAC,kBAAiGC,UAAaT,QAAUC,MAAQC,GAAA,2FAAAL,MAAA,QAAAY,WAA6HZ,MAAA,SAAAa,MAAA,oHAAyIC,OAAA,iqBAAwuBd,MAAA,gBAAAa,MAAA,2GAAyIC,OAAA,mKAAoMV,MAAQC,GAAA,2FAAAL,MAAA,cAAAY,WAAmIZ,MAAA,eAAAa,MAAA,0GAAqIC,OAAA,gKAA2Ld,MAAA,qBAAAa,MAAA,iNAAoPC,OAAA,2iBAAsmBV,MAAQC,GAAA,2FAAAL,MAAA,YAAAY,WAAiIZ,MAAA,sBAAAa,MAAA,8eAAghBC,OAAA,qvBAAgzBV,MAAQC,GAAA,2FAAAL,MAAA,YAAAY,WAAiIZ,MAAA,SAAAa,MAAA,kSAA2TC,OAAA,6OAA8Qd,MAAA,SAAAa,MAAA,ieAAsfC,OAAA,iOAAgQd,MAAA,SAAAa,MAAA,kFAAuGC,OAAA,4FAA+GV,MAAQC,GAAA,2FAAAL,MAAA,iBAAAY,WAAsIZ,MAAA,gBAAAa,MAAA,+OAAwQC,OAAA,4BAA8Cd,MAAA,aAAAa,MAAA,6TAAsVC,OAAA,6GAAsId,MAAA,kBAAAa,MAAA,kVAAgXC,OAAA,sMAAqOV,MAAQC,GAAA,2FAAAL,MAAA,mBAAAY,WAAwIZ,MAAA,kBAAAa,MAAA,uaAAqcC,OAAA,+DAAgFV,MAAQC,GAAA,2FAAAL,MAAA,mBAAAY,WAAwIZ,MAAA,gBAAAa,MAAA,saAAkcC,OAAA,iKAAwLd,MAAA,yBAAAa,MAAA,qbAA0dC,OAAA,4JAAkLC,aAAgBC,OAAA","file":"path---postgraphile-make-extend-schema-plugin-b5f799ad7b4beea19985.js","sourcesContent":["webpackJsonp([30601655320255],{\n\n/***/ 444:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"remark\":{\"html\":\"<h2 id=\\\"makeextendschemaplugin-graphile-utils\\\"><a href=\\\"#makeextendschemaplugin-graphile-utils\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>makeExtendSchemaPlugin (graphile-utils)</h2>\\n<p>The <code class=\\\"language-text\\\">graphile-utils</code> module contains some helpers for extending your\\nPostGraphile (or Graphile Engine) GraphQL schema without having to understand\\nthe complex plugin system.</p>\\n<p>The main one you'll care about to start with is <code class=\\\"language-text\\\">makeExtendSchemaPlugin</code>.</p>\\n<p>Using <code class=\\\"language-text\\\">makeExtendSchemaPlugin</code> you can write a plugin that will merge additional\\nGraphQL types and resolvers into your schema using a similar syntax to\\n<code class=\\\"language-text\\\">graphql-tools</code>. You just need to provide the <code class=\\\"language-text\\\">typeDefs</code> and <code class=\\\"language-text\\\">resolvers</code> to\\nuse. Your plugin will likely take a shape like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>\\n  makeExtendSchemaPlugin<span class=\\\"token punctuation\\\">,</span>\\n  gql<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'graphile-utils'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> MySchemaExtensionPlugin <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token function\\\">makeExtendSchemaPlugin</span><span class=\\\"token punctuation\\\">(</span>\\n    build <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">      typeDefs<span class=\\\"token punctuation\\\">:</span> gql<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`...`</span></span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      resolvers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">...</span>\\n</span>    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> MySchemaExtensionPlugin<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>And would be added to your PostGraphile instance via</p>\\n<ul>\\n<li>CLI: <code class=\\\"language-text\\\">--append-plugins `pwd`/MySchemaExtensionPlugin.js</code></li>\\n<li>Library: <code class=\\\"language-text\\\">appendPlugins: [require(&#39;./MySchemaExtensionPlugin&#39;)]</code></li>\\n</ul>\\n<p>The <code class=\\\"language-text\\\">build</code> argument to the makeExtendSchemaPlugin callback contains lots of\\ninformation and helpers defined by various plugins, most importantly it\\nincludes the introspection results (<code class=\\\"language-text\\\">build.pgIntrospectionResultsByKind</code>),\\ninflection functions (<code class=\\\"language-text\\\">build.inflection</code>), and SQL helper (<code class=\\\"language-text\\\">build.pgSql</code>, which\\nis just an instance of <a href=\\\"https://www.npmjs.com/package/pg-sql2\\\">pg-sql2</a>).</p>\\n<p>The callback should return an object with two keys:</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">typeDefs</code>: a graphql AST generated with the <code class=\\\"language-text\\\">gql</code> helper from\\n<code class=\\\"language-text\\\">graphile-utils</code> (note this is NOT from the <code class=\\\"language-text\\\">graphql-tag</code> library, ours works\\nin a slightly different way).</li>\\n<li><code class=\\\"language-text\\\">resolvers</code>: an object that's keyed by the GraphQL type names of types\\ndefined (or extended) in <code class=\\\"language-text\\\">typeDefs</code>, the values of which are objects keyed by\\nthe field names with values that are resolver functions.</li>\\n</ul>\\n<p>For a larger example of how typeDefs and resolvers work, have a look at the\\n<a href=\\\"https://www.apollographql.com/docs/graphql-tools/generate-schema.html\\\">graphql-tools\\ndocs</a> -\\nours work in a similar way.</p>\\n<p>Note that the resolve functions defined in <code class=\\\"language-text\\\">resolvers</code> will be sent the\\nstandard 4 GraphQL resolve arguments (<code class=\\\"language-text\\\">parent</code>, <code class=\\\"language-text\\\">args</code>, <code class=\\\"language-text\\\">context</code>,\\n<code class=\\\"language-text\\\">resolveInfo</code>); but in addition they will be passed a 5th argument that\\ncontains graphile-specific helpers.</p>\\n<h3 id=\\\"reading-database-column-values\\\"><a href=\\\"#reading-database-column-values\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Reading database column values</h3>\\n<p>When extending a schema, it's often because you want to expose data from Node.js\\nthat would be difficult too difficult (or impossible) to access from PostgreSQL.\\nWhen defining a field on an existing table-backed type defined by PostGraphile,\\nit's useful to access data from the underlying table in the resolver.</p>\\n<p>To do this you can use the <code class=\\\"language-text\\\">@requires(columns: […])</code> field directive to declare\\nthe data dependencies of your resolver. This guarantees that when the resolver\\nis executed, the data is immediately available.</p>\\n<p>Here's an example to illustrate.</p>\\n<p>In the database you have a <code class=\\\"language-text\\\">product</code> table (imagine an online store), that\\nPostGraphile will include in the GraphQL schema by creating a type <code class=\\\"language-text\\\">Product</code>\\nwith fields <code class=\\\"language-text\\\">id</code>, <code class=\\\"language-text\\\">name</code>, <code class=\\\"language-text\\\">price_in_us_cents</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code class=\\\"language-sql\\\"><span class=\\\"token keyword\\\">create</span> <span class=\\\"token keyword\\\">table</span> product <span class=\\\"token punctuation\\\">(</span>\\n  id uuid <span class=\\\"token keyword\\\">primary</span> <span class=\\\"token keyword\\\">key</span><span class=\\\"token punctuation\\\">,</span>\\n  name <span class=\\\"token keyword\\\">text</span> <span class=\\\"token operator\\\">not</span> <span class=\\\"token boolean\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  price_in_us_cents <span class=\\\"token keyword\\\">integer</span> <span class=\\\"token operator\\\">not</span> <span class=\\\"token boolean\\\">null</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>This would result in the following GraphQL type:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\">type Product <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">id</span><span class=\\\"token punctuation\\\">:</span> UUID<span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">priceInUsCents</span><span class=\\\"token punctuation\\\">:</span> Int<span class=\\\"token operator\\\">!</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>However imagine you're selling internationally, and you want to expose the price\\nin other currencies directly from the <code class=\\\"language-text\\\">Product</code> type itself. This kind of\\nfunctionality is trivial to perform in Node.js (e.g. by making a REST call to a\\nforeign exchange service over the internet) but might be a struggle from with\\nPostgreSQL.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> postgraphile <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"postgraphile\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> makeExtendSchemaPlugin<span class=\\\"token punctuation\\\">,</span> gql <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"graphile-utils\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"token keyword\\\">const</span> express <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"express\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> convertUsdToAud <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"ficticious-npm-library\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">const</span> MyForeignExchangePlugin <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">makeExtendSchemaPlugin</span><span class=\\\"token punctuation\\\">(</span>build <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> pgSql<span class=\\\"token punctuation\\\">:</span> sql <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> build<span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    typeDefs<span class=\\\"token punctuation\\\">:</span> gql<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      extend type Product {\\n</span><span class=\\\"gatsby-highlight-code-line\\\">        priceInAuCents: Int! @requires(columns: [\\\"price_in_us_cents\\\"])\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      }\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    `</span></span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    resolvers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      Product<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">        priceInAuCents<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          product\\n</span><span class=\\\"gatsby-highlight-code-line\\\">        <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token comment\\\">// Note that the columns are converted to fields, so the case changes</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token comment\\\">// from `price_in_us_cents` to `priceInUsCents`</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> priceInUsCents <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> product<span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">convertUsdToAud</span><span class=\\\"token punctuation\\\">(</span>priceInUsCents<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>\\n<span class=\\\"token keyword\\\">const</span> app <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">express</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">postgraphile</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DATABASE_URL</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"app_public\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    graphiql<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">    appendPlugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>MyForeignExchangePlugin<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n</span>  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3030</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3 id=\\\"the-selectgraphqlresultfromtable-helper\\\"><a href=\\\"#the-selectgraphqlresultfromtable-helper\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>The <code class=\\\"language-text\\\">selectGraphQLResultFromTable</code> helper</h3>\\n<p>The <code class=\\\"language-text\\\">selectGraphQLResultFromTable</code> function is vital if you want to return data\\nfrom the database from your new GraphQL field. It is responsible for hooking into\\nthe query look-ahead features of <code class=\\\"language-text\\\">graphile-build</code> to inspect the incoming GraphQL\\nquery and pull down the relevant data from the database\\n(including nested relations). You are then expected to return the result of this\\nfetch via your resolver. You can use the <code class=\\\"language-text\\\">sqlBuilder</code> object to customise the\\ngenerated query, changing the order, adding <code class=\\\"language-text\\\">where</code> clauses, <code class=\\\"language-text\\\">limit</code>s, etc.\\nNote that if you do not wish to return the data directly, you can use the\\n<code class=\\\"language-text\\\">@recurseDataGenerators</code> directive on the intermediary field, see the example\\nbelow.</p>\\n<p>The <code class=\\\"language-text\\\">sqlBuilder</code> uses an SQL AST constructed via\\n<a href=\\\"https://github.com/graphile/pg-sql2/blob/master/README.md\\\"><code class=\\\"language-text\\\">pg-sql2</code> methods</a>\\nto dynamically create powerful SQL queries without risking SQL injection\\nattacks. The <code class=\\\"language-text\\\">sqlBuilder</code> has a number of methods which affect the query which\\nwill be generated. The main ones you're likely to want are:</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">where(sqlFragment)</code>; e.g. <code class=\\\"language-text\\\">sqlBuilder.where(build.pgSql.fragment`is_admin is true`)</code></li>\\n<li><code class=\\\"language-text\\\">orderBy(() =&gt; sqlFragment, ascending)</code>; e.g. <code class=\\\"language-text\\\">sqlBuilder.orderBy(() =&gt; build.pgSql.fragment`created_at`, false)</code></li>\\n<li><code class=\\\"language-text\\\">limit(number)</code>; e.g. <code class=\\\"language-text\\\">sqlBuilder.limit(1)</code></li>\\n<li><code class=\\\"language-text\\\">offset(number)</code>; e.g. <code class=\\\"language-text\\\">sqlBuilder.offset(1)</code></li>\\n<li><code class=\\\"language-text\\\">select(() =&gt; sqlFragment, alias)</code>; e.g. <code class=\\\"language-text\\\">sqlBuilder.select(() =&gt; build.pgSql.fragment`gen_random_uuid()`, &#39;__my_random_uuid&#39;)</code> - it's advised to start your alias with two underscores to prevent it clashing with any potential columns exposed as GraphQL fields.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> postgraphile <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"postgraphile\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> makeExtendSchemaPlugin<span class=\\\"token punctuation\\\">,</span> gql <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"graphile-utils\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> express <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"express\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> app <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">express</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">const</span> MyRandomUserPlugin <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">makeExtendSchemaPlugin</span><span class=\\\"token punctuation\\\">(</span>build <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> pgSql<span class=\\\"token punctuation\\\">:</span> sql <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> build<span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    typeDefs<span class=\\\"token punctuation\\\">:</span> gql<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      extend type Query {\\n</span><span class=\\\"gatsby-highlight-code-line\\\">        randomUser: User\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      }\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    `</span></span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    resolvers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      Query<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">        randomUser<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          _query<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          args<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          context<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          resolveInfo<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token punctuation\\\">{</span> selectGraphQLResultFromTable <span class=\\\"token punctuation\\\">}</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">        <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token comment\\\">// Remember: selectGraphQLResultFromTable is where the PostGraphile</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token comment\\\">// look-ahead magic happens!</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token keyword\\\">const</span> rows <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">selectGraphQLResultFromTable</span><span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            sql<span class=\\\"token punctuation\\\">.</span>fragment<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`app_public.users`</span></span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token punctuation\\\">(</span>tableAlias<span class=\\\"token punctuation\\\">,</span> sqlBuilder<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              sqlBuilder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">orderBy</span><span class=\\\"token punctuation\\\">(</span>sql<span class=\\\"token punctuation\\\">.</span>fragment<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`random()`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              sqlBuilder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">limit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token punctuation\\\">}</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token keyword\\\">return</span> rows<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</span>  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">postgraphile</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DATABASE_URL</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"app_public\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    graphiql<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    appendPlugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>MyRandomUserPlugin<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3030</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>The above is a simple and fairly pointless example which would have been better\\nserved by a <a href=\\\"/postgraphile/custom-queries/#custom-query-sql-procedures\\\">Custom Query SQL\\nProcedure</a>; however\\nyou can also use this system to define mutations or to call out to external\\nservices. For example, you might want to add a custom <code class=\\\"language-text\\\">registerUser</code> mutation\\nwhich inserts the new user into the database and also sends them an email:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> MyRegisterUserMutationPlugin <span class=\\\"token operator\\\">=</span>\\n<span class=\\\"token function\\\">makeExtendSchemaPlugin</span><span class=\\\"token punctuation\\\">(</span>build <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> pgSql<span class=\\\"token punctuation\\\">:</span> sql <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> build<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    typeDefs<span class=\\\"token punctuation\\\">:</span> gql<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n      input RegisterUserInput {\\n        name: String!\\n        email: String!\\n        bio: String\\n      }\\n\\n      type RegisterUserPayload {\\n        user: User @recurseDataGenerators\\n        query: Query\\n      }\\n\\n<span class=\\\"gatsby-highlight-code-line\\\">      extend type Mutation {\\n</span>        registerUser(input: RegisterUserInput!):\\n          RegisterUserPayload\\n      }\\n    `</span></span><span class=\\\"token punctuation\\\">,</span>\\n    resolvers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">      Mutation<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">        registerUser<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          _query<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          args<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          context<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          resolveInfo<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token punctuation\\\">{</span> selectGraphQLResultFromTable <span class=\\\"token punctuation\\\">}</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">        <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> pgClient <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token comment\\\">// Start a sub-transaction</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token keyword\\\">await</span> pgClient<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">query</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"SAVEPOINT graphql_mutation\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// Our custom logic to register the user:</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> rows<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>user<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> pgClient<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">query</span><span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`INSERT INTO app_public.users(\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                name, email, bio\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              ) VALUES ($1, $2, $3)\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              RETURNING *`</span></span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              <span class=\\\"token punctuation\\\">[</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                args<span class=\\\"token punctuation\\\">.</span>input<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                args<span class=\\\"token punctuation\\\">.</span>input<span class=\\\"token punctuation\\\">.</span>email<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                args<span class=\\\"token punctuation\\\">.</span>input<span class=\\\"token punctuation\\\">.</span>bio<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              <span class=\\\"token punctuation\\\">]</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// Now we fetch the result that the GraphQL</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// client requested, using the new user</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// account as the source of the data. You</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// should always use</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// `selectGraphQLResultFromTable` if you</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// return database data from your custom</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// field.</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>row<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">selectGraphQLResultFromTable</span><span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                sql<span class=\\\"token punctuation\\\">.</span>fragment<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`app_public.users`</span></span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                <span class=\\\"token punctuation\\\">(</span>tableAlias<span class=\\\"token punctuation\\\">,</span> sqlBuilder<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                  sqlBuilder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">where</span><span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                    sql<span class=\\\"token punctuation\\\">.</span>fragment<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>tableAlias<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">.id = </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                      sql<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">value</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                    <span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                <span class=\\\"token punctuation\\\">}</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// Finally we send the email. If this</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// fails then we'll catch the error</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// and roll back the transaction, and</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// it will be as if the user never</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// registered</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">mockSendEmail</span><span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              args<span class=\\\"token punctuation\\\">.</span>input<span class=\\\"token punctuation\\\">.</span>email<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              <span class=\\\"token string\\\">\\\"Welcome to my site\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`You're user </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>user<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> - `</span></span> <span class=\\\"token operator\\\">+</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`thanks for being awesome`</span></span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// Success! Write the user to the database.</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token keyword\\\">await</span> pgClient<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">query</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"RELEASE SAVEPOINT graphql_mutation\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// We pass the fetched result via the</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// `user` field to match the</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// @recurseDataGenerators directive</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// used above. GraphQL mutation</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// payloads typically have additional</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// fields.</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              user<span class=\\\"token punctuation\\\">:</span> row<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              query<span class=\\\"token punctuation\\\">:</span> build<span class=\\\"token punctuation\\\">.</span>$$isQuery<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</span>          <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">e</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// Oh noes! If at first you don't succeed,</span>\\n            <span class=\\\"token comment\\\">// destroy all evidence you ever tried.</span>\\n            <span class=\\\"token keyword\\\">await</span> pgClient<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">query</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"ROLLBACK TO SAVEPOINT graphql_mutation\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">throw</span> e<span class=\\\"token punctuation\\\">;</span>\\n          <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Note that the <code class=\\\"language-text\\\">@recurseDataGenerators</code> directive here tells PostGraphile to act\\nas if the RegisterUserPayload didn't exist and instead the <code class=\\\"language-text\\\">user</code> field was\\nreturned by the mutation directly. This is because we often add other fields to\\nmutation payloads, such as <code class=\\\"language-text\\\">query</code> for the root Query type.</p>\",\"frontmatter\":{\"path\":\"/postgraphile/make-extend-schema-plugin/\",\"title\":\"graphile-utils makeExtendSchemaPlugin\",\"showExamples\":null}},\"nav\":{\"edges\":[{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [0] >>> JSON\",\"name\":\"news\",\"sections\":[{\"id\":\"main\",\"title\":\"Archive\"},{\"id\":\"about\",\"title\":\"About\"}],\"pages\":[{\"to\":\"/news/postgraphile-version-4/\",\"title\":\"Version 4 Announcement\",\"sectionId\":\"main\",\"subpages\":null},{\"to\":\"/news/press-kit/\",\"title\":\"Press Kit\",\"sectionId\":\"about\",\"subpages\":null}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [1] >>> JSON\",\"name\":\"graphile-build\",\"sections\":[{\"id\":\"guides\",\"title\":\"Overview\"},{\"id\":\"library-reference\",\"title\":\"Using the Library\"},{\"id\":\"plugin-reference\",\"title\":\"Building a Plugin\"}],\"pages\":[{\"to\":\"/graphile-build/getting-started/\",\"title\":\"Getting Started\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/graphile-build/plugins/\",\"title\":\"Plugins\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/graphile-build/hooks/\",\"title\":\"Hooks\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/graphile-build/look-ahead/\",\"title\":\"Look Ahead\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/graphile-build/graphile-build/\",\"title\":\"graphile-build\",\"sectionId\":\"library-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/schema-builder/\",\"title\":\"SchemaBuilder\",\"sectionId\":\"library-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/plugin-options/\",\"title\":\"Options\",\"sectionId\":\"library-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/default-plugins/\",\"title\":\"Default Plugins\",\"sectionId\":\"library-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/omitting-plugins/\",\"title\":\"Omitting Plugins\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/graphile-build/all-hooks/\",\"title\":\"All Hooks\",\"sectionId\":\"plugin-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/build-object/\",\"title\":\"Build Object\",\"sectionId\":\"plugin-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/context-object/\",\"title\":\"Context Object\",\"sectionId\":\"plugin-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/schema-builder/\",\"title\":\"SchemaBuilder\",\"sectionId\":\"plugin-reference\",\"subpages\":[]}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [2] >>> JSON\",\"name\":\"postgraphile\",\"sections\":[{\"id\":\"overview\",\"title\":\"Overview\"},{\"id\":\"basics\",\"title\":\"Operation\"},{\"id\":\"customising\",\"title\":\"Customising\"},{\"id\":\"guides\",\"title\":\"Guides\"},{\"id\":\"community\",\"title\":\"Community\"},{\"id\":\"faq\",\"title\":\"FAQ\"}],\"pages\":[{\"to\":\"/postgraphile/introduction/\",\"title\":\"Introduction\",\"sectionId\":\"overview\",\"subpages\":[]},{\"to\":\"/postgraphile/examples/\",\"title\":\"EXAMPLES\",\"sectionId\":\"overview\",\"subpages\":[]},{\"to\":\"/postgraphile/usage/\",\"title\":\"Usage\",\"sectionId\":\"overview\",\"subpages\":[{\"to\":\"/postgraphile/usage-cli/\",\"title\":\"CLI Usage\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/usage-library/\",\"title\":\"Library Usage\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/usage-schema/\",\"title\":\"Schema-only Usage\",\"sectionId\":\"overview\"}]},{\"to\":\"/postgraphile/performance/\",\"title\":\"Performance\",\"sectionId\":\"overview\",\"subpages\":[]},{\"to\":\"/postgraphile/requirements/\",\"title\":\"Requirements\",\"sectionId\":\"overview\",\"subpages\":[]},{\"to\":\"/postgraphile/quick-start-guide/\",\"title\":\"Quick Start Guide\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/namespaces/\",\"title\":\"Namespaces\",\"sectionId\":\"basics\",\"subpages\":null},{\"to\":\"/postgraphile/inflection/\",\"title\":\"Inflection\",\"sectionId\":\"basics\",\"subpages\":null},{\"to\":\"/postgraphile/tables/\",\"title\":\"Tables\",\"sectionId\":\"basics\",\"subpages\":[{\"to\":\"/postgraphile/relations/\",\"title\":\"Relations\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/connections/\",\"title\":\"Connections\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/filtering/\",\"title\":\"Filtering\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/crud-mutations/\",\"title\":\"CRUD Mutations\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/node-id/\",\"title\":\"nodeId / id\",\"sectionId\":\"basics\"}]},{\"to\":\"/postgraphile/functions/\",\"title\":\"Functions\",\"sectionId\":\"basics\",\"subpages\":[{\"to\":\"/postgraphile/computed-columns/\",\"title\":\"Computed Columns\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/custom-queries/\",\"title\":\"Custom Queries\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/custom-mutations/\",\"title\":\"Custom Mutations\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/function-restrictions/\",\"title\":\"Function Restrictions\",\"sectionId\":\"basics\"}]},{\"to\":\"/postgraphile/postgresql-indexes/\",\"title\":\"PostgreSQL Indexes\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/security/\",\"title\":\"Security\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/subscriptions/\",\"title\":\"Subscriptions\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/reserved-keywords/\",\"title\":\"Reserved Keywords\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/debugging/\",\"title\":\"Debugging\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/smart-comments/\",\"title\":\"Smart Comments\",\"sectionId\":\"customising\",\"subpages\":[]},{\"to\":\"/postgraphile/extending/\",\"title\":\"Schema Plugins\",\"sectionId\":\"customising\",\"subpages\":[{\"to\":\"/postgraphile/make-extend-schema-plugin/\",\"title\":\"makeExtendSchemaPlugin\",\"sectionId\":\"customising\"},{\"to\":\"/postgraphile/make-add-inflectors-plugin/\",\"title\":\"makeAddInflectorsPlugin\",\"sectionId\":\"customising\"},{\"to\":\"/postgraphile/extending-raw/\",\"title\":\"Graphile Engine\",\"sectionId\":\"customising\"}]},{\"to\":\"/postgraphile/plugins/\",\"title\":\"Server Plugins\",\"sectionId\":\"customising\",\"subpages\":[]},{\"to\":\"/postgraphile/evaluating/\",\"title\":\"Evaluating for your Project\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/postgresql-schema-design/\",\"title\":\"PostgreSQL Schema Design\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/production/\",\"title\":\"Production Considerations\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/jwt-guide/\",\"title\":\"PostGraphile JWT Guide\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/default-role/\",\"title\":\"The Default Role\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/v4-new-features/\",\"title\":\"v4 Feature Guide\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/v3-migration/\",\"title\":\"v3 → v4 Migration Guide\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/testing-jest/\",\"title\":\"Testing with Jest\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/community-plugins/\",\"title\":\"Community Plugins\",\"sectionId\":\"community\",\"subpages\":[]},{\"to\":\"/postgraphile/community-chat/\",\"title\":\"Community Chat\",\"sectionId\":\"community\",\"subpages\":[]},{\"to\":\"/postgraphile/code-of-conduct/\",\"title\":\"Code of Conduct\",\"sectionId\":\"community\",\"subpages\":[]},{\"to\":\"/postgraphile/introspection/\",\"title\":\"Introspection?\",\"sectionId\":\"faq\",\"subpages\":[]},{\"to\":\"/postgraphile/why-nullable/\",\"title\":\"Why is it nullable?\",\"sectionId\":\"faq\",\"subpages\":[]}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [3] >>> JSON\",\"name\":\"graphile-build-pg\",\"sections\":[{\"id\":\"overview\",\"title\":\"Usage\"}],\"pages\":[{\"to\":\"/graphile-build-pg/settings/\",\"title\":\"Settings\",\"sectionId\":\"overview\",\"subpages\":[]}]}}]},\"examples\":{\"edges\":[{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [0] >>> JSON\",\"title\":\"Basic\",\"examples\":[{\"title\":\"Forums\",\"query\":\"{\\n  allForums {\\n    nodes {\\n      nodeId\\n      id\\n      slug\\n      name\\n      description\\n    }\\n  }\\n}\\n\",\"result\":\"{\\n  \\\"allForums\\\": {\\n    \\\"nodes\\\": [\\n      {\\n        \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDFd\\\",\\n        \\\"id\\\": 1,\\n        \\\"slug\\\": \\\"cat-life\\\",\\n        \\\"name\\\": \\\"Cat Life\\\",\\n        \\\"description\\\":\\n          \\\"A forum all about cats and how fluffy they are and how they completely ignore their owners unless there is food. Or yarn.\\\"\\n      },\\n      {\\n        \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDJd\\\",\\n        \\\"id\\\": 2,\\n        \\\"slug\\\": \\\"dog-life\\\",\\n        \\\"name\\\": \\\"Dog Life\\\",\\n        \\\"description\\\": \\\"\\\"\\n      },\\n      {\\n        \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDNd\\\",\\n        \\\"id\\\": 3,\\n        \\\"slug\\\": \\\"slug-life\\\",\\n        \\\"name\\\": \\\"Slug Life\\\",\\n        \\\"description\\\": \\\"\\\"\\n      }\\n    ]\\n  }\\n}\\n\"},{\"title\":\"Forum by slug\",\"query\":\"{\\n  forumBySlug(slug: \\\"slug-life\\\") {\\n    nodeId\\n    id\\n    slug\\n    name\\n    description\\n  }\\n}\\n\",\"result\":\"{\\n  \\\"forumBySlug\\\": {\\n    \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDNd\\\",\\n    \\\"id\\\": 3,\\n    \\\"slug\\\": \\\"slug-life\\\",\\n    \\\"name\\\": \\\"Slug Life\\\",\\n    \\\"description\\\": \\\"\\\"\\n  }\\n}\\n\"}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [1] >>> JSON\",\"title\":\"Collections\",\"examples\":[{\"title\":\"First offset\",\"query\":\"{\\n  allForums(first: 1, offset: 1) {\\n    nodes {\\n      nodeId\\n      id\\n      name\\n    }\\n  }\\n}\\n\",\"result\":\"{\\n  \\\"allForums\\\": {\\n    \\\"nodes\\\": [\\n      {\\n        \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDJd\\\",\\n        \\\"id\\\": 2,\\n        \\\"name\\\": \\\"Dog Life\\\"\\n      }\\n    ]\\n  }\\n}\\n\"},{\"title\":\"Relation condition\",\"query\":\"{\\n  forumBySlug(slug: \\\"cat-life\\\") {\\n    nodeId\\n    id\\n    name\\n    topics(\\n      condition: { authorId: 1 }\\n    ) {\\n      nodes {\\n        nodeId\\n        id\\n        title\\n      }\\n    }\\n  }\\n}\\n\",\"result\":\"{\\n  \\\"forumBySlug\\\": {\\n    \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDFd\\\",\\n    \\\"id\\\": 1,\\n    \\\"name\\\": \\\"Cat Life\\\",\\n    \\\"topics\\\": {\\n      \\\"nodes\\\": [\\n        {\\n          \\\"nodeId\\\":\\n            \\\"WyJ0b3BpY3MiLDFd\\\",\\n          \\\"id\\\": 1,\\n          \\\"title\\\": \\\"cats cats cats\\\"\\n        },\\n        {\\n          \\\"nodeId\\\":\\n            \\\"WyJ0b3BpY3MiLDJd\\\",\\n          \\\"id\\\": 2,\\n          \\\"title\\\": \\\"snooze life\\\"\\n        },\\n        {\\n          \\\"nodeId\\\":\\n            \\\"WyJ0b3BpY3MiLDNd\\\",\\n          \\\"id\\\": 3,\\n          \\\"title\\\": \\\"too hot\\\"\\n        }\\n      ]\\n    }\\n  }\\n}\\n\"}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [2] >>> JSON\",\"title\":\"Relations\",\"examples\":[{\"title\":\"Forums topics posts\",\"query\":\"{\\n  forumById(id: 1) {\\n    name\\n    topics(\\n      first: 1\\n      orderBy: [CREATED_AT_ASC]\\n    ) {\\n      nodes {\\n        id\\n        title\\n        bodySummary\\n        author {\\n          id\\n          username\\n        }\\n        posts(\\n          first: 1\\n          orderBy: [ID_DESC]\\n        ) {\\n          nodes {\\n            id\\n            author {\\n              id\\n              username\\n            }\\n            body\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"result\":\"{\\n  \\\"forumById\\\": {\\n    \\\"name\\\": \\\"Cat Life\\\",\\n    \\\"topics\\\": {\\n      \\\"nodes\\\": [\\n        {\\n          \\\"id\\\": 1,\\n          \\\"title\\\": \\\"cats cats cats\\\",\\n          \\\"bodySummary\\\":\\n            \\\"lets discuss cats because t...\\\",\\n          \\\"author\\\": {\\n            \\\"id\\\": 1,\\n            \\\"username\\\": \\\"user\\\"\\n          },\\n          \\\"posts\\\": {\\n            \\\"nodes\\\": [\\n              {\\n                \\\"id\\\": 3,\\n                \\\"author\\\": {\\n                  \\\"id\\\": 1,\\n                  \\\"username\\\": \\\"user\\\"\\n                },\\n                \\\"body\\\":\\n                  \\\"I love it when they completely ignore you until they want something. So much better than dogs am I rite?\\\"\\n              }\\n            ]\\n          }\\n        }\\n      ]\\n    }\\n  }\\n}\\n\"}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [3] >>> JSON\",\"title\":\"Mutations\",\"examples\":[{\"title\":\"Create\",\"query\":\"mutation {\\n  createTopic(\\n    input: {\\n      topic: {\\n        forumId: 1\\n        title: \\\"My question relates to mutations...\\\"\\n        body: \\\"How do you write them?\\\"\\n      }\\n    }\\n  ) {\\n    topic {\\n      nodeId\\n      id\\n      forumId\\n      title\\n      body\\n    }\\n  }\\n}\\n\",\"result\":\"{\\n  \\\"createTopic\\\": {\\n    \\\"topic\\\": {\\n      \\\"nodeId\\\": \\\"WyJ0b3BpY3MiLDRd\\\",\\n      \\\"id\\\": 4,\\n      \\\"forumId\\\": 1,\\n      \\\"title\\\":\\n        \\\"My question relates to mutations...\\\",\\n      \\\"body\\\": \\\"How do you write them?\\\"\\n    }\\n  }\\n}\\n\"},{\"title\":\"Update\",\"query\":\"mutation {\\n  updateTopicById(\\n    input: {\\n      id: 1\\n      topicPatch: {\\n        title: \\\"My (edited) title\\\"\\n      }\\n    }\\n  ) {\\n    topic {\\n      nodeId\\n      id\\n      title\\n      body\\n    }\\n  }\\n}\\n\\n# Works for a table like:\\n#\\n#   create table app_public.topics (\\n#     id serial primary key,\\n#     forum_id integer NOT NULL references app_public.forums on delete cascade,\\n#     title text NOT NULL,\\n#     body text DEFAULT ''::text NOT NULL\\n#   );\\n\",\"result\":\"{\\n  \\\"updateTopicById\\\": {\\n    \\\"topic\\\": {\\n      \\\"nodeId\\\": \\\"WyJ0b3BpY3MiLDFd\\\",\\n      \\\"id\\\": 1,\\n      \\\"title\\\": \\\"My (edited) title\\\",\\n      \\\"body\\\":\\n        \\\"lets discuss cats because theyre totally cool\\\"\\n    }\\n  }\\n}\\n\"},{\"title\":\"Delete\",\"query\":\"mutation {\\n  deleteTopicById(input: { id: 1 }) {\\n    deletedTopicId\\n  }\\n}\\n\",\"result\":\"{\\n  \\\"deleteTopicById\\\": {\\n    \\\"deletedTopicId\\\":\\n      \\\"WyJ0b3BpY3MiLDFd\\\"\\n  }\\n}\\n\"}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [4] >>> JSON\",\"title\":\"Custom queries\",\"examples\":[{\"title\":\"Single scalar\",\"query\":\"{\\n  randomNumber\\n}\\n\\n# Generated by SQL like:\\n#\\n#  create function app_public.random_number() returns int\\n#  language sql stable\\n#  as $$\\n#    select 4; -- Chosen by fair dice roll. Guaranteed to be random. XKCD#221\\n#  $$;\\n#\\n\",\"result\":\"{ \\\"randomNumber\\\": 4 }\\n\"},{\"title\":\"Single row\",\"query\":\"{\\n  currentUser {\\n    nodeId\\n    id\\n    username\\n  }\\n}\\n\\n# Added to the GraphQL schema via\\n# this SQL:\\n#\\n#   create function current_user()\\n#   returns app_public.users\\n#   language sql stable\\n#   as $$\\n#     select users.*\\n#     from app_public.users\\n#     where id = current_user_id();\\n#   $$;\\n\",\"result\":\"{\\n  \\\"currentUser\\\": {\\n    \\\"nodeId\\\": \\\"WyJ1c2VycyIsMV0=\\\",\\n    \\\"id\\\": 1,\\n    \\\"username\\\": \\\"user\\\"\\n  }\\n}\\n\"},{\"title\":\"Rows connection\",\"query\":\"{\\n  forumsAboutCats {\\n    nodes {\\n      nodeId\\n      id\\n      name\\n      slug\\n    }\\n  }\\n}\\n\\n# Created from SQL like:\\n#\\n#  create function app_public.forums_about_cats()\\n#  returns setof app_public.forums\\n#  language sql stable\\n#  as $$\\n#    select *\\n#    from app_public.forums\\n#    where slug like 'cat-%';\\n#  $$;\\n\",\"result\":\"{\\n  \\\"forumsAboutCats\\\": {\\n    \\\"nodes\\\": [\\n      {\\n        \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDFd\\\",\\n        \\\"id\\\": 1,\\n        \\\"name\\\": \\\"Cat Life\\\",\\n        \\\"slug\\\": \\\"cat-life\\\"\\n      }\\n    ]\\n  }\\n}\\n\"}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [5] >>> JSON\",\"title\":\"Custom mutations\",\"examples\":[{\"title\":\"Forgot password\",\"query\":\"mutation {\\n  forgotPassword(\\n    input: {\\n      email: \\\"user@example.com\\\"\\n    }\\n  ) {\\n    success\\n  }\\n}\\n\\n# Generated with SQL like this:\\n#\\n#  create function forgot_password(email text)\\n#  returns boolean\\n#  language plpgsql volatile\\n#  as $$\\n#    ...\\n#  $$;\\n#\\n#  -- Optionally rename the result field:\\n#  comment on function\\n#    forgot_password(email text)\\n#    is '@resultFieldName success';\\n\",\"result\":\"{\\n  \\\"forgotPassword\\\": {\\n    \\\"success\\\": true\\n  }\\n}\\n\"}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [6] >>> JSON\",\"title\":\"Computed columns\",\"examples\":[{\"title\":\"Topic summary\",\"query\":\"{\\n  topicById(id: 2) {\\n    body\\n    bodySummary\\n  }\\n}\\n\\n# Generated by SQL like:\\n#\\n#  create function app_public.topics_body_summary(\\n#    t app_public.topics,\\n#    max_length int = 30\\n#  )\\n#  returns text\\n#  language sql stable\\n#  as $$\\n#    select case\\n#      when length(t.body) > max_length\\n#      then left(t.body, max_length - 3)\\n#             || '...'\\n#      else t.body\\n#      end;\\n#  $$;\\n\",\"result\":\"{\\n  \\\"topicById\\\": {\\n    \\\"body\\\":\\n      \\\"do you find your cat just sleeps everywhere\\\",\\n    \\\"bodySummary\\\":\\n      \\\"do you find your cat just s...\\\"\\n  }\\n}\\n\"},{\"title\":\"Topic summary with arg\",\"query\":\"{\\n  topicById(id: 2) {\\n    body\\n    bodySummary(maxLength: 20)\\n  }\\n}\\n\\n# Generated by SQL like:\\n#\\n#  create function app_public.topics_body_summary(\\n#    t app_public.topics,\\n#    max_length int = 30\\n#  )\\n#  returns text\\n#  language sql stable\\n#  as $$\\n#    select case\\n#      when length(t.body) > max_length\\n#      then left(t.body, max_length - 3)\\n#             || '...'\\n#      else t.body\\n#      end;\\n#  $$;\\n\",\"result\":\"{\\n  \\\"topicById\\\": {\\n    \\\"body\\\":\\n      \\\"do you find your cat just sleeps everywhere\\\",\\n    \\\"bodySummary\\\":\\n      \\\"do you find your ...\\\"\\n  }\\n}\\n\"}]}}]}},\"pathContext\":{\"layout\":\"page\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---postgraphile-make-extend-schema-plugin-b5f799ad7b4beea19985.js","module.exports = {\"data\":{\"remark\":{\"html\":\"<h2 id=\\\"makeextendschemaplugin-graphile-utils\\\"><a href=\\\"#makeextendschemaplugin-graphile-utils\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>makeExtendSchemaPlugin (graphile-utils)</h2>\\n<p>The <code class=\\\"language-text\\\">graphile-utils</code> module contains some helpers for extending your\\nPostGraphile (or Graphile Engine) GraphQL schema without having to understand\\nthe complex plugin system.</p>\\n<p>The main one you'll care about to start with is <code class=\\\"language-text\\\">makeExtendSchemaPlugin</code>.</p>\\n<p>Using <code class=\\\"language-text\\\">makeExtendSchemaPlugin</code> you can write a plugin that will merge additional\\nGraphQL types and resolvers into your schema using a similar syntax to\\n<code class=\\\"language-text\\\">graphql-tools</code>. You just need to provide the <code class=\\\"language-text\\\">typeDefs</code> and <code class=\\\"language-text\\\">resolvers</code> to\\nuse. Your plugin will likely take a shape like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>\\n  makeExtendSchemaPlugin<span class=\\\"token punctuation\\\">,</span>\\n  gql<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'graphile-utils'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> MySchemaExtensionPlugin <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token function\\\">makeExtendSchemaPlugin</span><span class=\\\"token punctuation\\\">(</span>\\n    build <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">      typeDefs<span class=\\\"token punctuation\\\">:</span> gql<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`...`</span></span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      resolvers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">...</span>\\n</span>    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> MySchemaExtensionPlugin<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>And would be added to your PostGraphile instance via</p>\\n<ul>\\n<li>CLI: <code class=\\\"language-text\\\">--append-plugins `pwd`/MySchemaExtensionPlugin.js</code></li>\\n<li>Library: <code class=\\\"language-text\\\">appendPlugins: [require(&#39;./MySchemaExtensionPlugin&#39;)]</code></li>\\n</ul>\\n<p>The <code class=\\\"language-text\\\">build</code> argument to the makeExtendSchemaPlugin callback contains lots of\\ninformation and helpers defined by various plugins, most importantly it\\nincludes the introspection results (<code class=\\\"language-text\\\">build.pgIntrospectionResultsByKind</code>),\\ninflection functions (<code class=\\\"language-text\\\">build.inflection</code>), and SQL helper (<code class=\\\"language-text\\\">build.pgSql</code>, which\\nis just an instance of <a href=\\\"https://www.npmjs.com/package/pg-sql2\\\">pg-sql2</a>).</p>\\n<p>The callback should return an object with two keys:</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">typeDefs</code>: a graphql AST generated with the <code class=\\\"language-text\\\">gql</code> helper from\\n<code class=\\\"language-text\\\">graphile-utils</code> (note this is NOT from the <code class=\\\"language-text\\\">graphql-tag</code> library, ours works\\nin a slightly different way).</li>\\n<li><code class=\\\"language-text\\\">resolvers</code>: an object that's keyed by the GraphQL type names of types\\ndefined (or extended) in <code class=\\\"language-text\\\">typeDefs</code>, the values of which are objects keyed by\\nthe field names with values that are resolver functions.</li>\\n</ul>\\n<p>For a larger example of how typeDefs and resolvers work, have a look at the\\n<a href=\\\"https://www.apollographql.com/docs/graphql-tools/generate-schema.html\\\">graphql-tools\\ndocs</a> -\\nours work in a similar way.</p>\\n<p>Note that the resolve functions defined in <code class=\\\"language-text\\\">resolvers</code> will be sent the\\nstandard 4 GraphQL resolve arguments (<code class=\\\"language-text\\\">parent</code>, <code class=\\\"language-text\\\">args</code>, <code class=\\\"language-text\\\">context</code>,\\n<code class=\\\"language-text\\\">resolveInfo</code>); but in addition they will be passed a 5th argument that\\ncontains graphile-specific helpers.</p>\\n<h3 id=\\\"reading-database-column-values\\\"><a href=\\\"#reading-database-column-values\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Reading database column values</h3>\\n<p>When extending a schema, it's often because you want to expose data from Node.js\\nthat would be difficult too difficult (or impossible) to access from PostgreSQL.\\nWhen defining a field on an existing table-backed type defined by PostGraphile,\\nit's useful to access data from the underlying table in the resolver.</p>\\n<p>To do this you can use the <code class=\\\"language-text\\\">@requires(columns: […])</code> field directive to declare\\nthe data dependencies of your resolver. This guarantees that when the resolver\\nis executed, the data is immediately available.</p>\\n<p>Here's an example to illustrate.</p>\\n<p>In the database you have a <code class=\\\"language-text\\\">product</code> table (imagine an online store), that\\nPostGraphile will include in the GraphQL schema by creating a type <code class=\\\"language-text\\\">Product</code>\\nwith fields <code class=\\\"language-text\\\">id</code>, <code class=\\\"language-text\\\">name</code>, <code class=\\\"language-text\\\">price_in_us_cents</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code class=\\\"language-sql\\\"><span class=\\\"token keyword\\\">create</span> <span class=\\\"token keyword\\\">table</span> product <span class=\\\"token punctuation\\\">(</span>\\n  id uuid <span class=\\\"token keyword\\\">primary</span> <span class=\\\"token keyword\\\">key</span><span class=\\\"token punctuation\\\">,</span>\\n  name <span class=\\\"token keyword\\\">text</span> <span class=\\\"token operator\\\">not</span> <span class=\\\"token boolean\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  price_in_us_cents <span class=\\\"token keyword\\\">integer</span> <span class=\\\"token operator\\\">not</span> <span class=\\\"token boolean\\\">null</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>This would result in the following GraphQL type:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\">type Product <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">id</span><span class=\\\"token punctuation\\\">:</span> UUID<span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">priceInUsCents</span><span class=\\\"token punctuation\\\">:</span> Int<span class=\\\"token operator\\\">!</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>However imagine you're selling internationally, and you want to expose the price\\nin other currencies directly from the <code class=\\\"language-text\\\">Product</code> type itself. This kind of\\nfunctionality is trivial to perform in Node.js (e.g. by making a REST call to a\\nforeign exchange service over the internet) but might be a struggle from with\\nPostgreSQL.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> postgraphile <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"postgraphile\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> makeExtendSchemaPlugin<span class=\\\"token punctuation\\\">,</span> gql <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"graphile-utils\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"token keyword\\\">const</span> express <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"express\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> convertUsdToAud <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"ficticious-npm-library\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">const</span> MyForeignExchangePlugin <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">makeExtendSchemaPlugin</span><span class=\\\"token punctuation\\\">(</span>build <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> pgSql<span class=\\\"token punctuation\\\">:</span> sql <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> build<span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    typeDefs<span class=\\\"token punctuation\\\">:</span> gql<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      extend type Product {\\n</span><span class=\\\"gatsby-highlight-code-line\\\">        priceInAuCents: Int! @requires(columns: [\\\"price_in_us_cents\\\"])\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      }\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    `</span></span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    resolvers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      Product<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">        priceInAuCents<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          product\\n</span><span class=\\\"gatsby-highlight-code-line\\\">        <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token comment\\\">// Note that the columns are converted to fields, so the case changes</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token comment\\\">// from `price_in_us_cents` to `priceInUsCents`</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> priceInUsCents <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> product<span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">convertUsdToAud</span><span class=\\\"token punctuation\\\">(</span>priceInUsCents<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>\\n<span class=\\\"token keyword\\\">const</span> app <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">express</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">postgraphile</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DATABASE_URL</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"app_public\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    graphiql<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">    appendPlugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>MyForeignExchangePlugin<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n</span>  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3030</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3 id=\\\"the-selectgraphqlresultfromtable-helper\\\"><a href=\\\"#the-selectgraphqlresultfromtable-helper\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>The <code class=\\\"language-text\\\">selectGraphQLResultFromTable</code> helper</h3>\\n<p>The <code class=\\\"language-text\\\">selectGraphQLResultFromTable</code> function is vital if you want to return data\\nfrom the database from your new GraphQL field. It is responsible for hooking into\\nthe query look-ahead features of <code class=\\\"language-text\\\">graphile-build</code> to inspect the incoming GraphQL\\nquery and pull down the relevant data from the database\\n(including nested relations). You are then expected to return the result of this\\nfetch via your resolver. You can use the <code class=\\\"language-text\\\">sqlBuilder</code> object to customise the\\ngenerated query, changing the order, adding <code class=\\\"language-text\\\">where</code> clauses, <code class=\\\"language-text\\\">limit</code>s, etc.\\nNote that if you do not wish to return the data directly, you can use the\\n<code class=\\\"language-text\\\">@recurseDataGenerators</code> directive on the intermediary field, see the example\\nbelow.</p>\\n<p>The <code class=\\\"language-text\\\">sqlBuilder</code> uses an SQL AST constructed via\\n<a href=\\\"https://github.com/graphile/pg-sql2/blob/master/README.md\\\"><code class=\\\"language-text\\\">pg-sql2</code> methods</a>\\nto dynamically create powerful SQL queries without risking SQL injection\\nattacks. The <code class=\\\"language-text\\\">sqlBuilder</code> has a number of methods which affect the query which\\nwill be generated. The main ones you're likely to want are:</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">where(sqlFragment)</code>; e.g. <code class=\\\"language-text\\\">sqlBuilder.where(build.pgSql.fragment`is_admin is true`)</code></li>\\n<li><code class=\\\"language-text\\\">orderBy(() =&gt; sqlFragment, ascending)</code>; e.g. <code class=\\\"language-text\\\">sqlBuilder.orderBy(() =&gt; build.pgSql.fragment`created_at`, false)</code></li>\\n<li><code class=\\\"language-text\\\">limit(number)</code>; e.g. <code class=\\\"language-text\\\">sqlBuilder.limit(1)</code></li>\\n<li><code class=\\\"language-text\\\">offset(number)</code>; e.g. <code class=\\\"language-text\\\">sqlBuilder.offset(1)</code></li>\\n<li><code class=\\\"language-text\\\">select(() =&gt; sqlFragment, alias)</code>; e.g. <code class=\\\"language-text\\\">sqlBuilder.select(() =&gt; build.pgSql.fragment`gen_random_uuid()`, &#39;__my_random_uuid&#39;)</code> - it's advised to start your alias with two underscores to prevent it clashing with any potential columns exposed as GraphQL fields.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> postgraphile <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"postgraphile\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> makeExtendSchemaPlugin<span class=\\\"token punctuation\\\">,</span> gql <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"graphile-utils\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> express <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"express\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> app <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">express</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">const</span> MyRandomUserPlugin <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">makeExtendSchemaPlugin</span><span class=\\\"token punctuation\\\">(</span>build <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> pgSql<span class=\\\"token punctuation\\\">:</span> sql <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> build<span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    typeDefs<span class=\\\"token punctuation\\\">:</span> gql<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      extend type Query {\\n</span><span class=\\\"gatsby-highlight-code-line\\\">        randomUser: User\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      }\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    `</span></span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    resolvers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      Query<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">        randomUser<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          _query<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          args<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          context<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          resolveInfo<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token punctuation\\\">{</span> selectGraphQLResultFromTable <span class=\\\"token punctuation\\\">}</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">        <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token comment\\\">// Remember: selectGraphQLResultFromTable is where the PostGraphile</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token comment\\\">// look-ahead magic happens!</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token keyword\\\">const</span> rows <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">selectGraphQLResultFromTable</span><span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            sql<span class=\\\"token punctuation\\\">.</span>fragment<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`app_public.users`</span></span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token punctuation\\\">(</span>tableAlias<span class=\\\"token punctuation\\\">,</span> sqlBuilder<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              sqlBuilder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">orderBy</span><span class=\\\"token punctuation\\\">(</span>sql<span class=\\\"token punctuation\\\">.</span>fragment<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`random()`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              sqlBuilder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">limit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token punctuation\\\">}</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token keyword\\\">return</span> rows<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</span>  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">postgraphile</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DATABASE_URL</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"app_public\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    graphiql<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    appendPlugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>MyRandomUserPlugin<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3030</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>The above is a simple and fairly pointless example which would have been better\\nserved by a <a href=\\\"/postgraphile/custom-queries/#custom-query-sql-procedures\\\">Custom Query SQL\\nProcedure</a>; however\\nyou can also use this system to define mutations or to call out to external\\nservices. For example, you might want to add a custom <code class=\\\"language-text\\\">registerUser</code> mutation\\nwhich inserts the new user into the database and also sends them an email:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> MyRegisterUserMutationPlugin <span class=\\\"token operator\\\">=</span>\\n<span class=\\\"token function\\\">makeExtendSchemaPlugin</span><span class=\\\"token punctuation\\\">(</span>build <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> pgSql<span class=\\\"token punctuation\\\">:</span> sql <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> build<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    typeDefs<span class=\\\"token punctuation\\\">:</span> gql<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n      input RegisterUserInput {\\n        name: String!\\n        email: String!\\n        bio: String\\n      }\\n\\n      type RegisterUserPayload {\\n        user: User @recurseDataGenerators\\n        query: Query\\n      }\\n\\n<span class=\\\"gatsby-highlight-code-line\\\">      extend type Mutation {\\n</span>        registerUser(input: RegisterUserInput!):\\n          RegisterUserPayload\\n      }\\n    `</span></span><span class=\\\"token punctuation\\\">,</span>\\n    resolvers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">      Mutation<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">        registerUser<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          _query<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          args<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          context<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          resolveInfo<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token punctuation\\\">{</span> selectGraphQLResultFromTable <span class=\\\"token punctuation\\\">}</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">        <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> pgClient <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token comment\\\">// Start a sub-transaction</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token keyword\\\">await</span> pgClient<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">query</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"SAVEPOINT graphql_mutation\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">          <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// Our custom logic to register the user:</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> rows<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>user<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> pgClient<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">query</span><span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`INSERT INTO app_public.users(\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                name, email, bio\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              ) VALUES ($1, $2, $3)\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              RETURNING *`</span></span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              <span class=\\\"token punctuation\\\">[</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                args<span class=\\\"token punctuation\\\">.</span>input<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                args<span class=\\\"token punctuation\\\">.</span>input<span class=\\\"token punctuation\\\">.</span>email<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                args<span class=\\\"token punctuation\\\">.</span>input<span class=\\\"token punctuation\\\">.</span>bio<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              <span class=\\\"token punctuation\\\">]</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// Now we fetch the result that the GraphQL</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// client requested, using the new user</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// account as the source of the data. You</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// should always use</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// `selectGraphQLResultFromTable` if you</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// return database data from your custom</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// field.</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>row<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">selectGraphQLResultFromTable</span><span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                sql<span class=\\\"token punctuation\\\">.</span>fragment<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`app_public.users`</span></span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                <span class=\\\"token punctuation\\\">(</span>tableAlias<span class=\\\"token punctuation\\\">,</span> sqlBuilder<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                  sqlBuilder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">where</span><span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                    sql<span class=\\\"token punctuation\\\">.</span>fragment<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>tableAlias<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">.id = </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                      sql<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">value</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                    <span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                <span class=\\\"token punctuation\\\">}</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// Finally we send the email. If this</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// fails then we'll catch the error</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// and roll back the transaction, and</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// it will be as if the user never</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// registered</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">mockSendEmail</span><span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              args<span class=\\\"token punctuation\\\">.</span>input<span class=\\\"token punctuation\\\">.</span>email<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              <span class=\\\"token string\\\">\\\"Welcome to my site\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`You're user </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>user<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> - `</span></span> <span class=\\\"token operator\\\">+</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">                <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`thanks for being awesome`</span></span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// Success! Write the user to the database.</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token keyword\\\">await</span> pgClient<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">query</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"RELEASE SAVEPOINT graphql_mutation\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// We pass the fetched result via the</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// `user` field to match the</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// @recurseDataGenerators directive</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// used above. GraphQL mutation</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// payloads typically have additional</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token comment\\\">// fields.</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              user<span class=\\\"token punctuation\\\">:</span> row<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">              query<span class=\\\"token punctuation\\\">:</span> build<span class=\\\"token punctuation\\\">.</span>$$isQuery<span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</span>          <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">e</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// Oh noes! If at first you don't succeed,</span>\\n            <span class=\\\"token comment\\\">// destroy all evidence you ever tried.</span>\\n            <span class=\\\"token keyword\\\">await</span> pgClient<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">query</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"ROLLBACK TO SAVEPOINT graphql_mutation\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">throw</span> e<span class=\\\"token punctuation\\\">;</span>\\n          <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Note that the <code class=\\\"language-text\\\">@recurseDataGenerators</code> directive here tells PostGraphile to act\\nas if the RegisterUserPayload didn't exist and instead the <code class=\\\"language-text\\\">user</code> field was\\nreturned by the mutation directly. This is because we often add other fields to\\nmutation payloads, such as <code class=\\\"language-text\\\">query</code> for the root Query type.</p>\",\"frontmatter\":{\"path\":\"/postgraphile/make-extend-schema-plugin/\",\"title\":\"graphile-utils makeExtendSchemaPlugin\",\"showExamples\":null}},\"nav\":{\"edges\":[{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [0] >>> JSON\",\"name\":\"news\",\"sections\":[{\"id\":\"main\",\"title\":\"Archive\"},{\"id\":\"about\",\"title\":\"About\"}],\"pages\":[{\"to\":\"/news/postgraphile-version-4/\",\"title\":\"Version 4 Announcement\",\"sectionId\":\"main\",\"subpages\":null},{\"to\":\"/news/press-kit/\",\"title\":\"Press Kit\",\"sectionId\":\"about\",\"subpages\":null}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [1] >>> JSON\",\"name\":\"graphile-build\",\"sections\":[{\"id\":\"guides\",\"title\":\"Overview\"},{\"id\":\"library-reference\",\"title\":\"Using the Library\"},{\"id\":\"plugin-reference\",\"title\":\"Building a Plugin\"}],\"pages\":[{\"to\":\"/graphile-build/getting-started/\",\"title\":\"Getting Started\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/graphile-build/plugins/\",\"title\":\"Plugins\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/graphile-build/hooks/\",\"title\":\"Hooks\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/graphile-build/look-ahead/\",\"title\":\"Look Ahead\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/graphile-build/graphile-build/\",\"title\":\"graphile-build\",\"sectionId\":\"library-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/schema-builder/\",\"title\":\"SchemaBuilder\",\"sectionId\":\"library-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/plugin-options/\",\"title\":\"Options\",\"sectionId\":\"library-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/default-plugins/\",\"title\":\"Default Plugins\",\"sectionId\":\"library-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/omitting-plugins/\",\"title\":\"Omitting Plugins\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/graphile-build/all-hooks/\",\"title\":\"All Hooks\",\"sectionId\":\"plugin-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/build-object/\",\"title\":\"Build Object\",\"sectionId\":\"plugin-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/context-object/\",\"title\":\"Context Object\",\"sectionId\":\"plugin-reference\",\"subpages\":[]},{\"to\":\"/graphile-build/schema-builder/\",\"title\":\"SchemaBuilder\",\"sectionId\":\"plugin-reference\",\"subpages\":[]}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [2] >>> JSON\",\"name\":\"postgraphile\",\"sections\":[{\"id\":\"overview\",\"title\":\"Overview\"},{\"id\":\"basics\",\"title\":\"Operation\"},{\"id\":\"customising\",\"title\":\"Customising\"},{\"id\":\"guides\",\"title\":\"Guides\"},{\"id\":\"community\",\"title\":\"Community\"},{\"id\":\"faq\",\"title\":\"FAQ\"}],\"pages\":[{\"to\":\"/postgraphile/introduction/\",\"title\":\"Introduction\",\"sectionId\":\"overview\",\"subpages\":[]},{\"to\":\"/postgraphile/examples/\",\"title\":\"EXAMPLES\",\"sectionId\":\"overview\",\"subpages\":[]},{\"to\":\"/postgraphile/usage/\",\"title\":\"Usage\",\"sectionId\":\"overview\",\"subpages\":[{\"to\":\"/postgraphile/usage-cli/\",\"title\":\"CLI Usage\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/usage-library/\",\"title\":\"Library Usage\",\"sectionId\":\"overview\"},{\"to\":\"/postgraphile/usage-schema/\",\"title\":\"Schema-only Usage\",\"sectionId\":\"overview\"}]},{\"to\":\"/postgraphile/performance/\",\"title\":\"Performance\",\"sectionId\":\"overview\",\"subpages\":[]},{\"to\":\"/postgraphile/requirements/\",\"title\":\"Requirements\",\"sectionId\":\"overview\",\"subpages\":[]},{\"to\":\"/postgraphile/quick-start-guide/\",\"title\":\"Quick Start Guide\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/namespaces/\",\"title\":\"Namespaces\",\"sectionId\":\"basics\",\"subpages\":null},{\"to\":\"/postgraphile/inflection/\",\"title\":\"Inflection\",\"sectionId\":\"basics\",\"subpages\":null},{\"to\":\"/postgraphile/tables/\",\"title\":\"Tables\",\"sectionId\":\"basics\",\"subpages\":[{\"to\":\"/postgraphile/relations/\",\"title\":\"Relations\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/connections/\",\"title\":\"Connections\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/filtering/\",\"title\":\"Filtering\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/crud-mutations/\",\"title\":\"CRUD Mutations\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/node-id/\",\"title\":\"nodeId / id\",\"sectionId\":\"basics\"}]},{\"to\":\"/postgraphile/functions/\",\"title\":\"Functions\",\"sectionId\":\"basics\",\"subpages\":[{\"to\":\"/postgraphile/computed-columns/\",\"title\":\"Computed Columns\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/custom-queries/\",\"title\":\"Custom Queries\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/custom-mutations/\",\"title\":\"Custom Mutations\",\"sectionId\":\"basics\"},{\"to\":\"/postgraphile/function-restrictions/\",\"title\":\"Function Restrictions\",\"sectionId\":\"basics\"}]},{\"to\":\"/postgraphile/postgresql-indexes/\",\"title\":\"PostgreSQL Indexes\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/security/\",\"title\":\"Security\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/subscriptions/\",\"title\":\"Subscriptions\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/reserved-keywords/\",\"title\":\"Reserved Keywords\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/debugging/\",\"title\":\"Debugging\",\"sectionId\":\"basics\",\"subpages\":[]},{\"to\":\"/postgraphile/smart-comments/\",\"title\":\"Smart Comments\",\"sectionId\":\"customising\",\"subpages\":[]},{\"to\":\"/postgraphile/extending/\",\"title\":\"Schema Plugins\",\"sectionId\":\"customising\",\"subpages\":[{\"to\":\"/postgraphile/make-extend-schema-plugin/\",\"title\":\"makeExtendSchemaPlugin\",\"sectionId\":\"customising\"},{\"to\":\"/postgraphile/make-add-inflectors-plugin/\",\"title\":\"makeAddInflectorsPlugin\",\"sectionId\":\"customising\"},{\"to\":\"/postgraphile/extending-raw/\",\"title\":\"Graphile Engine\",\"sectionId\":\"customising\"}]},{\"to\":\"/postgraphile/plugins/\",\"title\":\"Server Plugins\",\"sectionId\":\"customising\",\"subpages\":[]},{\"to\":\"/postgraphile/evaluating/\",\"title\":\"Evaluating for your Project\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/postgresql-schema-design/\",\"title\":\"PostgreSQL Schema Design\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/production/\",\"title\":\"Production Considerations\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/jwt-guide/\",\"title\":\"PostGraphile JWT Guide\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/default-role/\",\"title\":\"The Default Role\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/v4-new-features/\",\"title\":\"v4 Feature Guide\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/v3-migration/\",\"title\":\"v3 → v4 Migration Guide\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/testing-jest/\",\"title\":\"Testing with Jest\",\"sectionId\":\"guides\",\"subpages\":[]},{\"to\":\"/postgraphile/community-plugins/\",\"title\":\"Community Plugins\",\"sectionId\":\"community\",\"subpages\":[]},{\"to\":\"/postgraphile/community-chat/\",\"title\":\"Community Chat\",\"sectionId\":\"community\",\"subpages\":[]},{\"to\":\"/postgraphile/code-of-conduct/\",\"title\":\"Code of Conduct\",\"sectionId\":\"community\",\"subpages\":[]},{\"to\":\"/postgraphile/introspection/\",\"title\":\"Introspection?\",\"sectionId\":\"faq\",\"subpages\":[]},{\"to\":\"/postgraphile/why-nullable/\",\"title\":\"Why is it nullable?\",\"sectionId\":\"faq\",\"subpages\":[]}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [3] >>> JSON\",\"name\":\"graphile-build-pg\",\"sections\":[{\"id\":\"overview\",\"title\":\"Usage\"}],\"pages\":[{\"to\":\"/graphile-build-pg/settings/\",\"title\":\"Settings\",\"sectionId\":\"overview\",\"subpages\":[]}]}}]},\"examples\":{\"edges\":[{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [0] >>> JSON\",\"title\":\"Basic\",\"examples\":[{\"title\":\"Forums\",\"query\":\"{\\n  allForums {\\n    nodes {\\n      nodeId\\n      id\\n      slug\\n      name\\n      description\\n    }\\n  }\\n}\\n\",\"result\":\"{\\n  \\\"allForums\\\": {\\n    \\\"nodes\\\": [\\n      {\\n        \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDFd\\\",\\n        \\\"id\\\": 1,\\n        \\\"slug\\\": \\\"cat-life\\\",\\n        \\\"name\\\": \\\"Cat Life\\\",\\n        \\\"description\\\":\\n          \\\"A forum all about cats and how fluffy they are and how they completely ignore their owners unless there is food. Or yarn.\\\"\\n      },\\n      {\\n        \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDJd\\\",\\n        \\\"id\\\": 2,\\n        \\\"slug\\\": \\\"dog-life\\\",\\n        \\\"name\\\": \\\"Dog Life\\\",\\n        \\\"description\\\": \\\"\\\"\\n      },\\n      {\\n        \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDNd\\\",\\n        \\\"id\\\": 3,\\n        \\\"slug\\\": \\\"slug-life\\\",\\n        \\\"name\\\": \\\"Slug Life\\\",\\n        \\\"description\\\": \\\"\\\"\\n      }\\n    ]\\n  }\\n}\\n\"},{\"title\":\"Forum by slug\",\"query\":\"{\\n  forumBySlug(slug: \\\"slug-life\\\") {\\n    nodeId\\n    id\\n    slug\\n    name\\n    description\\n  }\\n}\\n\",\"result\":\"{\\n  \\\"forumBySlug\\\": {\\n    \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDNd\\\",\\n    \\\"id\\\": 3,\\n    \\\"slug\\\": \\\"slug-life\\\",\\n    \\\"name\\\": \\\"Slug Life\\\",\\n    \\\"description\\\": \\\"\\\"\\n  }\\n}\\n\"}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [1] >>> JSON\",\"title\":\"Collections\",\"examples\":[{\"title\":\"First offset\",\"query\":\"{\\n  allForums(first: 1, offset: 1) {\\n    nodes {\\n      nodeId\\n      id\\n      name\\n    }\\n  }\\n}\\n\",\"result\":\"{\\n  \\\"allForums\\\": {\\n    \\\"nodes\\\": [\\n      {\\n        \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDJd\\\",\\n        \\\"id\\\": 2,\\n        \\\"name\\\": \\\"Dog Life\\\"\\n      }\\n    ]\\n  }\\n}\\n\"},{\"title\":\"Relation condition\",\"query\":\"{\\n  forumBySlug(slug: \\\"cat-life\\\") {\\n    nodeId\\n    id\\n    name\\n    topics(\\n      condition: { authorId: 1 }\\n    ) {\\n      nodes {\\n        nodeId\\n        id\\n        title\\n      }\\n    }\\n  }\\n}\\n\",\"result\":\"{\\n  \\\"forumBySlug\\\": {\\n    \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDFd\\\",\\n    \\\"id\\\": 1,\\n    \\\"name\\\": \\\"Cat Life\\\",\\n    \\\"topics\\\": {\\n      \\\"nodes\\\": [\\n        {\\n          \\\"nodeId\\\":\\n            \\\"WyJ0b3BpY3MiLDFd\\\",\\n          \\\"id\\\": 1,\\n          \\\"title\\\": \\\"cats cats cats\\\"\\n        },\\n        {\\n          \\\"nodeId\\\":\\n            \\\"WyJ0b3BpY3MiLDJd\\\",\\n          \\\"id\\\": 2,\\n          \\\"title\\\": \\\"snooze life\\\"\\n        },\\n        {\\n          \\\"nodeId\\\":\\n            \\\"WyJ0b3BpY3MiLDNd\\\",\\n          \\\"id\\\": 3,\\n          \\\"title\\\": \\\"too hot\\\"\\n        }\\n      ]\\n    }\\n  }\\n}\\n\"}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [2] >>> JSON\",\"title\":\"Relations\",\"examples\":[{\"title\":\"Forums topics posts\",\"query\":\"{\\n  forumById(id: 1) {\\n    name\\n    topics(\\n      first: 1\\n      orderBy: [CREATED_AT_ASC]\\n    ) {\\n      nodes {\\n        id\\n        title\\n        bodySummary\\n        author {\\n          id\\n          username\\n        }\\n        posts(\\n          first: 1\\n          orderBy: [ID_DESC]\\n        ) {\\n          nodes {\\n            id\\n            author {\\n              id\\n              username\\n            }\\n            body\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"result\":\"{\\n  \\\"forumById\\\": {\\n    \\\"name\\\": \\\"Cat Life\\\",\\n    \\\"topics\\\": {\\n      \\\"nodes\\\": [\\n        {\\n          \\\"id\\\": 1,\\n          \\\"title\\\": \\\"cats cats cats\\\",\\n          \\\"bodySummary\\\":\\n            \\\"lets discuss cats because t...\\\",\\n          \\\"author\\\": {\\n            \\\"id\\\": 1,\\n            \\\"username\\\": \\\"user\\\"\\n          },\\n          \\\"posts\\\": {\\n            \\\"nodes\\\": [\\n              {\\n                \\\"id\\\": 3,\\n                \\\"author\\\": {\\n                  \\\"id\\\": 1,\\n                  \\\"username\\\": \\\"user\\\"\\n                },\\n                \\\"body\\\":\\n                  \\\"I love it when they completely ignore you until they want something. So much better than dogs am I rite?\\\"\\n              }\\n            ]\\n          }\\n        }\\n      ]\\n    }\\n  }\\n}\\n\"}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [3] >>> JSON\",\"title\":\"Mutations\",\"examples\":[{\"title\":\"Create\",\"query\":\"mutation {\\n  createTopic(\\n    input: {\\n      topic: {\\n        forumId: 1\\n        title: \\\"My question relates to mutations...\\\"\\n        body: \\\"How do you write them?\\\"\\n      }\\n    }\\n  ) {\\n    topic {\\n      nodeId\\n      id\\n      forumId\\n      title\\n      body\\n    }\\n  }\\n}\\n\",\"result\":\"{\\n  \\\"createTopic\\\": {\\n    \\\"topic\\\": {\\n      \\\"nodeId\\\": \\\"WyJ0b3BpY3MiLDRd\\\",\\n      \\\"id\\\": 4,\\n      \\\"forumId\\\": 1,\\n      \\\"title\\\":\\n        \\\"My question relates to mutations...\\\",\\n      \\\"body\\\": \\\"How do you write them?\\\"\\n    }\\n  }\\n}\\n\"},{\"title\":\"Update\",\"query\":\"mutation {\\n  updateTopicById(\\n    input: {\\n      id: 1\\n      topicPatch: {\\n        title: \\\"My (edited) title\\\"\\n      }\\n    }\\n  ) {\\n    topic {\\n      nodeId\\n      id\\n      title\\n      body\\n    }\\n  }\\n}\\n\\n# Works for a table like:\\n#\\n#   create table app_public.topics (\\n#     id serial primary key,\\n#     forum_id integer NOT NULL references app_public.forums on delete cascade,\\n#     title text NOT NULL,\\n#     body text DEFAULT ''::text NOT NULL\\n#   );\\n\",\"result\":\"{\\n  \\\"updateTopicById\\\": {\\n    \\\"topic\\\": {\\n      \\\"nodeId\\\": \\\"WyJ0b3BpY3MiLDFd\\\",\\n      \\\"id\\\": 1,\\n      \\\"title\\\": \\\"My (edited) title\\\",\\n      \\\"body\\\":\\n        \\\"lets discuss cats because theyre totally cool\\\"\\n    }\\n  }\\n}\\n\"},{\"title\":\"Delete\",\"query\":\"mutation {\\n  deleteTopicById(input: { id: 1 }) {\\n    deletedTopicId\\n  }\\n}\\n\",\"result\":\"{\\n  \\\"deleteTopicById\\\": {\\n    \\\"deletedTopicId\\\":\\n      \\\"WyJ0b3BpY3MiLDFd\\\"\\n  }\\n}\\n\"}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [4] >>> JSON\",\"title\":\"Custom queries\",\"examples\":[{\"title\":\"Single scalar\",\"query\":\"{\\n  randomNumber\\n}\\n\\n# Generated by SQL like:\\n#\\n#  create function app_public.random_number() returns int\\n#  language sql stable\\n#  as $$\\n#    select 4; -- Chosen by fair dice roll. Guaranteed to be random. XKCD#221\\n#  $$;\\n#\\n\",\"result\":\"{ \\\"randomNumber\\\": 4 }\\n\"},{\"title\":\"Single row\",\"query\":\"{\\n  currentUser {\\n    nodeId\\n    id\\n    username\\n  }\\n}\\n\\n# Added to the GraphQL schema via\\n# this SQL:\\n#\\n#   create function current_user()\\n#   returns app_public.users\\n#   language sql stable\\n#   as $$\\n#     select users.*\\n#     from app_public.users\\n#     where id = current_user_id();\\n#   $$;\\n\",\"result\":\"{\\n  \\\"currentUser\\\": {\\n    \\\"nodeId\\\": \\\"WyJ1c2VycyIsMV0=\\\",\\n    \\\"id\\\": 1,\\n    \\\"username\\\": \\\"user\\\"\\n  }\\n}\\n\"},{\"title\":\"Rows connection\",\"query\":\"{\\n  forumsAboutCats {\\n    nodes {\\n      nodeId\\n      id\\n      name\\n      slug\\n    }\\n  }\\n}\\n\\n# Created from SQL like:\\n#\\n#  create function app_public.forums_about_cats()\\n#  returns setof app_public.forums\\n#  language sql stable\\n#  as $$\\n#    select *\\n#    from app_public.forums\\n#    where slug like 'cat-%';\\n#  $$;\\n\",\"result\":\"{\\n  \\\"forumsAboutCats\\\": {\\n    \\\"nodes\\\": [\\n      {\\n        \\\"nodeId\\\": \\\"WyJmb3J1bXMiLDFd\\\",\\n        \\\"id\\\": 1,\\n        \\\"name\\\": \\\"Cat Life\\\",\\n        \\\"slug\\\": \\\"cat-life\\\"\\n      }\\n    ]\\n  }\\n}\\n\"}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [5] >>> JSON\",\"title\":\"Custom mutations\",\"examples\":[{\"title\":\"Forgot password\",\"query\":\"mutation {\\n  forgotPassword(\\n    input: {\\n      email: \\\"user@example.com\\\"\\n    }\\n  ) {\\n    success\\n  }\\n}\\n\\n# Generated with SQL like this:\\n#\\n#  create function forgot_password(email text)\\n#  returns boolean\\n#  language plpgsql volatile\\n#  as $$\\n#    ...\\n#  $$;\\n#\\n#  -- Optionally rename the result field:\\n#  comment on function\\n#    forgot_password(email text)\\n#    is '@resultFieldName success';\\n\",\"result\":\"{\\n  \\\"forgotPassword\\\": {\\n    \\\"success\\\": true\\n  }\\n}\\n\"}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [6] >>> JSON\",\"title\":\"Computed columns\",\"examples\":[{\"title\":\"Topic summary\",\"query\":\"{\\n  topicById(id: 2) {\\n    body\\n    bodySummary\\n  }\\n}\\n\\n# Generated by SQL like:\\n#\\n#  create function app_public.topics_body_summary(\\n#    t app_public.topics,\\n#    max_length int = 30\\n#  )\\n#  returns text\\n#  language sql stable\\n#  as $$\\n#    select case\\n#      when length(t.body) > max_length\\n#      then left(t.body, max_length - 3)\\n#             || '...'\\n#      else t.body\\n#      end;\\n#  $$;\\n\",\"result\":\"{\\n  \\\"topicById\\\": {\\n    \\\"body\\\":\\n      \\\"do you find your cat just sleeps everywhere\\\",\\n    \\\"bodySummary\\\":\\n      \\\"do you find your cat just s...\\\"\\n  }\\n}\\n\"},{\"title\":\"Topic summary with arg\",\"query\":\"{\\n  topicById(id: 2) {\\n    body\\n    bodySummary(maxLength: 20)\\n  }\\n}\\n\\n# Generated by SQL like:\\n#\\n#  create function app_public.topics_body_summary(\\n#    t app_public.topics,\\n#    max_length int = 30\\n#  )\\n#  returns text\\n#  language sql stable\\n#  as $$\\n#    select case\\n#      when length(t.body) > max_length\\n#      then left(t.body, max_length - 3)\\n#             || '...'\\n#      else t.body\\n#      end;\\n#  $$;\\n\",\"result\":\"{\\n  \\\"topicById\\\": {\\n    \\\"body\\\":\\n      \\\"do you find your cat just sleeps everywhere\\\",\\n    \\\"bodySummary\\\":\\n      \\\"do you find your ...\\\"\\n  }\\n}\\n\"}]}}]}},\"pathContext\":{\"layout\":\"page\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/postgraphile-make-extend-schema-plugin.json\n// module id = 444\n// module chunks = 30601655320255"],"sourceRoot":""}