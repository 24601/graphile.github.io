[
  {
    "category": "functions",
    "title": "Custom queries",
    "examples": [
      {
        "title": "Logged in user field",
        "example": "create function viewer()\nreturns users\nas $$\n  select *\n  from users\n  where id = current_user_id();\n  /*\n   * current_user_id() is a function\n   * that returns the logged in user's\n   * id, e.g. by extracting from the JWT\n   * or indicated via pgSettings.\n   */\n$$ language sql stable;\n",
        "exampleLanguage": "sql",
        "result": "--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1077,6 +1077,7 @@\n \n   # Chosen by fair dice roll. Guaranteed to be random. XKCD#221\n   randomNumber: Int\n+  viewer: User\n \n   # Reads a single `Forum` using its globally unique `ID`.\n   forum(\n",
        "resultLanguage": "diff"
      }
    ]
  },
  {
    "category": "functions",
    "title": "Computed columns",
    "examples": []
  },
  {
    "category": "functions",
    "title": "Custom mutations",
    "examples": [
      {
        "title": "Insert multiple records",
        "example": "/**\n * Occasionally you'll want to create a bunch of rows in different tables in a\n * single mutation. Here's an example of how to do that.\n *\n * Pretend we're registering quiz entries, and we want to store each answer in\n * its own table as we want to be able to operate on the answers independently\n * later.\n *\n * This means we want:\n *\n *  1. A mutation that takes input data for inserting one quiz entry and\n *  multiple answers.\n *  2. A function that inserts a new quiz entry, inserts an answer for each\n *  answer provided in the input data, and connects each answer to the created\n *  quiz entry.\n *  3. Finally, we want the function to return the inserted quiz entry itself.\n */\n\n/**\n * These are the tables we're using in this example\n */\ncreate table quiz (\n  id serial primary key,\n  name text not null\n);\n\ncreate table quiz_entry (\n  id serial primary key,\n  user_id int not null references users(id),\n  quiz_id int not null references quiz(id)\n);\n\ncreate table quiz_entry_answer (\n  id serial primary key,\n  quiz_entry_id int not null references quiz_entry(id),\n  question text not null,\n  answer int\n);\n\n/**\n * This type is used for input in the mutation\n */\ncreate type quiz_entry_input as (\n  question text,\n  answer int\n);\n\n/**\n * Here's the function that gets turned into a \"custom mutation\"\n */\ncreate function add_quiz_entry(\n  quiz_id int,\n  answers quiz_entry_input[]\n)\nreturns quiz_entry\nas $$\n  declare\n    q quiz_entry;\n    a quiz_entry_answer;\n  begin\n    insert into quiz_entry(user_id, quiz_id)\n      values(current_user_id(), quiz_id)\n      returning * into q;\n\n    foreach a in array answers loop\n      insert into quiz_entry_answer(quiz_entry_id, question, answer)\n        values (quiz_id, a.question, a.answer);\n    end loop;\n\n    return q;\n  end;\n$$ language plpgsql volatile strict;\n",
        "exampleLanguage": "sql",
        "result": "--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1,3 +1,35 @@\n+# All input for the `addQuizEntry` mutation.\n+input AddQuizEntryInput {\n+  # An arbitrary string value with no semantic meaning. Will be included in the\n+  # payload verbatim. May be used to track mutations by the client.\n+  clientMutationId: String\n+  quizId: Int!\n+  answers: [QuizEntryInputRecordInput]!\n+}\n+\n+# The output of our `addQuizEntry` mutation.\n+type AddQuizEntryPayload {\n+  # The exact same `clientMutationId` that was provided in the mutation input,\n+  # unchanged and unused. May be used by a client to track mutations.\n+  clientMutationId: String\n+  quizEntry: QuizEntry\n+\n+  # Our root query field type. Allows us to run any query from our mutation payload.\n+  query: Query\n+\n+  # Reads a single `User` that is related to this `QuizEntry`.\n+  user: User\n+\n+  # Reads a single `Quiz` that is related to this `QuizEntry`.\n+  quiz: Quiz\n+\n+  # An edge for our `QuizEntry`. May be used by Relay 1.\n+  quizEntryEdge(\n+    # The method to use when ordering `QuizEntry`.\n+    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\n+  ): QuizEntriesEdge\n+}\n+\n # All input for the create `Forum` mutation.\n input CreateForumInput {\n   # An arbitrary string value with no semantic meaning. Will be included in the\n@@ -62,6 +94,102 @@\n   ): PostsEdge\n }\n \n+# All input for the create `QuizEntryAnswer` mutation.\n+input CreateQuizEntryAnswerInput {\n+  # An arbitrary string value with no semantic meaning. Will be included in the\n+  # payload verbatim. May be used to track mutations by the client.\n+  clientMutationId: String\n+\n+  # The `QuizEntryAnswer` to be created by this mutation.\n+  quizEntryAnswer: QuizEntryAnswerInput!\n+}\n+\n+# The output of our create `QuizEntryAnswer` mutation.\n+type CreateQuizEntryAnswerPayload {\n+  # The exact same `clientMutationId` that was provided in the mutation input,\n+  # unchanged and unused. May be used by a client to track mutations.\n+  clientMutationId: String\n+\n+  # The `QuizEntryAnswer` that was created by this mutation.\n+  quizEntryAnswer: QuizEntryAnswer\n+\n+  # Our root query field type. Allows us to run any query from our mutation payload.\n+  query: Query\n+\n+  # Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\n+  quizEntry: QuizEntry\n+\n+  # An edge for our `QuizEntryAnswer`. May be used by Relay 1.\n+  quizEntryAnswerEdge(\n+    # The method to use when ordering `QuizEntryAnswer`.\n+    orderBy: [QuizEntryAnswersOrderBy!] = PRIMARY_KEY_ASC\n+  ): QuizEntryAnswersEdge\n+}\n+\n+# All input for the create `QuizEntry` mutation.\n+input CreateQuizEntryInput {\n+  # An arbitrary string value with no semantic meaning. Will be included in the\n+  # payload verbatim. May be used to track mutations by the client.\n+  clientMutationId: String\n+\n+  # The `QuizEntry` to be created by this mutation.\n+  quizEntry: QuizEntryInput!\n+}\n+\n+# The output of our create `QuizEntry` mutation.\n+type CreateQuizEntryPayload {\n+  # The exact same `clientMutationId` that was provided in the mutation input,\n+  # unchanged and unused. May be used by a client to track mutations.\n+  clientMutationId: String\n+\n+  # The `QuizEntry` that was created by this mutation.\n+  quizEntry: QuizEntry\n+\n+  # Our root query field type. Allows us to run any query from our mutation payload.\n+  query: Query\n+\n+  # Reads a single `User` that is related to this `QuizEntry`.\n+  user: User\n+\n+  # Reads a single `Quiz` that is related to this `QuizEntry`.\n+  quiz: Quiz\n+\n+  # An edge for our `QuizEntry`. May be used by Relay 1.\n+  quizEntryEdge(\n+    # The method to use when ordering `QuizEntry`.\n+    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\n+  ): QuizEntriesEdge\n+}\n+\n+# All input for the create `Quiz` mutation.\n+input CreateQuizInput {\n+  # An arbitrary string value with no semantic meaning. Will be included in the\n+  # payload verbatim. May be used to track mutations by the client.\n+  clientMutationId: String\n+\n+  # The `Quiz` to be created by this mutation.\n+  quiz: QuizInput!\n+}\n+\n+# The output of our create `Quiz` mutation.\n+type CreateQuizPayload {\n+  # The exact same `clientMutationId` that was provided in the mutation input,\n+  # unchanged and unused. May be used by a client to track mutations.\n+  clientMutationId: String\n+\n+  # The `Quiz` that was created by this mutation.\n+  quiz: Quiz\n+\n+  # Our root query field type. Allows us to run any query from our mutation payload.\n+  query: Query\n+\n+  # An edge for our `Quiz`. May be used by Relay 1.\n+  quizEdge(\n+    # The method to use when ordering `Quiz`.\n+    orderBy: [QuizzesOrderBy!] = PRIMARY_KEY_ASC\n+  ): QuizzesEdge\n+}\n+\n # All input for the create `Topic` mutation.\n input CreateTopicInput {\n   # An arbitrary string value with no semantic meaning. Will be included in the\n@@ -286,6 +414,129 @@\n   ): PostsEdge\n }\n \n+# All input for the `deleteQuizById` mutation.\n+input DeleteQuizByIdInput {\n+  # An arbitrary string value with no semantic meaning. Will be included in the\n+  # payload verbatim. May be used to track mutations by the client.\n+  clientMutationId: String\n+  id: Int!\n+}\n+\n+# All input for the `deleteQuizEntryAnswerById` mutation.\n+input DeleteQuizEntryAnswerByIdInput {\n+  # An arbitrary string value with no semantic meaning. Will be included in the\n+  # payload verbatim. May be used to track mutations by the client.\n+  clientMutationId: String\n+  id: Int!\n+}\n+\n+# All input for the `deleteQuizEntryAnswer` mutation.\n+input DeleteQuizEntryAnswerInput {\n+  # An arbitrary string value with no semantic meaning. Will be included in the\n+  # payload verbatim. May be used to track mutations by the client.\n+  clientMutationId: String\n+\n+  # The globally unique `ID` which will identify a single `QuizEntryAnswer` to be deleted.\n+  nodeId: ID!\n+}\n+\n+# The output of our delete `QuizEntryAnswer` mutation.\n+type DeleteQuizEntryAnswerPayload {\n+  # The exact same `clientMutationId` that was provided in the mutation input,\n+  # unchanged and unused. May be used by a client to track mutations.\n+  clientMutationId: String\n+\n+  # The `QuizEntryAnswer` that was deleted by this mutation.\n+  quizEntryAnswer: QuizEntryAnswer\n+  deletedQuizEntryAnswerId: ID\n+\n+  # Our root query field type. Allows us to run any query from our mutation payload.\n+  query: Query\n+\n+  # Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\n+  quizEntry: QuizEntry\n+\n+  # An edge for our `QuizEntryAnswer`. May be used by Relay 1.\n+  quizEntryAnswerEdge(\n+    # The method to use when ordering `QuizEntryAnswer`.\n+    orderBy: [QuizEntryAnswersOrderBy!] = PRIMARY_KEY_ASC\n+  ): QuizEntryAnswersEdge\n+}\n+\n+# All input for the `deleteQuizEntryById` mutation.\n+input DeleteQuizEntryByIdInput {\n+  # An arbitrary string value with no semantic meaning. Will be included in the\n+  # payload verbatim. May be used to track mutations by the client.\n+  clientMutationId: String\n+  id: Int!\n+}\n+\n+# All input for the `deleteQuizEntry` mutation.\n+input DeleteQuizEntryInput {\n+  # An arbitrary string value with no semantic meaning. Will be included in the\n+  # payload verbatim. May be used to track mutations by the client.\n+  clientMutationId: String\n+\n+  # The globally unique `ID` which will identify a single `QuizEntry` to be deleted.\n+  nodeId: ID!\n+}\n+\n+# The output of our delete `QuizEntry` mutation.\n+type DeleteQuizEntryPayload {\n+  # The exact same `clientMutationId` that was provided in the mutation input,\n+  # unchanged and unused. May be used by a client to track mutations.\n+  clientMutationId: String\n+\n+  # The `QuizEntry` that was deleted by this mutation.\n+  quizEntry: QuizEntry\n+  deletedQuizEntryId: ID\n+\n+  # Our root query field type. Allows us to run any query from our mutation payload.\n+  query: Query\n+\n+  # Reads a single `User` that is related to this `QuizEntry`.\n+  user: User\n+\n+  # Reads a single `Quiz` that is related to this `QuizEntry`.\n+  quiz: Quiz\n+\n+  # An edge for our `QuizEntry`. May be used by Relay 1.\n+  quizEntryEdge(\n+    # The method to use when ordering `QuizEntry`.\n+    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\n+  ): QuizEntriesEdge\n+}\n+\n+# All input for the `deleteQuiz` mutation.\n+input DeleteQuizInput {\n+  # An arbitrary string value with no semantic meaning. Will be included in the\n+  # payload verbatim. May be used to track mutations by the client.\n+  clientMutationId: String\n+\n+  # The globally unique `ID` which will identify a single `Quiz` to be deleted.\n+  nodeId: ID!\n+}\n+\n+# The output of our delete `Quiz` mutation.\n+type DeleteQuizPayload {\n+  # The exact same `clientMutationId` that was provided in the mutation input,\n+  # unchanged and unused. May be used by a client to track mutations.\n+  clientMutationId: String\n+\n+  # The `Quiz` that was deleted by this mutation.\n+  quiz: Quiz\n+  deletedQuizId: ID\n+\n+  # Our root query field type. Allows us to run any query from our mutation payload.\n+  query: Query\n+\n+  # An edge for our `Quiz`. May be used by Relay 1.\n+  quizEdge(\n+    # The method to use when ordering `Quiz`.\n+    orderBy: [QuizzesOrderBy!] = PRIMARY_KEY_ASC\n+  ): QuizzesEdge\n+}\n+\n # All input for the `deleteTopicById` mutation.\n input DeleteTopicByIdInput {\n   # An arbitrary string value with no semantic meaning. Will be included in the\n@@ -655,6 +906,24 @@\n     input: CreatePostInput!\n   ): CreatePostPayload\n \n+  # Creates a single `Quiz`.\n+  createQuiz(\n+    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    input: CreateQuizInput!\n+  ): CreateQuizPayload\n+\n+  # Creates a single `QuizEntry`.\n+  createQuizEntry(\n+    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    input: CreateQuizEntryInput!\n+  ): CreateQuizEntryPayload\n+\n+  # Creates a single `QuizEntryAnswer`.\n+  createQuizEntryAnswer(\n+    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    input: CreateQuizEntryAnswerInput!\n+  ): CreateQuizEntryAnswerPayload\n+\n   # Creates a single `Topic`.\n   createTopic(\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n@@ -709,6 +978,42 @@\n     input: UpdatePostByIdInput!\n   ): UpdatePostPayload\n \n+  # Updates a single `Quiz` using its globally unique id and a patch.\n+  updateQuiz(\n+    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    input: UpdateQuizInput!\n+  ): UpdateQuizPayload\n+\n+  # Updates a single `Quiz` using a unique key and a patch.\n+  updateQuizById(\n+    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    input: UpdateQuizByIdInput!\n+  ): UpdateQuizPayload\n+\n+  # Updates a single `QuizEntry` using its globally unique id and a patch.\n+  updateQuizEntry(\n+    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    input: UpdateQuizEntryInput!\n+  ): UpdateQuizEntryPayload\n+\n+  # Updates a single `QuizEntry` using a unique key and a patch.\n+  updateQuizEntryById(\n+    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    input: UpdateQuizEntryByIdInput!\n+  ): UpdateQuizEntryPayload\n+\n+  # Updates a single `QuizEntryAnswer` using its globally unique id and a patch.\n+  updateQuizEntryAnswer(\n+    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    input: UpdateQuizEntryAnswerInput!\n+  ): UpdateQuizEntryAnswerPayload\n+\n+  # Updates a single `QuizEntryAnswer` using a unique key and a patch.\n+  updateQuizEntryAnswerById(\n+    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    input: UpdateQuizEntryAnswerByIdInput!\n+  ): UpdateQuizEntryAnswerPayload\n+\n   # Updates a single `Topic` using its globally unique id and a patch.\n   updateTopic(\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n@@ -805,6 +1110,42 @@\n     input: DeletePostByIdInput!\n   ): DeletePostPayload\n \n+  # Deletes a single `Quiz` using its globally unique id.\n+  deleteQuiz(\n+    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    input: DeleteQuizInput!\n+  ): DeleteQuizPayload\n+\n+  # Deletes a single `Quiz` using a unique key.\n+  deleteQuizById(\n+    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    input: DeleteQuizByIdInput!\n+  ): DeleteQuizPayload\n+\n+  # Deletes a single `QuizEntry` using its globally unique id.\n+  deleteQuizEntry(\n+    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    input: DeleteQuizEntryInput!\n+  ): DeleteQuizEntryPayload\n+\n+  # Deletes a single `QuizEntry` using a unique key.\n+  deleteQuizEntryById(\n+    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    input: DeleteQuizEntryByIdInput!\n+  ): DeleteQuizEntryPayload\n+\n+  # Deletes a single `QuizEntryAnswer` using its globally unique id.\n+  deleteQuizEntryAnswer(\n+    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    input: DeleteQuizEntryAnswerInput!\n+  ): DeleteQuizEntryAnswerPayload\n+\n+  # Deletes a single `QuizEntryAnswer` using a unique key.\n+  deleteQuizEntryAnswerById(\n+    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    input: DeleteQuizEntryAnswerByIdInput!\n+  ): DeleteQuizEntryAnswerPayload\n+\n   # Deletes a single `Topic` using its globally unique id.\n   deleteTopic(\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n@@ -870,6 +1211,10 @@\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n     input: DeleteUserByUsernameInput!\n   ): DeleteUserPayload\n+  addQuizEntry(\n+    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    input: AddQuizEntryInput!\n+  ): AddQuizEntryPayload\n \n   # If you've forgotten your password, give us one of your email addresses and we'\n   # send you a reset token. Note this only works if you have added an email address!\n@@ -1044,9 +1389,87 @@\n     # A condition to be used in determining which values should be returned by the collection.\n     condition: ForumCondition\n   ): ForumsConnection\n+\n+  # Reads and enables pagination through a set of `Quiz`.\n+  allQuizzes(\n+    # Only read the first `n` values of the set.\n+    first: Int\n+\n+    # Only read the last `n` values of the set.\n+    last: Int\n+\n+    # Skip the first `n` values from our `after` cursor, an alternative to cursor\n+    # based pagination. May not be used with `last`.\n+    offset: Int\n+\n+    # Read all values in the set before (above) this cursor.\n+    before: Cursor\n+\n+    # Read all values in the set after (below) this cursor.\n+    after: Cursor\n+\n+    # The method to use when ordering `Quiz`.\n+    orderBy: [QuizzesOrderBy!] = [PRIMARY_KEY_ASC]\n+\n+    # A condition to be used in determining which values should be returned by the collection.\n+    condition: QuizCondition\n+  ): QuizzesConnection\n+\n+  # Reads and enables pagination through a set of `QuizEntry`.\n+  allQuizEntries(\n+    # Only read the first `n` values of the set.\n+    first: Int\n+\n+    # Only read the last `n` values of the set.\n+    last: Int\n+\n+    # Skip the first `n` values from our `after` cursor, an alternative to cursor\n+    # based pagination. May not be used with `last`.\n+    offset: Int\n+\n+    # Read all values in the set before (above) this cursor.\n+    before: Cursor\n+\n+    # Read all values in the set after (below) this cursor.\n+    after: Cursor\n+\n+    # The method to use when ordering `QuizEntry`.\n+    orderBy: [QuizEntriesOrderBy!] = [PRIMARY_KEY_ASC]\n+\n+    # A condition to be used in determining which values should be returned by the collection.\n+    condition: QuizEntryCondition\n+  ): QuizEntriesConnection\n+\n+  # Reads and enables pagination through a set of `QuizEntryAnswer`.\n+  allQuizEntryAnswers(\n+    # Only read the first `n` values of the set.\n+    first: Int\n+\n+    # Only read the last `n` values of the set.\n+    last: Int\n+\n+    # Skip the first `n` values from our `after` cursor, an alternative to cursor\n+    # based pagination. May not be used with `last`.\n+    offset: Int\n+\n+    # Read all values in the set before (above) this cursor.\n+    before: Cursor\n+\n+    # Read all values in the set after (below) this cursor.\n+    after: Cursor\n+\n+    # The method to use when ordering `QuizEntryAnswer`.\n+    orderBy: [QuizEntryAnswersOrderBy!] = [PRIMARY_KEY_ASC]\n+\n+    # A condition to be used in determining which values should be returned by the collection.\n+    condition: QuizEntryAnswerCondition\n+  ): QuizEntryAnswersConnection\n   forumById(id: Int!): Forum\n   forumBySlug(slug: String!): Forum\n   postById(id: Int!): Post\n+  quizById(id: Int!): Quiz\n+  quizEntryById(id: Int!): QuizEntry\n+  quizEntryAnswerById(id: Int!): QuizEntryAnswer\n   topicById(id: Int!): Topic\n   userAuthenticationById(id: Int!): UserAuthentication\n   userAuthenticationByServiceAndIdentifier(service: String!, identifier: String!): UserAuthentication\n@@ -1090,6 +1513,24 @@\n     nodeId: ID!\n   ): Post\n \n+  # Reads a single `Quiz` using its globally unique `ID`.\n+  quiz(\n+    # The globally unique `ID` to be used in selecting a single `Quiz`.\n+    nodeId: ID!\n+  ): Quiz\n+\n+  # Reads a single `QuizEntry` using its globally unique `ID`.\n+  quizEntry(\n+    # The globally unique `ID` to be used in selecting a single `QuizEntry`.\n+    nodeId: ID!\n+  ): QuizEntry\n+\n+  # Reads a single `QuizEntryAnswer` using its globally unique `ID`.\n+  quizEntryAnswer(\n+    # The globally unique `ID` to be used in selecting a single `QuizEntryAnswer`.\n+    nodeId: ID!\n+  ): QuizEntryAnswer\n+\n   # Reads a single `Topic` using its globally unique `ID`.\n   topic(\n     # The globally unique `ID` to be used in selecting a single `Topic`.\n@@ -1115,6 +1556,286 @@\n   ): User\n }\n \n+type Quiz implements Node {\n+  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n+  nodeId: ID!\n+  id: Int!\n+  name: String!\n+\n+  # Reads and enables pagination through a set of `QuizEntry`.\n+  quizEntries(\n+    # Only read the first `n` values of the set.\n+    first: Int\n+\n+    # Only read the last `n` values of the set.\n+    last: Int\n+\n+    # Skip the first `n` values from our `after` cursor, an alternative to cursor\n+    # based pagination. May not be used with `last`.\n+    offset: Int\n+\n+    # Read all values in the set before (above) this cursor.\n+    before: Cursor\n+\n+    # Read all values in the set after (below) this cursor.\n+    after: Cursor\n+\n+    # The method to use when ordering `QuizEntry`.\n+    orderBy: [QuizEntriesOrderBy!] = [PRIMARY_KEY_ASC]\n+\n+    # A condition to be used in determining which values should be returned by the collection.\n+    condition: QuizEntryCondition\n+  ): QuizEntriesConnection!\n+}\n+\n+# A condition to be used against `Quiz` object types. All fields are tested for equality and combined with a logical ‘and.’\n+input QuizCondition {\n+  # Checks for equality with the object’s `id` field.\n+  id: Int\n+\n+  # Checks for equality with the object’s `name` field.\n+  name: String\n+}\n+\n+# A connection to a list of `QuizEntry` values.\n+type QuizEntriesConnection {\n+  # A list of `QuizEntry` objects.\n+  nodes: [QuizEntry]!\n+\n+  # A list of edges which contains the `QuizEntry` and cursor to aid in pagination.\n+  edges: [QuizEntriesEdge!]!\n+\n+  # Information to aid in pagination.\n+  pageInfo: PageInfo!\n+\n+  # The count of *all* `QuizEntry` you could get from the connection.\n+  totalCount: Int\n+}\n+\n+# A `QuizEntry` edge in the connection.\n+type QuizEntriesEdge {\n+  # A cursor for use in pagination.\n+  cursor: Cursor\n+\n+  # The `QuizEntry` at the end of the edge.\n+  node: QuizEntry\n+}\n+\n+# Methods to use when ordering `QuizEntry`.\n+enum QuizEntriesOrderBy {\n+  NATURAL\n+  ID_ASC\n+  ID_DESC\n+  USER_ID_ASC\n+  USER_ID_DESC\n+  QUIZ_ID_ASC\n+  QUIZ_ID_DESC\n+  PRIMARY_KEY_ASC\n+  PRIMARY_KEY_DESC\n+}\n+\n+type QuizEntry implements Node {\n+  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n+  nodeId: ID!\n+  id: Int!\n+  userId: Int!\n+  quizId: Int!\n+\n+  # Reads a single `User` that is related to this `QuizEntry`.\n+  user: User\n+\n+  # Reads a single `Quiz` that is related to this `QuizEntry`.\n+  quiz: Quiz\n+\n+  # Reads and enables pagination through a set of `QuizEntryAnswer`.\n+  quizEntryAnswers(\n+    # Only read the first `n` values of the set.\n+    first: Int\n+\n+    # Only read the last `n` values of the set.\n+    last: Int\n+\n+    # Skip the first `n` values from our `after` cursor, an alternative to cursor\n+    # based pagination. May not be used with `last`.\n+    offset: Int\n+\n+    # Read all values in the set before (above) this cursor.\n+    before: Cursor\n+\n+    # Read all values in the set after (below) this cursor.\n+    after: Cursor\n+\n+    # The method to use when ordering `QuizEntryAnswer`.\n+    orderBy: [QuizEntryAnswersOrderBy!] = [PRIMARY_KEY_ASC]\n+\n+    # A condition to be used in determining which values should be returned by the collection.\n+    condition: QuizEntryAnswerCondition\n+  ): QuizEntryAnswersConnection!\n+}\n+\n+type QuizEntryAnswer implements Node {\n+  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n+  nodeId: ID!\n+  id: Int!\n+  quizEntryId: Int!\n+  question: String!\n+  answer: Int\n+\n+  # Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\n+  quizEntry: QuizEntry\n+}\n+\n+# A condition to be used against `QuizEntryAnswer` object types. All fields are\n+# tested for equality and combined with a logical ‘and.’\n+input QuizEntryAnswerCondition {\n+  # Checks for equality with the object’s `id` field.\n+  id: Int\n+\n+  # Checks for equality with the object’s `quizEntryId` field.\n+  quizEntryId: Int\n+\n+  # Checks for equality with the object’s `question` field.\n+  question: String\n+\n+  # Checks for equality with the object’s `answer` field.\n+  answer: Int\n+}\n+\n+# An input for mutations affecting `QuizEntryAnswer`\n+input QuizEntryAnswerInput {\n+  id: Int\n+  quizEntryId: Int!\n+  question: String!\n+  answer: Int\n+}\n+\n+# Represents an update to a `QuizEntryAnswer`. Fields that are set will be updated.\n+input QuizEntryAnswerPatch {\n+  id: Int\n+  quizEntryId: Int\n+  question: String\n+  answer: Int\n+}\n+\n+# A connection to a list of `QuizEntryAnswer` values.\n+type QuizEntryAnswersConnection {\n+  # A list of `QuizEntryAnswer` objects.\n+  nodes: [QuizEntryAnswer]!\n+\n+  # A list of edges which contains the `QuizEntryAnswer` and cursor to aid in pagination.\n+  edges: [QuizEntryAnswersEdge!]!\n+\n+  # Information to aid in pagination.\n+  pageInfo: PageInfo!\n+\n+  # The count of *all* `QuizEntryAnswer` you could get from the connection.\n+  totalCount: Int\n+}\n+\n+# A `QuizEntryAnswer` edge in the connection.\n+type QuizEntryAnswersEdge {\n+  # A cursor for use in pagination.\n+  cursor: Cursor\n+\n+  # The `QuizEntryAnswer` at the end of the edge.\n+  node: QuizEntryAnswer\n+}\n+\n+# Methods to use when ordering `QuizEntryAnswer`.\n+enum QuizEntryAnswersOrderBy {\n+  NATURAL\n+  ID_ASC\n+  ID_DESC\n+  QUIZ_ENTRY_ID_ASC\n+  QUIZ_ENTRY_ID_DESC\n+  QUESTION_ASC\n+  QUESTION_DESC\n+  ANSWER_ASC\n+  ANSWER_DESC\n+  PRIMARY_KEY_ASC\n+  PRIMARY_KEY_DESC\n+}\n+\n+# A condition to be used against `QuizEntry` object types. All fields are tested\n+# for equality and combined with a logical ‘and.’\n+input QuizEntryCondition {\n+  # Checks for equality with the object’s `id` field.\n+  id: Int\n+\n+  # Checks for equality with the object’s `userId` field.\n+  userId: Int\n+\n+  # Checks for equality with the object’s `quizId` field.\n+  quizId: Int\n+}\n+\n+# An input for mutations affecting `QuizEntry`\n+input QuizEntryInput {\n+  id: Int\n+  userId: Int!\n+  quizId: Int!\n+}\n+\n+# An input for mutations affecting `QuizEntryInputRecord`\n+input QuizEntryInputRecordInput {\n+  question: String\n+  answer: Int\n+}\n+\n+# Represents an update to a `QuizEntry`. Fields that are set will be updated.\n+input QuizEntryPatch {\n+  id: Int\n+  userId: Int\n+  quizId: Int\n+}\n+\n+# An input for mutations affecting `Quiz`\n+input QuizInput {\n+  id: Int\n+  name: String!\n+}\n+\n+# Represents an update to a `Quiz`. Fields that are set will be updated.\n+input QuizPatch {\n+  id: Int\n+  name: String\n+}\n+\n+# A connection to a list of `Quiz` values.\n+type QuizzesConnection {\n+  # A list of `Quiz` objects.\n+  nodes: [Quiz]!\n+\n+  # A list of edges which contains the `Quiz` and cursor to aid in pagination.\n+  edges: [QuizzesEdge!]!\n+\n+  # Information to aid in pagination.\n+  pageInfo: PageInfo!\n+\n+  # The count of *all* `Quiz` you could get from the connection.\n+  totalCount: Int\n+}\n+\n+# A `Quiz` edge in the connection.\n+type QuizzesEdge {\n+  # A cursor for use in pagination.\n+  cursor: Cursor\n+\n+  # The `Quiz` at the end of the edge.\n+  node: Quiz\n+}\n+\n+# Methods to use when ordering `Quiz`.\n+enum QuizzesOrderBy {\n+  NATURAL\n+  ID_ASC\n+  ID_DESC\n+  NAME_ASC\n+  NAME_DESC\n+  PRIMARY_KEY_ASC\n+  PRIMARY_KEY_DESC\n+}\n+\n # All input for the `resetPassword` mutation.\n input ResetPasswordInput {\n   # An arbitrary string value with no semantic meaning. Will be included in the\n@@ -1395,6 +2116,144 @@\n   ): PostsEdge\n }\n \n+# All input for the `updateQuizById` mutation.\n+input UpdateQuizByIdInput {\n+  # An arbitrary string value with no semantic meaning. Will be included in the\n+  # payload verbatim. May be used to track mutations by the client.\n+  clientMutationId: String\n+\n+  # An object where the defined keys will be set on the `Quiz` being updated.\n+  quizPatch: QuizPatch!\n+  id: Int!\n+}\n+\n+# All input for the `updateQuizEntryAnswerById` mutation.\n+input UpdateQuizEntryAnswerByIdInput {\n+  # An arbitrary string value with no semantic meaning. Will be included in the\n+  # payload verbatim. May be used to track mutations by the client.\n+  clientMutationId: String\n+\n+  # An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n+  quizEntryAnswerPatch: QuizEntryAnswerPatch!\n+  id: Int!\n+}\n+\n+# All input for the `updateQuizEntryAnswer` mutation.\n+input UpdateQuizEntryAnswerInput {\n+  # An arbitrary string value with no semantic meaning. Will be included in the\n+  # payload verbatim. May be used to track mutations by the client.\n+  clientMutationId: String\n+\n+  # The globally unique `ID` which will identify a single `QuizEntryAnswer` to be updated.\n+  nodeId: ID!\n+\n+  # An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n+  quizEntryAnswerPatch: QuizEntryAnswerPatch!\n+}\n+\n+# The output of our update `QuizEntryAnswer` mutation.\n+type UpdateQuizEntryAnswerPayload {\n+  # The exact same `clientMutationId` that was provided in the mutation input,\n+  # unchanged and unused. May be used by a client to track mutations.\n+  clientMutationId: String\n+\n+  # The `QuizEntryAnswer` that was updated by this mutation.\n+  quizEntryAnswer: QuizEntryAnswer\n+\n+  # Our root query field type. Allows us to run any query from our mutation payload.\n+  query: Query\n+\n+  # Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\n+  quizEntry: QuizEntry\n+\n+  # An edge for our `QuizEntryAnswer`. May be used by Relay 1.\n+  quizEntryAnswerEdge(\n+    # The method to use when ordering `QuizEntryAnswer`.\n+    orderBy: [QuizEntryAnswersOrderBy!] = PRIMARY_KEY_ASC\n+  ): QuizEntryAnswersEdge\n+}\n+\n+# All input for the `updateQuizEntryById` mutation.\n+input UpdateQuizEntryByIdInput {\n+  # An arbitrary string value with no semantic meaning. Will be included in the\n+  # payload verbatim. May be used to track mutations by the client.\n+  clientMutationId: String\n+\n+  # An object where the defined keys will be set on the `QuizEntry` being updated.\n+  quizEntryPatch: QuizEntryPatch!\n+  id: Int!\n+}\n+\n+# All input for the `updateQuizEntry` mutation.\n+input UpdateQuizEntryInput {\n+  # An arbitrary string value with no semantic meaning. Will be included in the\n+  # payload verbatim. May be used to track mutations by the client.\n+  clientMutationId: String\n+\n+  # The globally unique `ID` which will identify a single `QuizEntry` to be updated.\n+  nodeId: ID!\n+\n+  # An object where the defined keys will be set on the `QuizEntry` being updated.\n+  quizEntryPatch: QuizEntryPatch!\n+}\n+\n+# The output of our update `QuizEntry` mutation.\n+type UpdateQuizEntryPayload {\n+  # The exact same `clientMutationId` that was provided in the mutation input,\n+  # unchanged and unused. May be used by a client to track mutations.\n+  clientMutationId: String\n+\n+  # The `QuizEntry` that was updated by this mutation.\n+  quizEntry: QuizEntry\n+\n+  # Our root query field type. Allows us to run any query from our mutation payload.\n+  query: Query\n+\n+  # Reads a single `User` that is related to this `QuizEntry`.\n+  user: User\n+\n+  # Reads a single `Quiz` that is related to this `QuizEntry`.\n+  quiz: Quiz\n+\n+  # An edge for our `QuizEntry`. May be used by Relay 1.\n+  quizEntryEdge(\n+    # The method to use when ordering `QuizEntry`.\n+    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\n+  ): QuizEntriesEdge\n+}\n+\n+# All input for the `updateQuiz` mutation.\n+input UpdateQuizInput {\n+  # An arbitrary string value with no semantic meaning. Will be included in the\n+  # payload verbatim. May be used to track mutations by the client.\n+  clientMutationId: String\n+\n+  # The globally unique `ID` which will identify a single `Quiz` to be updated.\n+  nodeId: ID!\n+\n+  # An object where the defined keys will be set on the `Quiz` being updated.\n+  quizPatch: QuizPatch!\n+}\n+\n+# The output of our update `Quiz` mutation.\n+type UpdateQuizPayload {\n+  # The exact same `clientMutationId` that was provided in the mutation input,\n+  # unchanged and unused. May be used by a client to track mutations.\n+  clientMutationId: String\n+\n+  # The `Quiz` that was updated by this mutation.\n+  quiz: Quiz\n+\n+  # Our root query field type. Allows us to run any query from our mutation payload.\n+  query: Query\n+\n+  # An edge for our `Quiz`. May be used by Relay 1.\n+  quizEdge(\n+    # The method to use when ordering `Quiz`.\n+    orderBy: [QuizzesOrderBy!] = PRIMARY_KEY_ASC\n+  ): QuizzesEdge\n+}\n+\n # All input for the `updateTopicById` mutation.\n input UpdateTopicByIdInput {\n   # An arbitrary string value with no semantic meaning. Will be included in the\n@@ -1717,6 +2576,31 @@\n     # A condition to be used in determining which values should be returned by the collection.\n     condition: UserEmailCondition\n   ): UserEmailsConnection!\n+\n+  # Reads and enables pagination through a set of `QuizEntry`.\n+  quizEntries(\n+    # Only read the first `n` values of the set.\n+    first: Int\n+\n+    # Only read the last `n` values of the set.\n+    last: Int\n+\n+    # Skip the first `n` values from our `after` cursor, an alternative to cursor\n+    # based pagination. May not be used with `last`.\n+    offset: Int\n+\n+    # Read all values in the set before (above) this cursor.\n+    before: Cursor\n+\n+    # Read all values in the set after (below) this cursor.\n+    after: Cursor\n+\n+    # The method to use when ordering `QuizEntry`.\n+    orderBy: [QuizEntriesOrderBy!] = [PRIMARY_KEY_ASC]\n+\n+    # A condition to be used in determining which values should be returned by the collection.\n+    condition: QuizEntryCondition\n+  ): QuizEntriesConnection!\n }\n \n # Contains information about the login providers this user has used, so that they may disconnect them should they wish.\n",
        "resultLanguage": "diff"
      }
    ]
  },
  {
    "category": "plugins",
    "title": "Inflector",
    "examples": [
      {
        "title": "PgRenamePatchToChangeSetPlugin",
        "example": "/**\n * Simply renames the `UserPatch` and `PostPatch` type names to be called\n * `UserChangeSet` and `PostChangeSet` instead.\n *\n * Not particularly useful, just an example.\n *\n * Replaces this inflector:\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L309-L311\n */\nconst { makeAddInflectorsPlugin } = require(\"graphile-utils\");\n\nmodule.exports = makeAddInflectorsPlugin({\n  patchType(typeName) {\n    // return this.upperCamelCase(`${typeName}-patch`);\n    return this.upperCamelCase(`${typeName}-change-set`);\n  },\n});\n",
        "exampleLanguage": "javascript",
        "result": "",
        "resultLanguage": ""
      },
      {
        "title": "PgShortenAllRowsInflectorPlugin",
        "example": "/**\n * Simply renames the `allUsers` and `allPosts` Query fields to `users` and\n * `posts` respectively.\n *\n * Not particularly useful, just an example.\n *\n * Replaces this inflector:\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L460-L464\n */\nconst { makeAddInflectorsPlugin } = require(\"graphile-utils\");\n\nmodule.exports = makeAddInflectorsPlugin({\n  allRows(table) {\n    return this.camelCase(\n      // Was: `all-${this.pluralize(this._singularizedTableName(table))}`\n      // Now:\n      this.pluralize(this._singularizedTableName(table))\n    );\n  },\n});\n",
        "exampleLanguage": "javascript",
        "result": "",
        "resultLanguage": ""
      }
    ]
  },
  {
    "category": "plugins",
    "title": "Types",
    "examples": [
      {
        "title": "PgNumericToFloatPlugin",
        "example": "/**\n * Use of this plugin is NOT recommended, please see\n * PgSmallNumericToFloatPlugin for a more appropriate replacement if you need\n * one.\n *\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\n * for *all* DECIMAL / NUMERIC values, for making PostGraphile v4 slightly more\n * backwards-compatible with v3.\n *\n * It's generally a bad idea to use floating point numbers to represent\n * arbitrary precision numbers such as NUMERIC because loss of precision can\n * occur.\n */\nmodule.exports = function PgNumericToFloatPlugin(builder) {\n  builder.hook(\"init\", (_init, build) => {\n    // Register a type handler for NUMERIC / DECIMAL (oid = 1700), always\n    // returning the GraphQLFloat type\n    build.pgRegisterGqlTypeByTypeId(\"1700\", () => build.graphql.GraphQLFloat);\n    return _init;\n  });\n};\n",
        "exampleLanguage": "javascript",
        "result": "",
        "resultLanguage": ""
      },
      {
        "title": "PgSmallNumericToFloatPlugin",
        "example": "/**\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\n * for DECIMAL / NUMERIC values that have a precision and scale under the given\n * limits (currently 12 and 2 respectively).\n *\n * It's generally a bad idea to use floating point numbers to represent\n * arbitrary precision numbers such as NUMERIC because loss of precision can\n * occur; however some systems are okay with this compromise.\n */\nmodule.exports = function PgSmallNumericToFloatPlugin(\n  builder,\n  { pgNumericToFloatPrecisionCap = 12, pgNumericToFloatScaleCap = 2 }\n) {\n  builder.hook(\"init\", (_init, build) => {\n    // Register a type handler for NUMERIC / DECIMAL (oid = 1700)\n    build.pgRegisterGqlTypeByTypeId(\"1700\", (_set, modifier) => {\n      if (modifier && typeof modifier === \"number\" && modifier > 0) {\n        // Ref: https://stackoverflow.com/a/3351120/141284\n        const precision = ((modifier - 4) >> 16) & 65535;\n        const scale = (modifier - 4) & 65535;\n        if (\n          precision <= pgNumericToFloatPrecisionCap &&\n          scale <= pgNumericToFloatScaleCap\n        ) {\n          // This number is no more precise than our cap, so we're declaring\n          // that we can handle it as a float:\n          return build.graphql.GraphQLFloat;\n        }\n      }\n      // If all else fails, let PostGraphile do it's default handling - i.e.\n      // BigFloat\n      return null;\n    });\n\n    // We didn't modify _init, but we still must return it.\n    return _init;\n  });\n};\n",
        "exampleLanguage": "javascript",
        "result": "",
        "resultLanguage": ""
      }
    ]
  },
  {
    "category": "queries",
    "title": "Basic",
    "examples": [
      {
        "title": "Forums",
        "example": "{\n  allForums {\n    nodes {\n      nodeId\n      id\n      slug\n      name\n      description\n    }\n  }\n}\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"allForums\": {\n    \"nodes\": [\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDFd\",\n        \"id\": 1,\n        \"slug\": \"cat-life\",\n        \"name\": \"Cat Life\",\n        \"description\":\n          \"A forum all about cats and how fluffy they are and how they completely ignore their owners unless there is food. Or yarn.\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDJd\",\n        \"id\": 2,\n        \"slug\": \"dog-life\",\n        \"name\": \"Dog Life\",\n        \"description\": \"\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDNd\",\n        \"id\": 3,\n        \"slug\": \"slug-life\",\n        \"name\": \"Slug Life\",\n        \"description\": \"\"\n      }\n    ]\n  }\n}\n",
        "resultLanguage": "json"
      },
      {
        "title": "Forum by slug",
        "example": "{\n  forumBySlug(slug: \"slug-life\") {\n    nodeId\n    id\n    slug\n    name\n    description\n  }\n}\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"forumBySlug\": {\n    \"nodeId\": \"WyJmb3J1bXMiLDNd\",\n    \"id\": 3,\n    \"slug\": \"slug-life\",\n    \"name\": \"Slug Life\",\n    \"description\": \"\"\n  }\n}\n",
        "resultLanguage": "json"
      }
    ]
  },
  {
    "category": "queries",
    "title": "Collections",
    "examples": [
      {
        "title": "First offset",
        "example": "{\n  allForums(first: 1, offset: 1) {\n    nodes {\n      nodeId\n      id\n      name\n    }\n  }\n}\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"allForums\": {\n    \"nodes\": [\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDJd\",\n        \"id\": 2,\n        \"name\": \"Dog Life\"\n      }\n    ]\n  }\n}\n",
        "resultLanguage": "json"
      },
      {
        "title": "Relation condition",
        "example": "{\n  forumBySlug(slug: \"cat-life\") {\n    nodeId\n    id\n    name\n    topics(\n      condition: { authorId: 1 }\n    ) {\n      nodes {\n        nodeId\n        id\n        title\n      }\n    }\n  }\n}\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"forumBySlug\": {\n    \"nodeId\": \"WyJmb3J1bXMiLDFd\",\n    \"id\": 1,\n    \"name\": \"Cat Life\",\n    \"topics\": {\n      \"nodes\": [\n        {\n          \"nodeId\":\n            \"WyJ0b3BpY3MiLDFd\",\n          \"id\": 1,\n          \"title\": \"cats cats cats\"\n        },\n        {\n          \"nodeId\":\n            \"WyJ0b3BpY3MiLDJd\",\n          \"id\": 2,\n          \"title\": \"snooze life\"\n        },\n        {\n          \"nodeId\":\n            \"WyJ0b3BpY3MiLDNd\",\n          \"id\": 3,\n          \"title\": \"too hot\"\n        }\n      ]\n    }\n  }\n}\n",
        "resultLanguage": "json"
      }
    ]
  },
  {
    "category": "queries",
    "title": "Relations",
    "examples": [
      {
        "title": "Forums topics posts",
        "example": "{\n  forumById(id: 1) {\n    name\n    topics(\n      first: 1\n      orderBy: [CREATED_AT_ASC]\n    ) {\n      nodes {\n        id\n        title\n        bodySummary\n        author {\n          id\n          username\n        }\n        posts(\n          first: 1\n          orderBy: [ID_DESC]\n        ) {\n          nodes {\n            id\n            author {\n              id\n              username\n            }\n            body\n          }\n        }\n      }\n    }\n  }\n}\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"forumById\": {\n    \"name\": \"Cat Life\",\n    \"topics\": {\n      \"nodes\": [\n        {\n          \"id\": 1,\n          \"title\": \"cats cats cats\",\n          \"bodySummary\":\n            \"lets discuss cats because t...\",\n          \"author\": {\n            \"id\": 1,\n            \"username\": \"user\"\n          },\n          \"posts\": {\n            \"nodes\": [\n              {\n                \"id\": 3,\n                \"author\": {\n                  \"id\": 1,\n                  \"username\": \"user\"\n                },\n                \"body\":\n                  \"I love it when they completely ignore you until they want something. So much better than dogs am I rite?\"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n",
        "resultLanguage": "json"
      }
    ]
  },
  {
    "category": "queries",
    "title": "Mutations",
    "examples": [
      {
        "title": "Create",
        "example": "mutation {\n  createTopic(\n    input: {\n      topic: {\n        forumId: 1\n        title: \"My question relates to mutations...\"\n        body: \"How do you write them?\"\n      }\n    }\n  ) {\n    topic {\n      nodeId\n      id\n      forumId\n      title\n      body\n    }\n  }\n}\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"createTopic\": {\n    \"topic\": {\n      \"nodeId\": \"WyJ0b3BpY3MiLDRd\",\n      \"id\": 4,\n      \"forumId\": 1,\n      \"title\":\n        \"My question relates to mutations...\",\n      \"body\": \"How do you write them?\"\n    }\n  }\n}\n",
        "resultLanguage": "json"
      },
      {
        "title": "Update",
        "example": "mutation {\n  updateTopicById(\n    input: {\n      id: 1\n      topicPatch: {\n        title: \"My (edited) title\"\n      }\n    }\n  ) {\n    topic {\n      nodeId\n      id\n      title\n      body\n    }\n  }\n}\n\n# Works for a table like:\n#\n#   create table app_public.topics (\n#     id serial primary key,\n#     forum_id integer NOT NULL references app_public.forums on delete cascade,\n#     title text NOT NULL,\n#     body text DEFAULT ''::text NOT NULL\n#   );\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"updateTopicById\": {\n    \"topic\": {\n      \"nodeId\": \"WyJ0b3BpY3MiLDFd\",\n      \"id\": 1,\n      \"title\": \"My (edited) title\",\n      \"body\":\n        \"lets discuss cats because theyre totally cool\"\n    }\n  }\n}\n",
        "resultLanguage": "json"
      },
      {
        "title": "Delete",
        "example": "mutation {\n  deleteTopicById(input: { id: 1 }) {\n    deletedTopicId\n  }\n}\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"deleteTopicById\": {\n    \"deletedTopicId\":\n      \"WyJ0b3BpY3MiLDFd\"\n  }\n}\n",
        "resultLanguage": "json"
      }
    ]
  },
  {
    "category": "queries",
    "title": "Custom queries",
    "examples": [
      {
        "title": "Single scalar",
        "example": "{\n  randomNumber\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.random_number() returns int\n#  language sql stable\n#  as $$\n#    select 4; -- Chosen by fair dice roll. Guaranteed to be random. XKCD#221\n#  $$;\n#\n",
        "exampleLanguage": "graphql",
        "result": "{ \"randomNumber\": 4 }\n",
        "resultLanguage": "json"
      },
      {
        "title": "Single row",
        "example": "{\n  currentUser {\n    nodeId\n    id\n    username\n  }\n}\n\n# Added to the GraphQL schema via\n# this SQL:\n#\n#   create function current_user()\n#   returns app_public.users\n#   language sql stable\n#   as $$\n#     select users.*\n#     from app_public.users\n#     where id = current_user_id();\n#   $$;\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"currentUser\": {\n    \"nodeId\": \"WyJ1c2VycyIsMV0=\",\n    \"id\": 1,\n    \"username\": \"user\"\n  }\n}\n",
        "resultLanguage": "json"
      },
      {
        "title": "Rows connection",
        "example": "{\n  forumsAboutCats {\n    nodes {\n      nodeId\n      id\n      name\n      slug\n    }\n  }\n}\n\n# Created from SQL like:\n#\n#  create function app_public.forums_about_cats()\n#  returns setof app_public.forums\n#  language sql stable\n#  as $$\n#    select *\n#    from app_public.forums\n#    where slug like 'cat-%';\n#  $$;\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"forumsAboutCats\": {\n    \"nodes\": [\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDFd\",\n        \"id\": 1,\n        \"name\": \"Cat Life\",\n        \"slug\": \"cat-life\"\n      }\n    ]\n  }\n}\n",
        "resultLanguage": "json"
      }
    ]
  },
  {
    "category": "queries",
    "title": "Custom mutations",
    "examples": [
      {
        "title": "Forgot password",
        "example": "mutation {\n  forgotPassword(\n    input: {\n      email: \"user@example.com\"\n    }\n  ) {\n    success\n  }\n}\n\n# Generated with SQL like this:\n#\n#  create function forgot_password(email text)\n#  returns boolean\n#  language plpgsql volatile\n#  as $$\n#    ...\n#  $$;\n#\n#  -- Optionally rename the result field:\n#  comment on function\n#    forgot_password(email text)\n#    is '@resultFieldName success';\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"forgotPassword\": {\n    \"success\": true\n  }\n}\n",
        "resultLanguage": "json"
      }
    ]
  },
  {
    "category": "queries",
    "title": "Computed columns",
    "examples": [
      {
        "title": "Topic summary",
        "example": "{\n  topicById(id: 2) {\n    body\n    bodySummary\n  }\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.topics_body_summary(\n#    t app_public.topics,\n#    max_length int = 30\n#  )\n#  returns text\n#  language sql stable\n#  as $$\n#    select case\n#      when length(t.body) > max_length\n#      then left(t.body, max_length - 3)\n#             || '...'\n#      else t.body\n#      end;\n#  $$;\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"topicById\": {\n    \"body\":\n      \"do you find your cat just sleeps everywhere\",\n    \"bodySummary\":\n      \"do you find your cat just s...\"\n  }\n}\n",
        "resultLanguage": "json"
      },
      {
        "title": "Topic summary with arg",
        "example": "{\n  topicById(id: 2) {\n    body\n    bodySummary(maxLength: 20)\n  }\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.topics_body_summary(\n#    t app_public.topics,\n#    max_length int = 30\n#  )\n#  returns text\n#  language sql stable\n#  as $$\n#    select case\n#      when length(t.body) > max_length\n#      then left(t.body, max_length - 3)\n#             || '...'\n#      else t.body\n#      end;\n#  $$;\n",
        "exampleLanguage": "graphql",
        "result": "{\n  \"topicById\": {\n    \"body\":\n      \"do you find your cat just sleeps everywhere\",\n    \"bodySummary\":\n      \"do you find your ...\"\n  }\n}\n",
        "resultLanguage": "json"
      }
    ]
  }
]