webpackJsonp([0x3a3a9b7385a60400],{"./node_modules/json-loader/index.js!./.cache/json/graphile-build-build-object.json":function(e,a){e.exports={data:{remark:{html:'<h2 id="the-build-object"><a href="#the-build-object" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The <code>Build</code> Object</h2>\n<p>The build object contains a number of helpers and sources of information\nrelevant to the current build of the GraphQL API. If you\'re in watch mode then\nevery time a new schema is generated a new build object will be used.</p>\n<p>The following properties/methods are available on the initial build object\n(more may be added by plugins via the <code>build</code> hook):</p>\n<h2 id="newwithhookstype-spec-scope"><a href="#newwithhookstype-spec-scope" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>newWithHooks(type, spec, scope)</code></h2>\n<p>The bread-and-butter of Graphile-Build, this method is how we build hooked GraphQL objects:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> MyType <span class="token operator">=</span> <span class="token function">newWithHooks</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> spec<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<ul>\n<li><code>type</code> is a GraphQL object type, such as <code>GraphQLEnumType</code> or <code>GraphQLInputObjectType</code></li>\n<li><code>spec</code> is a valid specification that will be passed through the relevant\nhooks before ultimately being passed to the constructor of the aforementioned\n<code>type</code> and returning an instance of that type</li>\n<li><code>scope</code> is where you can add scope information that will be available through\nthe <code>scope</code> property in the context object passed to hooks (see <code>Context</code>\nbelow)</li>\n</ul>\n<h2 id="extendinput-extensions"><a href="#extendinput-extensions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>extend(input, extensions)</code></h2>\n<p>Returns a new object by merging the properties of <code>input</code> and <code>extensions</code>\n<strong>without overwriting</strong>. If any clashes occur an error will be throw. It is\nadvisable to use this instead of <code>Object.assign</code> or <code>{...input, ...extensions}</code>\nbecause it will warn you if you\'re accidentally overwriting something.</p>\n<h2 id="graphql"><a href="#graphql" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>graphql</code></h2>\n<p>Equivalent to <code>require(\'graphql\')</code>, by using this property you don\'t have to\nimport graphql and you\'re less likely to get version conflicts which are hard\nto diagnose and resolve. Use of this property over importing <code>graphql</code> yourself\nis highly recommended.</p>\n<h2 id="gettypebynametypename"><a href="#gettypebynametypename" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>getTypeByName(typeName)</code></h2>\n<p>Returns the GraphQL type associated with the given name, if it is known to the\ncurrent build, or <code>null</code> otherwise. Objects built with <code>newWithHooks</code> are\nautomatically registered, but external objects must be registered via:</p>\n<h2 id="addtypetype-graphqlnamedtype"><a href="#addtypetype-graphqlnamedtype" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>addType(type: GraphQLNamedType)</code></h2>\n<p>Registers an external (un-hooked) GraphQL type with the system so that it may\nbe referenced via <code>getTypeByName()</code></p>\n<h2 id="getaliasfromresolveinforesolveinfo"><a href="#getaliasfromresolveinforesolveinfo" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>getAliasFromResolveInfo(resolveInfo)</code></h2>\n<p>Use this in your resolver to quickly retrieve the alias that this field was\nrequested as.</p>\n<p>From <a href="https://github.com/graphile/graphile-build/tree/master/packages/graphql-parse-resolve-info#getaliasfromresolveinforesolveinfo"><code>graphql-parse-resolve-info</code></a></p>\n<p>TODO: example</p>\n<h2 id="resolvealias"><a href="#resolvealias" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>resolveAlias</code></h2>\n<p>Can be used in place of the <code>resolve</code> method for a field if you wish it to resolve to the alias the field was requested as (as opposed to its name).</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token function">resolveAlias</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> _args<span class="token punctuation">,</span> _context<span class="token punctuation">,</span> resolveInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> alias <span class="token operator">=</span> <span class="token function">getAliasFromResolveInfo</span><span class="token punctuation">(</span>resolveInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> data<span class="token punctuation">[</span>alias<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>',frontmatter:{path:"/graphile-build/build-object/",title:"The Build Object"}},nav:{edges:[{node:{id:"/Users/benjiegillam/Documents/graphql-build-website/src/data/nav.json absPath of file [0] >>> JSON",to:"/graphile-build/getting-started/",title:"Getting Started",section:"guides"}},{node:{id:"/Users/benjiegillam/Documents/graphql-build-website/src/data/nav.json absPath of file [1] >>> JSON",to:"/graphile-build/plugins/",title:"Plugins",section:"guides"}},{node:{id:"/Users/benjiegillam/Documents/graphql-build-website/src/data/nav.json absPath of file [2] >>> JSON",to:"/graphile-build/hooks/",title:"Hooks",section:"guides"}},{node:{id:"/Users/benjiegillam/Documents/graphql-build-website/src/data/nav.json absPath of file [3] >>> JSON",to:"/graphile-build/look-ahead/",title:"Look Ahead",section:"guides"}},{node:{id:"/Users/benjiegillam/Documents/graphql-build-website/src/data/nav.json absPath of file [4] >>> JSON",to:"/graphile-build/graphile-build/",title:"graphile-build",section:"library-reference"}},{node:{id:"/Users/benjiegillam/Documents/graphql-build-website/src/data/nav.json absPath of file [5] >>> JSON",to:"/graphile-build/schema-builder/",title:"SchemaBuilder",section:"library-reference"}},{node:{id:"/Users/benjiegillam/Documents/graphql-build-website/src/data/nav.json absPath of file [6] >>> JSON",to:"/graphile-build/plugin-options/",title:"Options",section:"library-reference"}},{node:{id:"/Users/benjiegillam/Documents/graphql-build-website/src/data/nav.json absPath of file [7] >>> JSON",to:"/graphile-build/default-plugins/",title:"Default Plugins",section:"library-reference"}},{node:{id:"/Users/benjiegillam/Documents/graphql-build-website/src/data/nav.json absPath of file [8] >>> JSON",to:"/graphile-build/all-hooks/",title:"All Hooks",section:"plugin-reference"}},{node:{id:"/Users/benjiegillam/Documents/graphql-build-website/src/data/nav.json absPath of file [9] >>> JSON",to:"/graphile-build/build-object/",title:"Build Object",section:"plugin-reference"}},{node:{id:"/Users/benjiegillam/Documents/graphql-build-website/src/data/nav.json absPath of file [10] >>> JSON",to:"/graphile-build/context-object/",title:"Context Object",section:"plugin-reference"}}]}},pathContext:{layout:"page"}}}});
//# sourceMappingURL=path---graphile-build-build-object-ef44b55ed7113664c6f0.js.map