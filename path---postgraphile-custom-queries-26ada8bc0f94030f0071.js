webpackJsonp([0xee7e569ab0103000],{"./node_modules/json-loader/index.js!./.cache/json/postgraphile-custom-queries.json":function(e,t){e.exports={data:{remark:{html:'<h2 id="custom-queries"><a href="#custom-queries" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Custom Queries</h2>\n<p>Like <a href="/postgraphile/computed-columns/">computed columns</a>, you can also add\nroot-level Query fields by creating a <a href="/postgraphile/procedures/">PostgreSQL function</a>. The arguments to\nthese functions will be exposed via GraphQL also - named arguments are\npreferred, if your arguments are not named we will assign them an\nauto-generated name such as <code>arg1</code>. The rules that apply to these are the\nfollowing:</p>\n<ul>\n<li>if the function accepts arguments, the first argument must NOT be a table type (see computed columns above)</li>\n<li>must return a named type - we do not currently support anonymous types</li>\n<li>must NOT return <code>VOID</code></li>\n<li>must be marked as <code>STABLE</code></li>\n<li>must be defined in one of the introspected schemas</li>\n</ul>\n<h3 id="example"><a href="#example" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h3>\n<p>So let’s write a search query for our <a href="https://github.com/calebmer/postgraphql/tree/master/examples/forum">forum example</a> using the PostgreSQL\n<a href="http://www.postgresql.org/docs/current/static/functions-matching.html"><code>LIKE</code></a> operator (we’ll actually use <code>ILIKE</code> because it is case\ninsensitive). The custom query we create is included in the forum example’s\nschema, so if you want to run that example locally you can try it out.</p>\n<p>The procedure would look like the following. Indentation is non-standard so we can fit in comments to explain what’s going on.</p>\n<div class="gatsby-highlight">\n      <pre class="language-sql"><code><span class="token comment" spellcheck="true">-- Our `post` table is created with the following columns. Columns unnecessary</span>\n<span class="token comment" spellcheck="true">-- to this demo were omitted. You can find the full table in our forum example.</span>\n<span class="token keyword">create</span> <span class="token keyword">table</span> post <span class="token punctuation">(</span>\n  …\n  headline         <span class="token keyword">text</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>\n  body             <span class="token keyword">text</span><span class="token punctuation">,</span>\n  …\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment" spellcheck="true">-- Create the function named `search_posts` with a text argument named `search`.</span>\n<span class="token keyword">create</span> <span class="token keyword">function</span> search_posts<span class="token punctuation">(</span>search <span class="token keyword">text</span><span class="token punctuation">)</span>\n  <span class="token comment" spellcheck="true">-- This function will return a set of posts from the `post` table. The</span>\n  <span class="token comment" spellcheck="true">-- `setof` part is important to PostGraphQL, check out our procedure docs to</span>\n  <span class="token comment" spellcheck="true">-- learn why.</span>\n  <span class="token keyword">returns</span> setof post <span class="token keyword">as</span> $$\n    <span class="token comment" spellcheck="true">-- Write our advanced query as a SQL query!</span>\n    <span class="token keyword">select</span> <span class="token operator">*</span>\n    <span class="token keyword">from</span> post\n    <span class="token keyword">where</span>\n      <span class="token comment" spellcheck="true">-- Use the `ILIKE` operator on both the `headline` and `body` columns. If</span>\n      <span class="token comment" spellcheck="true">-- either return true, return the post.</span>\n      headline ilike <span class="token punctuation">(</span><span class="token string">\'%\'</span> <span class="token operator">||</span> search <span class="token operator">||</span> <span class="token string">\'%\'</span><span class="token punctuation">)</span> <span class="token operator">or</span>\n      body ilike <span class="token punctuation">(</span><span class="token string">\'%\'</span> <span class="token operator">||</span> search <span class="token operator">||</span> <span class="token string">\'%\'</span><span class="token punctuation">)</span>\n  <span class="token comment" spellcheck="true">-- End the function declaring the language we used as SQL and add the</span>\n  <span class="token comment" spellcheck="true">-- `STABLE` marker so PostGraphQL knows its a query and not a mutation.</span>\n  $$ <span class="token keyword">language sql</span> stable<span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>And that’s it! You can now use this function in your GraphQL like so:</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code><span class="token punctuation">{</span>\n  searchPosts<span class="token punctuation">(</span><span class="token attr-name">search</span><span class="token punctuation">:</span> <span class="token string">"Hello world"</span><span class="token punctuation">,</span> <span class="token attr-name">first</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    pageInfo <span class="token punctuation">{</span>\n      hasNextPage\n    <span class="token punctuation">}</span>\n    totalCount\n    nodes <span class="token punctuation">{</span>\n      headline\n      body\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>',frontmatter:{path:"/postgraphile/custom-queries/",title:"Custom Queries"}},nav:{edges:[{node:{id:"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [0] >>> JSON",name:"graphile-build",sections:[{id:"guides",title:"Overview"},{id:"library-reference",title:"Using the Library"},{id:"plugin-reference",title:"Building a Plugin"}],pages:[{to:"/graphile-build/getting-started/",title:"Getting Started",sectionId:"guides"},{to:"/graphile-build/plugins/",title:"Plugins",sectionId:"guides"},{to:"/graphile-build/hooks/",title:"Hooks",sectionId:"guides"},{to:"/graphile-build/look-ahead/",title:"Look Ahead",sectionId:"guides"},{to:"/graphile-build/graphile-build/",title:"graphile-build",sectionId:"library-reference"},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"library-reference"},{to:"/graphile-build/plugin-options/",title:"Options",sectionId:"library-reference"},{to:"/graphile-build/default-plugins/",title:"Default Plugins",sectionId:"library-reference"},{to:"/graphile-build/omitting-plugins/",title:"Omitting Plugins",sectionId:"guides"},{to:"/graphile-build/all-hooks/",title:"All Hooks",sectionId:"plugin-reference"},{to:"/graphile-build/build-object/",title:"Build Object",sectionId:"plugin-reference"},{to:"/graphile-build/context-object/",title:"Context Object",sectionId:"plugin-reference"},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"library-reference"}]}},{node:{id:"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [1] >>> JSON",name:"postgraphile",sections:[{id:"overview",title:"Overview"},{id:"guides",title:"Guides"},{id:"usage",title:"Usage"}],pages:[{to:"/postgraphile/introduction/",title:"Introduction",sectionId:"overview"},{to:"/postgraphile/evaluating/",title:"Evaluating for your Project",sectionId:"guides"},{to:"/postgraphile/requirements/",title:"Requirements",sectionId:"overview"},{to:"/postgraphile/performance/",title:"Performance",sectionId:"overview"},{to:"/postgraphile/connections/",title:"Connections",sectionId:"overview"},{to:"/postgraphile/filtering/",title:"Filtering",sectionId:"overview"},{to:"/postgraphile/relations/",title:"Relations",sectionId:"overview"},{to:"/postgraphile/crud-mutations/",title:"CRUD Mutations",sectionId:"overview"},{to:"/postgraphile/computed-columns/",title:"Computed Columns",sectionId:"overview"},{to:"/postgraphile/custom-queries/",title:"Custom Queries",sectionId:"overview"},{to:"/postgraphile/custom-mutations/",title:"Custom Mutations",sectionId:"overview"},{to:"/postgraphile/security/",title:"Security",sectionId:"overview"},{to:"/postgraphile/introspection/",title:"Introspection",sectionId:"overview"},{to:"/postgraphile/jwt-guide/",title:"PostGraphile JWT Guide",sectionId:"guides"},{to:"/postgraphile/default-role/",title:"The Default Role",sectionId:"guides"},{to:"/postgraphile/procedures/",title:"PostgreSQL Procedures",sectionId:"guides"},{to:"/postgraphile/postgresql-schema-design/",title:"PostgreSQL Schema Design",sectionId:"guides"},{to:"/postgraphile/postgresql-indexes/",title:"PostgreSQL Indexes",sectionId:"guides"},{to:"/postgraphile/usage-cli/",title:"CLI Usage",sectionId:"usage"},{to:"/postgraphile/usage-library/",title:"Library Usage",sectionId:"usage"},{to:"/postgraphile/usage-schema/",title:"Schema-only Usage",sectionId:"usage"}]}},{node:{id:"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [2] >>> JSON",name:"graphile-build-pg",sections:[{id:"usage",title:"Usage"}],pages:[{to:"/postgraphile/settings/",title:"Settings",sectionId:"usage"}]}}]}},pathContext:{layout:"page"}}}});
//# sourceMappingURL=path---postgraphile-custom-queries-26ada8bc0f94030f0071.js.map