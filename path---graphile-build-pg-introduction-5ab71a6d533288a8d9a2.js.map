{"version":3,"sources":["webpack:///path---graphile-build-pg-introduction-5ab71a6d533288a8d9a2.js","webpack:///./.cache/json/graphile-build-pg-introduction.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/graphile-build-pg-introduction.json","module","exports","data","remark","html","frontmatter","path","title","nav","edges","node","id","name","sections","pages","to","sectionId","pathContext","layout"],"mappings":"AAAAA,cAAc,qBAERC,wFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,QAAUC,KAAA,87hBAA+viBC,aAA0KC,KAAA,mCAAAC,MAAA,mCAAoFC,KAAQC,QAAUC,MAAQC,GAAA,4FAAAC,KAAA,iBAAAC,WAAsIF,GAAA,SAAAJ,MAAA,WAAiCI,GAAA,oBAAAJ,MAAA,sBAAuDI,GAAA,mBAAAJ,MAAA,qBAAmDO,QAAYC,GAAA,mCAAAR,MAAA,kBAAAS,UAAA,WAAyFD,GAAA,2BAAAR,MAAA,UAAAS,UAAA,WAAyED,GAAA,yBAAAR,MAAA,QAAAS,UAAA,WAAqED,GAAA,8BAAAR,MAAA,aAAAS,UAAA,WAA+ED,GAAA,kCAAAR,MAAA,iBAAAS,UAAA,sBAAkGD,GAAA,kCAAAR,MAAA,gBAAAS,UAAA,sBAAiGD,GAAA,kCAAAR,MAAA,UAAAS,UAAA,sBAA2FD,GAAA,mCAAAR,MAAA,kBAAAS,UAAA,sBAAoGD,GAAA,6BAAAR,MAAA,YAAAS,UAAA,qBAAuFD,GAAA,gCAAAR,MAAA,eAAAS,UAAA,qBAA6FD,GAAA,kCAAAR,MAAA,iBAAAS,UAAA,wBAAoGN,MAAQC,GAAA,4FAAAC,KAAA,oBAAAC,WAAyIF,GAAA,SAAAJ,MAAA,WAA+BO,QAAYC,GAAA,mCAAAR,MAAA,eAAAS,UAAA,gBAA0FC,aAAgBC,OAAA","file":"path---graphile-build-pg-introduction-5ab71a6d533288a8d9a2.js","sourcesContent":["webpackJsonp([14459479492863674000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/graphile-build-pg-introduction.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"remark\":{\"html\":\"<h2 id=\\\"introduction\\\"><a href=\\\"#introduction\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Introduction</h2>\\n<p><code>graphile-build-pg</code> is a collection of plugins for Graphile-Build that enable\\nyou to automatically generate GraphQL types and fields based on a PostgreSQL\\nschema (or schemas) - automatically creating types and fields based on\\nPostgreSQL tables, columns, relations, functions and more.</p>\\n<h3 id=\\\"consuming-these-plugins\\\"><a href=\\\"#consuming-these-plugins\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Consuming these plugins</h3>\\n<p>It's recommended that you consume these plugins via the\\n<a href=\\\"https://github.com/graphile/graphile-build/tree/master/packages/postgraphile-core\\\"><code>postgraphile-core</code></a>\\nmodule which is used internally by\\n<a href=\\\"https://github.com/postgraphql/postgraphql\\\"><code>PostGraphQL</code></a>. This module is\\nfairly small and exposes the following methods:</p>\\n<ul>\\n<li><code>createPostGraphQLSchema(pgConfig, schemas, options)</code> - returns a promise to a GraphQL schema</li>\\n<li><code>watchPostGraphQLSchema(pgConfig, schemas, options, onNewSchema)</code> - returns a\\npromise that returns a <code>release</code> function that you can call to stop watching;\\nthe <code>onNewSchema</code> callback will be called every time a new schema is\\ngenerated, and it is guaranteed to be called before the promise resolves.</li>\\n</ul>\\n<p>If you prefer to use the plugins yourself it's advised that you use the\\n<code>defaultPlugins</code> export from <code>graphile-build-pg</code> and then create a new array\\nbased on that into which you may insert or remove specific plugins. This is\\nbecause it is ordered in a way to ensure the plugins work correctly (and we may\\nstill split up or restructure the plugins within it).</p>\\n<h3 id=\\\"introspection--schemas\\\"><a href=\\\"#introspection--schemas\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Introspection / Schemas</h3>\\n<p>We look through the PG catalog to see what tables, functions, relations etc are\\navailable in your schemas. You provide the list of schemas to inspect via the\\n<code>pgSchemas</code> setting, e.g. <code>pgSchemas: [\\\"public\\\"]</code>.</p>\\n<p>If you're interested to see how we do this, the introspection query can be\\nfound <a href=\\\"https://github.com/graphile/graphile-build/blob/master/packages/graphile-build-pg/res/introspection-query.sql\\\">in our\\nGitHub</a>.</p>\\n<h3 id=\\\"connections\\\"><a href=\\\"#connections\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Connections</h3>\\n<p>We implement Relay's connection spec, so instead of returning simply a list of\\nrecords we return a connection which allows you to perform pagination with\\nease. We also extend Relay's connection spec a little to give you some extra features\\nsuch as:</p>\\n<ul>\\n<li><code>totalCount</code> - the total number of records matching the record</li>\\n<li><code>nodes</code> - just the nodes (no <code>edge</code> wrapper) useful if you don't want the cursor for every entry</li>\\n<li><code>pageInfo.startCursor</code> and <code>pageInfo.endCursor</code> - useful for pagination if you use <code>nodes { ... }</code> rather than <code>edges { cursor, node { ... } }</code></li>\\n</ul>\\n<h3 id=\\\"relations\\\"><a href=\\\"#relations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Relations</h3>\\n<p>We automatically discover relations between tables and add these to the\\ngenerated GraphQL types so long as you use foreign keys.</p>\\n<h3 id=\\\"computed-columns\\\"><a href=\\\"#computed-columns\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Computed columns</h3>\\n<p>You can create PostgreSQL functions that match the following criteria to add a\\nfield to a table type. This field could be simple (such as <code>name</code> constructed\\nfrom <code>first_name || ' ' || last_name</code>) or could return a composite type (e.g.\\ndatabase row) or even a whole connection. For this to work, the following rules\\napply to the function you create:</p>\\n<ul>\\n<li>name must begin with the name of the table it applies to, followed by an underscore (<code>_</code>)</li>\\n<li>first argument must be the table type</li>\\n<li>must return a named type - we do not currently support anonymous types</li>\\n<li>must NOT return <code>VOID</code></li>\\n<li>must be marked as <code>STABLE</code></li>\\n<li>must be defined in the same schema as the table</li>\\n</ul>\\n<p>This example creates two computed columns, one returning a simple varchar and\\nthe other a connection. Note that these methods could also accept additional\\narguments which would also automatically be added to the generated GraphQL\\nfield:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">create</span> <span class=\\\"token keyword\\\">table</span> my_schema<span class=\\\"token punctuation\\\">.</span>users <span class=\\\"token punctuation\\\">(</span>\\n  id <span class=\\\"token keyword\\\">serial</span> <span class=\\\"token operator\\\">not</span> <span class=\\\"token boolean\\\">null</span> <span class=\\\"token keyword\\\">primary</span> <span class=\\\"token keyword\\\">key</span><span class=\\\"token punctuation\\\">,</span>\\n  first_name <span class=\\\"token keyword\\\">varchar</span> <span class=\\\"token operator\\\">not</span> <span class=\\\"token boolean\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  last_name <span class=\\\"token keyword\\\">varchar</span> <span class=\\\"token operator\\\">not</span> <span class=\\\"token boolean\\\">null</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">create</span> <span class=\\\"token keyword\\\">table</span> my_schema<span class=\\\"token punctuation\\\">.</span>friendships <span class=\\\"token punctuation\\\">(</span>\\n  user_id <span class=\\\"token keyword\\\">integer</span> <span class=\\\"token operator\\\">not</span> <span class=\\\"token boolean\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  target_id <span class=\\\"token keyword\\\">integer</span> <span class=\\\"token operator\\\">not</span> <span class=\\\"token boolean\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">primary</span> <span class=\\\"token keyword\\\">key</span> <span class=\\\"token punctuation\\\">(</span>user_id<span class=\\\"token punctuation\\\">,</span> target_id<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">create</span> <span class=\\\"token keyword\\\">function</span> my_schema<span class=\\\"token punctuation\\\">.</span>users_name<span class=\\\"token punctuation\\\">(</span>u my_schema<span class=\\\"token punctuation\\\">.</span>users<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">returns</span> <span class=\\\"token keyword\\\">varchar</span> <span class=\\\"token keyword\\\">as</span> $$\\n  <span class=\\\"token keyword\\\">select</span> u<span class=\\\"token punctuation\\\">.</span>first_name <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">' '</span> <span class=\\\"token operator\\\">||</span> u<span class=\\\"token punctuation\\\">.</span>last_name<span class=\\\"token punctuation\\\">;</span>\\n$$ <span class=\\\"token keyword\\\">language sql</span> stable<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">create</span> <span class=\\\"token keyword\\\">function</span> my_schema<span class=\\\"token punctuation\\\">.</span>users_friends<span class=\\\"token punctuation\\\">(</span>u my_schema<span class=\\\"token punctuation\\\">.</span>users<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">returns</span> setof my_schema<span class=\\\"token punctuation\\\">.</span>users <span class=\\\"token keyword\\\">as</span> $$\\n  <span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span>\\n  <span class=\\\"token keyword\\\">from</span> my_schema<span class=\\\"token punctuation\\\">.</span>users\\n  <span class=\\\"token keyword\\\">inner</span> <span class=\\\"token keyword\\\">join</span> my_schema<span class=\\\"token punctuation\\\">.</span>friendships\\n  <span class=\\\"token keyword\\\">on</span> <span class=\\\"token punctuation\\\">(</span>friendships<span class=\\\"token punctuation\\\">.</span>target_id <span class=\\\"token operator\\\">=</span> users<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">where</span> friendships<span class=\\\"token punctuation\\\">.</span>user_id <span class=\\\"token operator\\\">=</span> u<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">;</span>\\n$$ <span class=\\\"token keyword\\\">language sql</span> stable<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>TODO: ensure this example works</p>\\n<h3 id=\\\"custom-queries\\\"><a href=\\\"#custom-queries\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Custom queries</h3>\\n<p>Like computed columns, you can also add root-level Query fields by creating a\\nPostgreSQL function. The arguments to these functions will be exposed via\\nGraphQL also - named arguments are preferred, if your arguments are not named\\nwe will assign them an auto-generated name such as <code>arg1</code>. The rules that apply\\nto these are the following:</p>\\n<ul>\\n<li>if the function accepts arguments, the first argument must NOT be a table type (see computed columns above)</li>\\n<li>must return a named type - we do not currently support anonymous types</li>\\n<li>must NOT return <code>VOID</code></li>\\n<li>must be marked as <code>STABLE</code></li>\\n<li>must be defined in one of the introspected schemas</li>\\n</ul>\\n<h3 id=\\\"crud-mutations\\\"><a href=\\\"#crud-mutations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>CRUD mutations</h3>\\n<p>We automatically add default CRUD mutations to the schema; this can be disabled\\nvia the <code>pgDisableDefaultMutations</code> setting.</p>\\n<p>TODO: add example</p>\\n<h3 id=\\\"custom-mutations\\\"><a href=\\\"#custom-mutations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Custom mutations</h3>\\n<p>You can create PostgreSQL functions that perform mutations too, for these\\nfunctions the following rules apply:</p>\\n<ul>\\n<li>must return a named type - we do not currently support anonymous types; can return <code>VOID</code></li>\\n<li>must be marked as <code>VOLATILE</code> (which is the default)</li>\\n<li>must be defined in one of the introspected schemas</li>\\n</ul>\\n<h3 id=\\\"performance\\\"><a href=\\\"#performance\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Performance</h3>\\n<p>A single root level query, no matter how nested, is compiled into one SQL query\\nwhich avoids multiple round-trips to the database. For example the following\\nquery would be compiled into one SQL statement - no need for <code>DataLoader</code>!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-graphql\\\"><code><span class=\\\"token punctuation\\\">{</span>\\n  allPosts <span class=\\\"token punctuation\\\">{</span>\\n    edges <span class=\\\"token punctuation\\\">{</span>\\n      node <span class=\\\"token punctuation\\\">{</span>\\n        id\\n        title\\n        <span class=\\\"token attr-name\\\">author</span><span class=\\\"token punctuation\\\">:</span> userByAuthorId <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token operator\\\">...</span>UserDetails\\n        <span class=\\\"token punctuation\\\">}</span>\\n        comments <span class=\\\"token punctuation\\\">{</span>\\n          text\\n          <span class=\\\"token attr-name\\\">author</span><span class=\\\"token punctuation\\\">:</span> userByAuthorId <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token operator\\\">...</span>UserDetails\\n            recentComments <span class=\\\"token punctuation\\\">{</span>\\n              date\\n              <span class=\\\"token attr-name\\\">post</span><span class=\\\"token punctuation\\\">:</span> postByPostId <span class=\\\"token punctuation\\\">{</span>\\n                title\\n                author <span class=\\\"token punctuation\\\">{</span>\\n                  <span class=\\\"token operator\\\">...</span>UserDetails\\n                <span class=\\\"token punctuation\\\">}</span>\\n              <span class=\\\"token punctuation\\\">}</span>\\n              text\\n            <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fragment</span> UserDetails on User <span class=\\\"token punctuation\\\">{</span>\\n  id\\n  username\\n  <span class=\\\"token attr-name\\\">bio</span><span class=\\\"token punctuation\\\">:</span> bioByUserId <span class=\\\"token punctuation\\\">{</span>\\n    preamble\\n    location\\n    description\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>This is accomplished using Graphile-Build's <a href=\\\"/graphile-build/look-ahead/\\\">look-ahead</a> features.</p>\",\"frontmatter\":{\"path\":\"/graphile-build-pg/introduction/\",\"title\":\"Graphile-Build-PG Introduction\"}},\"nav\":{\"edges\":[{\"node\":{\"id\":\"/Users/benjiegillam/Documents/graphile.com/src/data/nav.json absPath of file [0] >>> JSON\",\"name\":\"graphile-build\",\"sections\":[{\"id\":\"guides\",\"title\":\"Guides\"},{\"id\":\"library-reference\",\"title\":\"Library Reference\"},{\"id\":\"plugin-reference\",\"title\":\"Plugin Reference\"}],\"pages\":[{\"to\":\"/graphile-build/getting-started/\",\"title\":\"Getting Started\",\"sectionId\":\"guides\"},{\"to\":\"/graphile-build/plugins/\",\"title\":\"Plugins\",\"sectionId\":\"guides\"},{\"to\":\"/graphile-build/hooks/\",\"title\":\"Hooks\",\"sectionId\":\"guides\"},{\"to\":\"/graphile-build/look-ahead/\",\"title\":\"Look Ahead\",\"sectionId\":\"guides\"},{\"to\":\"/graphile-build/graphile-build/\",\"title\":\"graphile-build\",\"sectionId\":\"library-reference\"},{\"to\":\"/graphile-build/schema-builder/\",\"title\":\"SchemaBuilder\",\"sectionId\":\"library-reference\"},{\"to\":\"/graphile-build/plugin-options/\",\"title\":\"Options\",\"sectionId\":\"library-reference\"},{\"to\":\"/graphile-build/default-plugins/\",\"title\":\"Default Plugins\",\"sectionId\":\"library-reference\"},{\"to\":\"/graphile-build/all-hooks/\",\"title\":\"All Hooks\",\"sectionId\":\"plugin-reference\"},{\"to\":\"/graphile-build/build-object/\",\"title\":\"Build Object\",\"sectionId\":\"plugin-reference\"},{\"to\":\"/graphile-build/context-object/\",\"title\":\"Context Object\",\"sectionId\":\"plugin-reference\"}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Documents/graphile.com/src/data/nav.json absPath of file [1] >>> JSON\",\"name\":\"graphile-build-pg\",\"sections\":[{\"id\":\"guides\",\"title\":\"Guides\"}],\"pages\":[{\"to\":\"/graphile-build-pg/introduction/\",\"title\":\"Introduction\",\"sectionId\":\"guides\"}]}}]}},\"pathContext\":{\"layout\":\"page\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---graphile-build-pg-introduction-5ab71a6d533288a8d9a2.js","module.exports = {\"data\":{\"remark\":{\"html\":\"<h2 id=\\\"introduction\\\"><a href=\\\"#introduction\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Introduction</h2>\\n<p><code>graphile-build-pg</code> is a collection of plugins for Graphile-Build that enable\\nyou to automatically generate GraphQL types and fields based on a PostgreSQL\\nschema (or schemas) - automatically creating types and fields based on\\nPostgreSQL tables, columns, relations, functions and more.</p>\\n<h3 id=\\\"consuming-these-plugins\\\"><a href=\\\"#consuming-these-plugins\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Consuming these plugins</h3>\\n<p>It's recommended that you consume these plugins via the\\n<a href=\\\"https://github.com/graphile/graphile-build/tree/master/packages/postgraphile-core\\\"><code>postgraphile-core</code></a>\\nmodule which is used internally by\\n<a href=\\\"https://github.com/postgraphql/postgraphql\\\"><code>PostGraphQL</code></a>. This module is\\nfairly small and exposes the following methods:</p>\\n<ul>\\n<li><code>createPostGraphQLSchema(pgConfig, schemas, options)</code> - returns a promise to a GraphQL schema</li>\\n<li><code>watchPostGraphQLSchema(pgConfig, schemas, options, onNewSchema)</code> - returns a\\npromise that returns a <code>release</code> function that you can call to stop watching;\\nthe <code>onNewSchema</code> callback will be called every time a new schema is\\ngenerated, and it is guaranteed to be called before the promise resolves.</li>\\n</ul>\\n<p>If you prefer to use the plugins yourself it's advised that you use the\\n<code>defaultPlugins</code> export from <code>graphile-build-pg</code> and then create a new array\\nbased on that into which you may insert or remove specific plugins. This is\\nbecause it is ordered in a way to ensure the plugins work correctly (and we may\\nstill split up or restructure the plugins within it).</p>\\n<h3 id=\\\"introspection--schemas\\\"><a href=\\\"#introspection--schemas\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Introspection / Schemas</h3>\\n<p>We look through the PG catalog to see what tables, functions, relations etc are\\navailable in your schemas. You provide the list of schemas to inspect via the\\n<code>pgSchemas</code> setting, e.g. <code>pgSchemas: [\\\"public\\\"]</code>.</p>\\n<p>If you're interested to see how we do this, the introspection query can be\\nfound <a href=\\\"https://github.com/graphile/graphile-build/blob/master/packages/graphile-build-pg/res/introspection-query.sql\\\">in our\\nGitHub</a>.</p>\\n<h3 id=\\\"connections\\\"><a href=\\\"#connections\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Connections</h3>\\n<p>We implement Relay's connection spec, so instead of returning simply a list of\\nrecords we return a connection which allows you to perform pagination with\\nease. We also extend Relay's connection spec a little to give you some extra features\\nsuch as:</p>\\n<ul>\\n<li><code>totalCount</code> - the total number of records matching the record</li>\\n<li><code>nodes</code> - just the nodes (no <code>edge</code> wrapper) useful if you don't want the cursor for every entry</li>\\n<li><code>pageInfo.startCursor</code> and <code>pageInfo.endCursor</code> - useful for pagination if you use <code>nodes { ... }</code> rather than <code>edges { cursor, node { ... } }</code></li>\\n</ul>\\n<h3 id=\\\"relations\\\"><a href=\\\"#relations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Relations</h3>\\n<p>We automatically discover relations between tables and add these to the\\ngenerated GraphQL types so long as you use foreign keys.</p>\\n<h3 id=\\\"computed-columns\\\"><a href=\\\"#computed-columns\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Computed columns</h3>\\n<p>You can create PostgreSQL functions that match the following criteria to add a\\nfield to a table type. This field could be simple (such as <code>name</code> constructed\\nfrom <code>first_name || ' ' || last_name</code>) or could return a composite type (e.g.\\ndatabase row) or even a whole connection. For this to work, the following rules\\napply to the function you create:</p>\\n<ul>\\n<li>name must begin with the name of the table it applies to, followed by an underscore (<code>_</code>)</li>\\n<li>first argument must be the table type</li>\\n<li>must return a named type - we do not currently support anonymous types</li>\\n<li>must NOT return <code>VOID</code></li>\\n<li>must be marked as <code>STABLE</code></li>\\n<li>must be defined in the same schema as the table</li>\\n</ul>\\n<p>This example creates two computed columns, one returning a simple varchar and\\nthe other a connection. Note that these methods could also accept additional\\narguments which would also automatically be added to the generated GraphQL\\nfield:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">create</span> <span class=\\\"token keyword\\\">table</span> my_schema<span class=\\\"token punctuation\\\">.</span>users <span class=\\\"token punctuation\\\">(</span>\\n  id <span class=\\\"token keyword\\\">serial</span> <span class=\\\"token operator\\\">not</span> <span class=\\\"token boolean\\\">null</span> <span class=\\\"token keyword\\\">primary</span> <span class=\\\"token keyword\\\">key</span><span class=\\\"token punctuation\\\">,</span>\\n  first_name <span class=\\\"token keyword\\\">varchar</span> <span class=\\\"token operator\\\">not</span> <span class=\\\"token boolean\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  last_name <span class=\\\"token keyword\\\">varchar</span> <span class=\\\"token operator\\\">not</span> <span class=\\\"token boolean\\\">null</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">create</span> <span class=\\\"token keyword\\\">table</span> my_schema<span class=\\\"token punctuation\\\">.</span>friendships <span class=\\\"token punctuation\\\">(</span>\\n  user_id <span class=\\\"token keyword\\\">integer</span> <span class=\\\"token operator\\\">not</span> <span class=\\\"token boolean\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  target_id <span class=\\\"token keyword\\\">integer</span> <span class=\\\"token operator\\\">not</span> <span class=\\\"token boolean\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">primary</span> <span class=\\\"token keyword\\\">key</span> <span class=\\\"token punctuation\\\">(</span>user_id<span class=\\\"token punctuation\\\">,</span> target_id<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">create</span> <span class=\\\"token keyword\\\">function</span> my_schema<span class=\\\"token punctuation\\\">.</span>users_name<span class=\\\"token punctuation\\\">(</span>u my_schema<span class=\\\"token punctuation\\\">.</span>users<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">returns</span> <span class=\\\"token keyword\\\">varchar</span> <span class=\\\"token keyword\\\">as</span> $$\\n  <span class=\\\"token keyword\\\">select</span> u<span class=\\\"token punctuation\\\">.</span>first_name <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">' '</span> <span class=\\\"token operator\\\">||</span> u<span class=\\\"token punctuation\\\">.</span>last_name<span class=\\\"token punctuation\\\">;</span>\\n$$ <span class=\\\"token keyword\\\">language sql</span> stable<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">create</span> <span class=\\\"token keyword\\\">function</span> my_schema<span class=\\\"token punctuation\\\">.</span>users_friends<span class=\\\"token punctuation\\\">(</span>u my_schema<span class=\\\"token punctuation\\\">.</span>users<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">returns</span> setof my_schema<span class=\\\"token punctuation\\\">.</span>users <span class=\\\"token keyword\\\">as</span> $$\\n  <span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span>\\n  <span class=\\\"token keyword\\\">from</span> my_schema<span class=\\\"token punctuation\\\">.</span>users\\n  <span class=\\\"token keyword\\\">inner</span> <span class=\\\"token keyword\\\">join</span> my_schema<span class=\\\"token punctuation\\\">.</span>friendships\\n  <span class=\\\"token keyword\\\">on</span> <span class=\\\"token punctuation\\\">(</span>friendships<span class=\\\"token punctuation\\\">.</span>target_id <span class=\\\"token operator\\\">=</span> users<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">where</span> friendships<span class=\\\"token punctuation\\\">.</span>user_id <span class=\\\"token operator\\\">=</span> u<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">;</span>\\n$$ <span class=\\\"token keyword\\\">language sql</span> stable<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>TODO: ensure this example works</p>\\n<h3 id=\\\"custom-queries\\\"><a href=\\\"#custom-queries\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Custom queries</h3>\\n<p>Like computed columns, you can also add root-level Query fields by creating a\\nPostgreSQL function. The arguments to these functions will be exposed via\\nGraphQL also - named arguments are preferred, if your arguments are not named\\nwe will assign them an auto-generated name such as <code>arg1</code>. The rules that apply\\nto these are the following:</p>\\n<ul>\\n<li>if the function accepts arguments, the first argument must NOT be a table type (see computed columns above)</li>\\n<li>must return a named type - we do not currently support anonymous types</li>\\n<li>must NOT return <code>VOID</code></li>\\n<li>must be marked as <code>STABLE</code></li>\\n<li>must be defined in one of the introspected schemas</li>\\n</ul>\\n<h3 id=\\\"crud-mutations\\\"><a href=\\\"#crud-mutations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>CRUD mutations</h3>\\n<p>We automatically add default CRUD mutations to the schema; this can be disabled\\nvia the <code>pgDisableDefaultMutations</code> setting.</p>\\n<p>TODO: add example</p>\\n<h3 id=\\\"custom-mutations\\\"><a href=\\\"#custom-mutations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Custom mutations</h3>\\n<p>You can create PostgreSQL functions that perform mutations too, for these\\nfunctions the following rules apply:</p>\\n<ul>\\n<li>must return a named type - we do not currently support anonymous types; can return <code>VOID</code></li>\\n<li>must be marked as <code>VOLATILE</code> (which is the default)</li>\\n<li>must be defined in one of the introspected schemas</li>\\n</ul>\\n<h3 id=\\\"performance\\\"><a href=\\\"#performance\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Performance</h3>\\n<p>A single root level query, no matter how nested, is compiled into one SQL query\\nwhich avoids multiple round-trips to the database. For example the following\\nquery would be compiled into one SQL statement - no need for <code>DataLoader</code>!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-graphql\\\"><code><span class=\\\"token punctuation\\\">{</span>\\n  allPosts <span class=\\\"token punctuation\\\">{</span>\\n    edges <span class=\\\"token punctuation\\\">{</span>\\n      node <span class=\\\"token punctuation\\\">{</span>\\n        id\\n        title\\n        <span class=\\\"token attr-name\\\">author</span><span class=\\\"token punctuation\\\">:</span> userByAuthorId <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token operator\\\">...</span>UserDetails\\n        <span class=\\\"token punctuation\\\">}</span>\\n        comments <span class=\\\"token punctuation\\\">{</span>\\n          text\\n          <span class=\\\"token attr-name\\\">author</span><span class=\\\"token punctuation\\\">:</span> userByAuthorId <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token operator\\\">...</span>UserDetails\\n            recentComments <span class=\\\"token punctuation\\\">{</span>\\n              date\\n              <span class=\\\"token attr-name\\\">post</span><span class=\\\"token punctuation\\\">:</span> postByPostId <span class=\\\"token punctuation\\\">{</span>\\n                title\\n                author <span class=\\\"token punctuation\\\">{</span>\\n                  <span class=\\\"token operator\\\">...</span>UserDetails\\n                <span class=\\\"token punctuation\\\">}</span>\\n              <span class=\\\"token punctuation\\\">}</span>\\n              text\\n            <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">fragment</span> UserDetails on User <span class=\\\"token punctuation\\\">{</span>\\n  id\\n  username\\n  <span class=\\\"token attr-name\\\">bio</span><span class=\\\"token punctuation\\\">:</span> bioByUserId <span class=\\\"token punctuation\\\">{</span>\\n    preamble\\n    location\\n    description\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>This is accomplished using Graphile-Build's <a href=\\\"/graphile-build/look-ahead/\\\">look-ahead</a> features.</p>\",\"frontmatter\":{\"path\":\"/graphile-build-pg/introduction/\",\"title\":\"Graphile-Build-PG Introduction\"}},\"nav\":{\"edges\":[{\"node\":{\"id\":\"/Users/benjiegillam/Documents/graphile.com/src/data/nav.json absPath of file [0] >>> JSON\",\"name\":\"graphile-build\",\"sections\":[{\"id\":\"guides\",\"title\":\"Guides\"},{\"id\":\"library-reference\",\"title\":\"Library Reference\"},{\"id\":\"plugin-reference\",\"title\":\"Plugin Reference\"}],\"pages\":[{\"to\":\"/graphile-build/getting-started/\",\"title\":\"Getting Started\",\"sectionId\":\"guides\"},{\"to\":\"/graphile-build/plugins/\",\"title\":\"Plugins\",\"sectionId\":\"guides\"},{\"to\":\"/graphile-build/hooks/\",\"title\":\"Hooks\",\"sectionId\":\"guides\"},{\"to\":\"/graphile-build/look-ahead/\",\"title\":\"Look Ahead\",\"sectionId\":\"guides\"},{\"to\":\"/graphile-build/graphile-build/\",\"title\":\"graphile-build\",\"sectionId\":\"library-reference\"},{\"to\":\"/graphile-build/schema-builder/\",\"title\":\"SchemaBuilder\",\"sectionId\":\"library-reference\"},{\"to\":\"/graphile-build/plugin-options/\",\"title\":\"Options\",\"sectionId\":\"library-reference\"},{\"to\":\"/graphile-build/default-plugins/\",\"title\":\"Default Plugins\",\"sectionId\":\"library-reference\"},{\"to\":\"/graphile-build/all-hooks/\",\"title\":\"All Hooks\",\"sectionId\":\"plugin-reference\"},{\"to\":\"/graphile-build/build-object/\",\"title\":\"Build Object\",\"sectionId\":\"plugin-reference\"},{\"to\":\"/graphile-build/context-object/\",\"title\":\"Context Object\",\"sectionId\":\"plugin-reference\"}]}},{\"node\":{\"id\":\"/Users/benjiegillam/Documents/graphile.com/src/data/nav.json absPath of file [1] >>> JSON\",\"name\":\"graphile-build-pg\",\"sections\":[{\"id\":\"guides\",\"title\":\"Guides\"}],\"pages\":[{\"to\":\"/graphile-build-pg/introduction/\",\"title\":\"Introduction\",\"sectionId\":\"guides\"}]}}]}},\"pathContext\":{\"layout\":\"page\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/graphile-build-pg-introduction.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/graphile-build-pg-introduction.json\n// module chunks = 14459479492863674000"],"sourceRoot":""}