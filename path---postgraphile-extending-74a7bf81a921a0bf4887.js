webpackJsonp([96033804396543090],{"./node_modules/json-loader/index.js!./.cache/json/postgraphile-extending.json":function(n,s){n.exports={data:{remark:{html:'<h2 id="extending-postgraphile"><a href="#extending-postgraphile" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Extending PostGraphile</h2>\n<p>PostGraphile\'s schema generator is built from a number of <a href="/graphile-build/plugins/">Graphile Build plugins</a>. The plugins can be found here:</p>\n<p><a href="https://github.com/graphile/graphile-build/tree/master/packages/graphile-build-pg/src/plugins">https://github.com/graphile/graphile-build/tree/master/packages/graphile-build-pg/src/plugins</a></p>\n<p>These plugins introduce small amounts of functionality, and build upon each\nother. The order in which the plugins are loaded is significant, and can be\nfound from the <code>defaultPlugins</code> export in\n<a href="https://github.com/graphile/graphile-build/blob/master/packages/graphile-build-pg/src/index.js"><code>src/index.js</code></a>\nof the <code>graphile-build-pg</code> module.</p>\n<p>You can extend PostGraphile\'s GraphQL schema by appending to, prepending to or\neven replacing the list of plugins used to build the schema. Graphile Build\nplugins are built on top of the <a href="http://graphql.org/graphql-js/">GraphQL reference JS\nimplementation</a>, so it is recommended that you\nhave familiarity with that before attempting to add your own plugins.</p>\n<h3 id="loading-additional-plugins"><a href="#loading-additional-plugins" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Loading additional plugins</h3>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>postgraphile --append-plugins `pwd`/add-http-bin-plugin.js -c postgres://localhost/mydb</code></pre>\n      </div>\n<p>If you\'re using the CLI you can use option <code>--append-plugins</code> to load additonal\nplugins.  You specify a comma separated list of module specs. A module spec is\na path to a JS file to load, optionally followed by a colon and the name of the\nexport (you must omit this if the function is exported via\n<code>module.exports = function MyPlugin(...){...}</code>). E.g.</p>\n<ul>\n<li><code>--append-plugins my-npm-module</code> (requires <code>module.exports = function NpmPlugin(...) {...}</code>)</li>\n<li><code>--append-plugins /path/to/local/module.js:MyPlugin</code> (requires <code>exports.MyPlugin = function MyPlugin(...) {...}</code>)</li>\n</ul>\n<p>If you\'re using postgraphile as a library you can instead us the appendPlugins\noption which is simply an array of functions (you perform your own requiring!)</p>\n<p>Remember: multiple versions of graphql in your <code>node_modules</code> will cause\nproblems; so we recommend using the <code>graphql</code> object that\'s available on the\n<code>Build</code> object (second argument to hooks).</p>\n<h3 id="adding-root-querymutation-fields"><a href="#adding-root-querymutation-fields" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Adding root query/mutation fields</h3>\n<p>A common request is to add additional root-level fields to your schema, for\nexample to integrate external services. To do this we must add a\n\'GraphQLObjectType:fields\' hook and then add our new field:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment" spellcheck="true">// add-http-bin-plugin.js</span>\n<span class="token keyword">const</span> fetch <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"node-fetch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">AddHttpBinPlugin</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> <span class="token punctuation">{</span> pgExtendedTypes <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  builder<span class="token punctuation">.</span><span class="token function">hook</span><span class="token punctuation">(</span>\n    <span class="token string">"GraphQLObjectType:fields"</span><span class="token punctuation">,</span>\n    <span class="token punctuation">(</span>\n      fields<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// Input object - the fields for this GraphQLObjectType</span>\n      <span class="token punctuation">{</span> extend<span class="token punctuation">,</span> getTypeByName <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// Build object - handy utils</span>\n      <span class="token punctuation">{</span> scope<span class="token punctuation">:</span> <span class="token punctuation">{</span> isRootQuery <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Context object - used for filtering</span>\n    <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRootQuery<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment" spellcheck="true">// This isn\'t the object we want to modify:</span>\n        <span class="token comment" spellcheck="true">// return the input object unmodified</span>\n        <span class="token keyword">return</span> fields<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment" spellcheck="true">// We don\'t want to introduce a new JSON type as that will clash,</span>\n      <span class="token comment" spellcheck="true">// so let\'s find the JSON type that other fields use:</span>\n      <span class="token keyword">const</span> JSONType <span class="token operator">=</span> <span class="token function">getTypeByName</span><span class="token punctuation">(</span><span class="token string">"JSON"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">return</span> <span class="token function">extend</span><span class="token punctuation">(</span>fields<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        httpBinHeaders<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          type<span class="token punctuation">:</span> JSONType<span class="token punctuation">,</span>\n          <span class="token keyword">async</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://httpbin.org/headers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>pgExtendedTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token comment" spellcheck="true">// This setting is enabled through postgraphile\'s</span>\n              <span class="token comment" spellcheck="true">// `--dynamic-json` option, if enabled return JSON:</span>\n              <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n              <span class="token comment" spellcheck="true">// If Dynamic JSON is not enabled, we want a JSON string instead</span>\n              <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> AddHttpBinPlugin<span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>(If you wanted to add a mutation you\'d use <code>isRootMutation</code> rather than <code>isRootQuery</code>.)</p>\n<p>We can then load our plugin into PostGraphile via:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>postgraphile --append-plugins `pwd`/add-http-bin-plugin.js -c postgres://localhost/mydb</code></pre>\n      </div>\n<p>Note that the return types of added fields do not need to be implemented via\nGraphile Build\'s <code>newWithHooks</code> - you can use any GraphQL objects - but if you\ndon\'t use <code>newWithHooks</code> then you won\'t be able to hook these added objects.</p>\n<h3 id="wrapping-an-existing-resolver"><a href="#wrapping-an-existing-resolver" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Wrapping an existing resolver</h3>\n<p>Sometimes you might want to override what an existing field does. Due to the\nway that PostGraphile works (where the root Query field resolvers are the only\nones who perform SQL queries) this is generally most useful at the top level.</p>\n<p>The following example modifies the \'createLink\' mutation so that it performs\nsome additional validation (thrown an error if the link\'s <code>title</code> is too short)\nand performs an action after the link has been saved. You could use a plugin\nlike this to achieve many different tasks, including emailing a user after\ntheir account is created or logging failed authentication attempts.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">performAnotherTask</span><span class="token punctuation">(</span>linkId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`We created link </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>linkId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">CreateLinkWrapPlugin</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  builder<span class="token punctuation">.</span><span class="token function">hook</span><span class="token punctuation">(</span>\n    <span class="token string">"GraphQLObjectType:fields:field"</span><span class="token punctuation">,</span>\n    <span class="token punctuation">(</span>\n      field<span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> pgSql<span class="token punctuation">:</span> sql <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> scope<span class="token punctuation">:</span> <span class="token punctuation">{</span> isRootMutation<span class="token punctuation">,</span> fieldName <span class="token punctuation">}</span><span class="token punctuation">,</span> addArgDataGenerator <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRootMutation <span class="token operator">||</span> fieldName <span class="token operator">!==</span> <span class="token string">"createLink"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment" spellcheck="true">// If it\'s not the root mutation, or the mutation isn\'t the \'createLink\'</span>\n        <span class="token comment" spellcheck="true">// mutation then we don\'t want to modify it - so return the input object</span>\n        <span class="token comment" spellcheck="true">// unmodified.</span>\n        <span class="token keyword">return</span> field<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment" spellcheck="true">// We\'re going to need link.id for our `performAnotherTask`; so we\'re going</span>\n      <span class="token comment" spellcheck="true">// to abuse addArgDataGenerator to make sure that this field is ALWAYS</span>\n      <span class="token comment" spellcheck="true">// requested, even if the user doesn\'t specify it. We\'re careful to alias</span>\n      <span class="token comment" spellcheck="true">// the result to a field that begins with `__` as that\'s forbidden by</span>\n      <span class="token comment" spellcheck="true">// GraphQL and thus cannot clash with a user\'s fields.</span>\n      <span class="token function">addArgDataGenerator</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        pgQuery<span class="token punctuation">:</span> queryBuilder <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n          queryBuilder<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>\n            <span class="token comment" spellcheck="true">// Select this value from the result of the INSERT:</span>\n            sql<span class="token punctuation">.</span>query<span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>queryBuilder<span class="token punctuation">.</span><span class="token function">getTableAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.id`</span></span><span class="token punctuation">,</span>\n            <span class="token comment" spellcheck="true">// And give it this name in the result data:</span>\n            <span class="token string">"__createdRecordId"</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token comment" spellcheck="true">// It\'s possible that `resolve` isn\'t specified on a field, so in that case</span>\n      <span class="token comment" spellcheck="true">// we fall back to a default resolver.</span>\n      <span class="token keyword">const</span> defaultResolver <span class="token operator">=</span> obj <span class="token operator">=</span><span class="token operator">></span> obj<span class="token punctuation">[</span>fieldName<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n      <span class="token comment" spellcheck="true">// Extract the old resolver from `field`</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> resolve<span class="token punctuation">:</span> oldResolve <span class="token operator">=</span> defaultResolver<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span> <span class="token operator">=</span> field<span class="token punctuation">;</span>\n\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token comment" spellcheck="true">// Copy over everything except \'resolve\'</span>\n        <span class="token operator">...</span>rest<span class="token punctuation">,</span>\n\n        <span class="token comment" spellcheck="true">// Add our new resolver which wraps the old resolver</span>\n        <span class="token keyword">async</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token operator">...</span>resolveParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment" spellcheck="true">// Perform some validation (or any other action you want to do before</span>\n          <span class="token comment" spellcheck="true">// calling the old resolver)</span>\n          <span class="token keyword">const</span> RESOLVE_ARGS_INDEX <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n          <span class="token keyword">const</span> <span class="token punctuation">{</span> input<span class="token punctuation">:</span> <span class="token punctuation">{</span> link<span class="token punctuation">:</span> <span class="token punctuation">{</span> title <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> resolveParams<span class="token punctuation">[</span>\n            RESOLVE_ARGS_INDEX\n          <span class="token punctuation">]</span><span class="token punctuation">;</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>title<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Title is too short!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n\n          <span class="token comment" spellcheck="true">// Call the old resolver (you SHOULD NOT modify the arguments it</span>\n          <span class="token comment" spellcheck="true">// receives unless you also manipulate the AST it gets passed as the</span>\n          <span class="token comment" spellcheck="true">// 4th argument; which is quite a lot of effort) and store the result.</span>\n          <span class="token keyword">const</span> oldResolveResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">oldResolve</span><span class="token punctuation">(</span><span class="token operator">...</span>resolveParams<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n          <span class="token comment" spellcheck="true">// Perform any tasks we want to do after the record is created.</span>\n          <span class="token keyword">await</span> <span class="token function">performAnotherTask</span><span class="token punctuation">(</span>oldResolveResult<span class="token punctuation">.</span>data<span class="token punctuation">.</span>__createdRecordId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n          <span class="token comment" spellcheck="true">// Finally return the result.</span>\n          <span class="token keyword">return</span> oldResolveResult<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h3 id="removing-things-from-the-schema"><a href="#removing-things-from-the-schema" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Removing things from the schema</h3>\n<p>The best way to remove a class of things from the schema is simply to remove\nthe plugin that adds them; for example if you no longer wanted to allow\nordering by all the columns of a table (i.e. only allow ordering by the primary\nkey) you could omit\n<a href="https://github.com/graphile/graphile-build/blob/master/packages/graphile-build-pg/src/plugins/PgOrderAllColumnsPlugin.js">PgOrderAllColumnsPlugin</a>.\nIf you didn\'t want computed columns added you could omit\n<a href="https://github.com/graphile/graphile-build/blob/master/packages/graphile-build-pg/src/plugins/PgComputedColumnsPlugin.js">PgComputedColumnsPlugin</a>.</p>\n<p>However, sometimes you need more surgical precision, and you only want to\nremove one specific thing. To achieve this you need to add a hook to the\nthing that owns the thing you wish to remove - for example if you\nwant to remove a field <code>bar</code> from an object type <code>Foo</code> you could hook\n<code>GraphQLObjectType:fields</code> and return the set of fields less the one you want\nremoved.</p>\n<p>Here\'s an example of a plugin generator you could use to generate plugins to\nremove individual fields. You could write this much more efficiently!</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> omit <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"lodash/omit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">removeFieldPluginGenerator</span><span class="token punctuation">(</span>objectName<span class="token punctuation">,</span> fieldName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    builder<span class="token punctuation">.</span><span class="token function">hook</span><span class="token punctuation">(</span><span class="token string">"GraphQLObjectType:fields"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>fields<span class="token punctuation">,</span> _<span class="token punctuation">,</span> <span class="token punctuation">{</span> Self <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>Self<span class="token punctuation">.</span>name <span class="token operator">!==</span> objectName<span class="token punctuation">)</span> <span class="token keyword">return</span> fields<span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token function">omit</span><span class="token punctuation">(</span>fields<span class="token punctuation">,</span> <span class="token punctuation">[</span>fieldName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment" spellcheck="true">// For debugging:</span>\n  fn<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token template-string"><span class="token string">`RemoveFieldPlugin:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>objectName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fieldName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> fn<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> RemoveFooDotBarPlugin <span class="token operator">=</span> <span class="token function">removeFieldPluginGenerator</span><span class="token punctuation">(</span><span class="token string">"Foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> RemoveFooDotBarPlugin<span class="token punctuation">;</span>\n</code></pre>\n      </div>',frontmatter:{path:"/postgraphile/extending/",title:"Extending PostGraphile"}},nav:{edges:[{node:{id:"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [0] >>> JSON",name:"graphile-build",sections:[{id:"guides",title:"Overview"},{id:"library-reference",title:"Using the Library"},{id:"plugin-reference",title:"Building a Plugin"}],pages:[{to:"/graphile-build/getting-started/",title:"Getting Started",sectionId:"guides"},{to:"/graphile-build/plugins/",title:"Plugins",sectionId:"guides"},{to:"/graphile-build/hooks/",title:"Hooks",sectionId:"guides"},{to:"/graphile-build/look-ahead/",title:"Look Ahead",sectionId:"guides"},{to:"/graphile-build/graphile-build/",title:"graphile-build",sectionId:"library-reference"},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"library-reference"},{to:"/graphile-build/plugin-options/",title:"Options",sectionId:"library-reference"},{to:"/graphile-build/default-plugins/",title:"Default Plugins",sectionId:"library-reference"},{to:"/graphile-build/omitting-plugins/",title:"Omitting Plugins",sectionId:"guides"},{to:"/graphile-build/all-hooks/",title:"All Hooks",sectionId:"plugin-reference"},{to:"/graphile-build/build-object/",title:"Build Object",sectionId:"plugin-reference"},{to:"/graphile-build/context-object/",title:"Context Object",sectionId:"plugin-reference"},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"plugin-reference"}]}},{node:{id:"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [1] >>> JSON",name:"postgraphile",sections:[{id:"overview",title:"Overview"},{id:"guides",title:"Guides"},{id:"usage",title:"Usage"}],pages:[{to:"/postgraphile/introduction/",title:"Introduction",sectionId:"overview"},{to:"/postgraphile/evaluating/",title:"Evaluating for your Project",sectionId:"guides"},{to:"/postgraphile/requirements/",title:"Requirements",sectionId:"overview"},{to:"/postgraphile/performance/",title:"Performance",sectionId:"overview"},{to:"/postgraphile/connections/",title:"Connections",sectionId:"overview"},{to:"/postgraphile/filtering/",title:"Filtering",sectionId:"overview"},{to:"/postgraphile/relations/",title:"Relations",sectionId:"overview"},{to:"/postgraphile/crud-mutations/",title:"CRUD Mutations",sectionId:"overview"},{to:"/postgraphile/computed-columns/",title:"Computed Columns",sectionId:"overview"},{to:"/postgraphile/custom-queries/",title:"Custom Queries",sectionId:"overview"},{to:"/postgraphile/custom-mutations/",title:"Custom Mutations",sectionId:"overview"},{to:"/postgraphile/security/",title:"Security",sectionId:"overview"},{to:"/postgraphile/introspection/",title:"Introspection",sectionId:"overview"},{to:"/postgraphile/extending/",title:"Extending PostGraphile",sectionId:"overview"},{to:"/postgraphile/jwt-guide/",title:"PostGraphile JWT Guide",sectionId:"guides"
},{to:"/postgraphile/default-role/",title:"The Default Role",sectionId:"guides"},{to:"/postgraphile/procedures/",title:"PostgreSQL Procedures",sectionId:"guides"},{to:"/postgraphile/postgresql-schema-design/",title:"PostgreSQL Schema Design",sectionId:"guides"},{to:"/postgraphile/postgresql-indexes/",title:"PostgreSQL Indexes",sectionId:"guides"},{to:"/postgraphile/usage-cli/",title:"CLI Usage",sectionId:"usage"},{to:"/postgraphile/usage-library/",title:"Library Usage",sectionId:"usage"},{to:"/postgraphile/usage-schema/",title:"Schema-only Usage",sectionId:"usage"}]}},{node:{id:"/Users/benjiegillam/Documents/graphile.org/src/data/nav.json absPath of file [2] >>> JSON",name:"graphile-build-pg",sections:[{id:"usage",title:"Usage"}],pages:[{to:"/postgraphile/settings/",title:"Settings",sectionId:"usage"}]}}]}},pathContext:{layout:"page"}}}});
//# sourceMappingURL=path---postgraphile-extending-74a7bf81a921a0bf4887.js.map