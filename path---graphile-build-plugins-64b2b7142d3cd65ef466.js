webpackJsonp([0x7c30354499c20000],{"./node_modules/json-loader/index.js!./.cache/json/graphile-build-plugins.json":function(n,e){n.exports={data:{remark:{html:'<h2 id="plugins"><a href="#plugins" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Plugins</h2>\n<p>Almost everything in Graphile-Build is accomplished through plugins. You can\nadd plugins, remove plugins, even replace the entire stack if you so desire.</p>\n<h3 id="loading-plugins"><a href="#loading-plugins" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Loading Plugins</h3>\n<p>Graphile-Build plugins are simple functions that interact with <a href="/graphile-build/schema-builder/">the\n<code>SchemaBuilder</code></a>, for example adding hooks.\nWhen you perform <a href="/graphile-build/graphile-build/"><code>buildSchema(plugins)</code></a> we\ncreate a new <code>SchemaBuilder</code> instance and then load each of the plugins against\nit.</p>\n<p>The plugins are loaded in the order specified, if a plugin returns a Promise\n(e.g. an asynchronous plugin) then we will wait for that promise to resolve\nbefore continuing to load the next plugin, otherwise we will assume the plugin\nis synchronous.</p>\n<p>An example of a plugin that does nothing is this no-op plugin:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">NoopPlugin</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I don\'t do anything"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>which you can load into your schema like so:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> buildSchema<span class="token punctuation">,</span> defaultPlugins <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"graphile-build"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> printSchema <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"graphql/utilities"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">buildSchema</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>defaultPlugins<span class="token punctuation">,</span> NoopPlugin<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>schema <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">printSchema</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<details>\n<summary>View output</summary>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>I don\'t do anything\n# An object with a globally unique `ID`.\ninterface Node {\n  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.\n  id: ID!\n}\n\n# The root query type which gives access points into the data universe.\ntype Query implements Node {\n  # Exposes the root query type nested one level down. This is helpful for Relay 1\n  # which can only query top level fields if they are in a particular form.\n  query: Query!\n\n  # The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.\n  id: ID!\n\n  # Fetches an object given its globally unique `ID`.\n  node(\n    # The globally unique `ID`.\n    id: ID!\n  ): Node\n}</code></pre>\n      </div>\n</details>\n<h3 id="plugin-arguments"><a href="#plugin-arguments" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Plugin arguments</h3>\n<p>Plugins are called with just two arguments:</p>\n<ul>\n<li><code>builder</code> - the instance of <a href="/graphile-build/graphile-build/"><code>SchemaBuilder</code></a> the plugin is being loaded against</li>\n<li><code>options</code> - <a href="/graphile-build/plugin-options/">the options</a> that were passed to <code>buildSchema(plugins, options)</code> (or <code>getBuilder(plugins, options)</code>)</li>\n</ul>\n<h3 id="plugin-actions"><a href="#plugin-actions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Plugin actions</h3>\n<p>Whilst a plugin is being executed it can perform actions on the <code>builder</code>\nobject (its first argument). For a list of the functions and what they do, see\n<a href="/graphile-build/schema-builder/">SchemaBuilder</a>.</p>\n<p>The most common actions are:</p>\n<ul>\n<li>Register a hook: <code>builder.hook(hookName, hookFunction)</code>; see <a href="/graphile-build/hooks/">Hooks</a></li>\n<li>Add watch-mode event listeners: <code>builder.registerWatcher(watcher, unwatcher)</code>; see <a href="/graphile-build/schema-builder/">SchemaBuilder</a></li>\n</ul>',frontmatter:{path:"/graphile-build/plugins/",title:"Plugins"}},nav:{edges:[{node:{id:"/Users/benjiegillam/Documents/graphile.com/src/data/nav.json absPath of file [0] >>> JSON",name:"graphile-build",sections:[{id:"guides",title:"Guides"},{id:"library-reference",title:"Library Reference"},{id:"plugin-reference",title:"Plugin Reference"}],pages:[{to:"/graphile-build/getting-started/",title:"Getting Started",sectionId:"guides"},{to:"/graphile-build/plugins/",title:"Plugins",sectionId:"guides"},{to:"/graphile-build/hooks/",title:"Hooks",sectionId:"guides"},{to:"/graphile-build/look-ahead/",title:"Look Ahead",sectionId:"guides"},{to:"/graphile-build/graphile-build/",title:"graphile-build",sectionId:"library-reference"},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"library-reference"},{to:"/graphile-build/plugin-options/",title:"Options",sectionId:"library-reference"},{to:"/graphile-build/default-plugins/",title:"Default Plugins",sectionId:"library-reference"},{to:"/graphile-build/all-hooks/",title:"All Hooks",sectionId:"plugin-reference"},{to:"/graphile-build/build-object/",title:"Build Object",sectionId:"plugin-reference"},{to:"/graphile-build/context-object/",title:"Context Object",sectionId:"plugin-reference"}]}},{node:{id:"/Users/benjiegillam/Documents/graphile.com/src/data/nav.json absPath of file [1] >>> JSON",name:"graphile-build-pg",sections:[{id:"guides",title:"Guides"}],pages:[{to:"/graphile-build-pg/introduction/",title:"Introduction",sectionId:"guides"}]}}]}},pathContext:{layout:"page"}}}});
//# sourceMappingURL=path---graphile-build-plugins-64b2b7142d3cd65ef466.js.map