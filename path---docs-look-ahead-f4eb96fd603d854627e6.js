webpackJsonp([0xcd39908a1d5d3800],{"./node_modules/json-loader/index.js!./.cache/json/docs-look-ahead.json":function(e,a){e.exports={data:{remark:{html:'<h2 id="advanced-look-ahead"><a href="#advanced-look-ahead" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Advanced: Look Ahead</h2>\n<p>Traditionally in GraphQL APIs DataLoader is used to batch requests to minimize\nthe impact of N+1 queries. DataLoader can be use with GraphQL-Build in the same\nway as it is with GraphQL. However, sometimes DataLoader isn\'t the best\napproach for your system, so GraphQL-Build provides a powerful Look-Ahead\nfunctionality you can use to optimize your GraphQL queries. This is\nparticularly well suited to environments that allow you to specify complex\nstructures to be returned (such as databases or other GraphQL APIs), but is\ngeneric enough that it can be used for many use-cases.</p>\n<h3 id="seeing-which-sub-fields-were-requested"><a href="#seeing-which-sub-fields-were-requested" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Seeing which sub-fields were requested</h3>\n<p>The <a href="http://graphql.org/graphql-js/type/#graphqlobjecttype"><code>resolve</code> method in\nGraphQL</a> is actually\ncalled with 4 arguments:</p>\n<ul>\n<li>source - the data provided by the parent field</li>\n<li>args - the arguments passed to the field in the query</li>\n<li>context - the context object used throughout the resolvers</li>\n<li>resolveInfo - an instance of GraphQLResolveInfo</li>\n</ul>\n<p>This 4th argument is the one we\'re interested in because it contains a number\nof goodies. But some of these are hard to digest, so we give you some helpers...</p>\n<h5 id="parseresolveinforesolveinfo"><a href="#parseresolveinforesolveinfo" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>parseResolveInfo(resolveInfo)</code></h5>\n<p>Will take the AST from the GraphQLResolveInfo and extract from it a nested\nobject consisting of:</p>\n<ul>\n<li>name - the name of the current field</li>\n<li>alias - the alias the current field was requested as</li>\n<li>args - the arguments passed to the field in the query</li>\n<li>fieldsByTypeName - the sub-fields that were requested on the current object\nbroken down by the names of the GraphQL types that could be returned.</li>\n</ul>\n<p>Because GraphQL supports Union and other complex types, it\'s possible to\nrequest different sub-fields depending on the type of data that\'s returned from\na field, hence <code>fieldsByTypeName</code>. If you happen to know the type that\'s going\nto be returned then you can simplify with the next method...</p>\n<p>From <a href="https://github.com/postgraphql/graphql-build/tree/master/packages/graphql-parse-resolve-info#parseresolveinforesolveinfo"><code>graphql-parse-resolve-info</code></a></p>\n<p>TODO: example</p>\n<h5 id="simplifyparsedresolveinfofragmentwithtypeparsedresolveinfofragment-graphqltype"><a href="#simplifyparsedresolveinfofragmentwithtypeparsedresolveinfofragment-graphqltype" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>simplifyParsedResolveInfoFragmentWithType(parsedResolveInfoFragment, graphQLType)</code></h5>\n<p>If you know the precise named type that your field will return you can pass the\nresult of <code>parseResolveInfo(resolveInfo)</code> to this method along with the named\ntype <code>graphQLType</code> and we\'ll return a similar object with an additional\n<code>fields</code> property that are only the fields that are compatible with\nthe <code>graphQLType</code>.</p>\n<p>From <a href="https://github.com/postgraphql/graphql-build/tree/master/packages/graphql-parse-resolve-info#simplifyparsedresolveinfofragmentwithtypeparsedresolveinfofragment-returntype"><code>graphql-parse-resolve-info</code></a></p>\n<p>TODO: example</p>\n<h3 id="declaring-meta-data-associated-with-a-field"><a href="#declaring-meta-data-associated-with-a-field" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Declaring meta-data associated with a field</h3>\n<h3 id="determining-what-meta-data-requested-subfields-have-specified"><a href="#determining-what-meta-data-requested-subfields-have-specified" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Determining what meta-data requested subfields have specified</h3>\n<h5 id="generatedatafortypetype-parsedresolveinfofragment"><a href="#generatedatafortypetype-parsedresolveinfofragment" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>generateDataForType(type, parsedResolveInfoFragment)</code></h5>\n<p>For performance optimisations</p>\n<p>TODO: document</p>',frontmatter:{path:"/docs/look-ahead/",title:"Look Ahead"}},nav:{edges:[{node:{id:"/Users/benjiegillam/Documents/graphql-build-website/src/data/nav.json absPath of file [0] >>> JSON",to:"/docs/getting-started/",title:"Getting Started"}},{node:{id:"/Users/benjiegillam/Documents/graphql-build-website/src/data/nav.json absPath of file [1] >>> JSON",to:"/docs/plugins/",title:"Plugins"}},{node:{id:"/Users/benjiegillam/Documents/graphql-build-website/src/data/nav.json absPath of file [2] >>> JSON",to:"/docs/hooks/",title:"Hooks"}},{node:{id:"/Users/benjiegillam/Documents/graphql-build-website/src/data/nav.json absPath of file [3] >>> JSON",to:"/docs/look-ahead/",title:"Look Ahead"}}]}},pathContext:{layout:"page"}}}});
//# sourceMappingURL=path---docs-look-ahead-f4eb96fd603d854627e6.js.map