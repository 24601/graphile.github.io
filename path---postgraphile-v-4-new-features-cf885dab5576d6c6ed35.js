webpackJsonp([57656932303775],{406:function(e,t){e.exports={data:{remark:{html:'<h2 id="v4-feature-guide"><a href="#v4-feature-guide" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>v4 Feature Guide</h2>\n<p>Though the entry point to v4 is almost identical to v3 (with a few additional\noptions!), the guts of PostGraphile have been re-written from the ground up -\nabout 80% of the codebase has been replaced with smaller dependencies in the\nform of our new plugin-base schema generator.</p>\n<p>You can read more about migrating from v3 to v4 in our migration guide (link at\nbottom).</p>\n<h4 id="performance-goodbye-n1-queries"><a href="#performance-goodbye-n1-queries" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Performance: goodbye N+1 queries!</h4>\n<p>The performance of PostGraphile has massively increased over PostGraphQL v3;\nand the memory usage has decreased too! If you run your database and\nPostGraphile on different servers then you should find query times are improved\neven further by the (significant!) reduction in the number of SQL queries that\nwe generate.</p>\n<p>I created an <a href="https://github.com/graphile/postgraphile_changes/blob/master/db/reset.sh">example database\nschema</a>\nbased on the forum example (but with some bells and whistles), filled it with\nsome data, and then benchmarked a <a href="https://github.com/graphile/postgraphile_changes/tree/master/graphql">number of queries</a>\nagainst it (running everything locally on my machine (a 2011 iMac), using the\nlatest LTS release of Node.js for both v3 and v4).</p>\n<p>The most extreme improvements came in the form of\n<a href="https://github.com/graphile/postgraphile_changes/blob/master/graphql/ThreadViewWithEmoji.graphql">ThreadViewWithEmoji.graphql</a>.\nThis is a query that emulates loading the data to show a single thread page\nwithin a complex forum - the thread itself (and its author), plus the first 20\nposts within that thread, their authors, and the first 100 emoji responses that\neach of the posts have received. It uses a computed column for the user\n<code>fullName</code>s, but other than that it\'s just regular relations.</p>\n<ul>\n<li>\n<p>concurrency: 1</p>\n<ul>\n<li>v3: 644ms average latency, 1.51 req/s (peaking at 416MB RAM)</li>\n<li>v4: 58ms average latency, 17.0 req/s (peaking at 98MB RAM)</li>\n<li>Summary: 1030% more requests/second, 76% reduction in RAM usage, and less than 1/10th the latency</li>\n</ul>\n</li>\n<li>\n<p>concurrency: 10</p>\n<ul>\n<li>v3: 5477ms average latency, 1.77 req/s (peaking at 694MB RAM)</li>\n<li>v4: 341ms average latency, 29.55 req/s (peaking at 98MB RAM)</li>\n<li>Summary: 1570% more requests/second, 85.9% reduction in RAM usage, and nearly 1/20th the latency</li>\n</ul>\n</li>\n<li>\n<p>concurrency: 100</p>\n<ul>\n<li>v3: 63999ms average latency, 1.56 req/s (peaking at 1.5GB RAM)</li>\n<li>v4: 2805ms average latency, 35.2 req/s (peaking at 114MB RAM)</li>\n<li>Summary: 2160% more requests/second, 92.5% reduction in RAM usage, and less than 1/20th the latency</li>\n</ul>\n</li>\n</ul>\n<p>Simpler queries still reveal good performance improvements. One such example is\n<a href="https://github.com/graphile/postgraphile_changes/blob/master/graphql/ProfileView.graphql">ProfileView.graphql</a>\nwhich emulates loading the data to show a single forum user\'s profile - their\npersonal details, the latest post they\'ve written (and the thread it\'s in) and\na total count of all posts they\'ve written. At a concurrency level of 1, v4\nachieves 195 req/s vs v3\'s 118 req/s (both execute with sub-10ms latency). At\nconcurrency 100 v4 achieves a whopping 407 req/s with average latency sub-250ms\n(v3 achieves a pretty good 232 req/s at ~430ms average latency).</p>\n<p>I think this shows that PostGraphile v4 is capable of scaling better than v3\nwhen queries are complex and that\'s without spending any time actually\noptimising the generated SQL queries yet - I think we\'ll be able to improve\nperformance quite a bit further still.</p>\n<h4 id="plugins-plugins-plugins"><a href="#plugins-plugins-plugins" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Plugins plugins plugins</h4>\n<p>The GraphQL schema that PostGraphile generates (and even the introspection it\nperforms on the database!) is now constructed out of a number of\n<code>graphile-build</code> plugins. <code>graphile-build</code> was invented for PostGraphile\n(though it is also suitable for use in other GraphQL projects) to enable easy\nextensibility of the core system. This means we can now have community led\nexperiments such as\n<a href="https://github.com/mattbretl/postgraphile-plugin-connection-filter">postgraphile-plugin-connection-filter</a>\n(which adds a much more powerful filter engine to PostGraphile that the built in\n<code>condition</code> argument) without having to fork core. These plugins can be\nmaintained separately, and might be merged into core at a later point.</p>\n<p>It\'s also possible to turn off, or even replace, built in plugins - and of\ncourse to add your own. So you can really customise PostGraphile now!</p>\n<p>Be warned though, writing a plugin is a fair undertaking right now - it\'s going\nto take a while for the right interfaces and helpers to appear, so right now\nyou\'re wrestling with the raw API which can be pretty gnarly!</p>\n<h4 id="order-order"><a href="#order-order" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Order! Order!</h4>\n<p>Connections now support ordering by an array of columns rather than just one -\na much requested feature!</p>\n<h4 id="column-level-select-grants-may-now-work"><a href="#column-level-select-grants-may-now-work" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Column-level SELECT grants may now work</h4>\n<p>As part of the performance work, we now select only the fields we need (and we also inline computed columns, in case you\'re interested!). As such, if you have column-level SELECT grants you may find that this works with PostGraphile now. Note, however, that I do not recommend using these - instead I recommend splitting your concerns into multiple tables and use the one-to-one relationship feature to link them.</p>\n<h4 id="one-to-one-relationships"><a href="#one-to-one-relationships" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>One-to-one relationships</h4>\n<p>If you have tables like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> foo <span class="token punctuation">(</span>\n  id <span class="token keyword">serial</span> <span class="token keyword">primary</span> <span class="token keyword">key</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">create</span> <span class="token keyword">table</span> bar <span class="token punctuation">(</span>\n  foo_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">references</span> foo<span class="token punctuation">,</span>\n  name <span class="token keyword">text</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>in V3 the one-to-one nature of the relationship was not accounted for, so you would have to query like:</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code><span class="token punctuation">{</span>\n  fooById<span class="token punctuation">(</span><span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment"># Due to this being one-to-one, at most one row would ever be returned,</span>\n    <span class="token comment"># however we didn\'t account for this and returned a connection anyway</span>\n    barsByFooId <span class="token punctuation">{</span>\n      edges <span class="token punctuation">{</span>\n        node <span class="token punctuation">{</span>\n          name\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>with v4\'s native support for these relations you can now use this much neater query:</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code><span class="token punctuation">{</span>\n  fooById<span class="token punctuation">(</span><span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    barByFooId <span class="token punctuation">{</span>\n      name\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>No more unnecessary indirection!</p>\n<p>Don\'t worry though, we still have the old relation too, we\'ve just deprecated it.</p>\n<h4 id="cache-invalidation-serverless"><a href="#cache-invalidation-serverless" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Cache invalidation (Serverless)</h4>\n<p>People have been running PostGraphile on AWS Lambda and similar environments, and one of the common issues that I hear is that boot up time is too slow. V4 addresses this in two ways:</p>\n<ol>\n<li>we offer the <code>--read-cache</code> and <code>--write-cache</code> options that allow plugins (including the introspection plugin!) to cache work that they do up front - note that we do <em>not</em> handle invalidating this cache, so that remains your responsibility.</li>\n<li>by changing the minimum requirements of PostGraphile to Node.js 8.6 we can make use of native async/await support, resulting in much less code for Node to parse and execute.</li>\n</ol>\n<p>If you want to improve things even further, you should consider bundling your server dependencies into one JS file with something like <code>webpack</code> so that Node spends less time looking at the filesystem!</p>\n<h4 id="naming-things"><a href="#naming-things" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Naming things</h4>\n<p>You no longer have to trust us to come up with the best names for your fields. You can override all the names by supplying your own inflector. The interface around this is still coming to fruition, but the functionality is there!</p>\n<p><a href="https://github.com/graphile/graphile-build/blob/master/packages/graphile-build-pg/src/inflections.js">https://github.com/graphile/graphile-build/blob/master/packages/graphile-build-pg/src/inflections.js</a></p>\n<h4 id="better-support-better-errors"><a href="#better-support-better-errors" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Better support, better errors</h4>\n<ul>\n<li>Many previously invalid enums are now made valid</li>\n<li>When the introspection results in an empty name, an error is thrown explaining why</li>\n<li>Support <code>point</code> type</li>\n<li>When a name clashes for some reason, an error is thrown detailing what the field was, and on what type it is.</li>\n<li>When you specify <code>--schema</code> and that schema doesn\'t exist, you will be warned</li>\n<li>Tables that end in <code>_input</code> or <code>_patch</code> are renamed to FooInputRecord or similar to avoid clashes with mutation types on other tables</li>\n</ul>\n<h4 id="deprecation--smart-comments"><a href="#deprecation--smart-comments" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Deprecation / smart comments</h4>\n<p>It\'s now possible to deprecate fields, tables, functions, etc by adding a "smart comment"; e.g.</p>\n<div class="gatsby-highlight">\n      <pre class="language-sql"><code><span class="token keyword">comment</span> <span class="token keyword">on</span> <span class="token keyword">column</span> <span class="token number">c</span><span class="token punctuation">.</span>person<span class="token punctuation">.</span>site <span class="token operator">is</span> <span class="token string">\'@deprecated Use `website` instead\\nThe user\'</span><span class="token string">\'s homepage\'</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Smart comments (known internally as <code>tags</code>) are not well documented yet, and\nthey currently only support the <code>deprecated</code> feature; however we will be adding\nmore and more smart comments as time passes, they might be used to do things\nsuch as hiding columns from GraphQL, overriding the names of things in GraphQL,\nand much more. If you\'re interested in helping out here (or just making\nsuggestion!) please <a href="https://github.com/graphile/graphile-build/blob/master/packages/graphile-build-pg/__tests__/tags.test.js">check out the\ntests</a>.</p>\n<p>And file an issue!</p>\n<h4 id="pg7x-and-duck-typed-pg"><a href="#pg7x-and-duck-typed-pg" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>pg@7.x and duck-typed pg</h4>\n<p>In v3 it was quite common to have conflicts with <code>pg</code> - where you had your own\nversion installed, and PostGraphile installed it\'s own version, and when you\npassed a pgPool over to PostGraphile it would throw an error. Well no more! We\nnow look at the pgPool you\'ve handed us and if it quacks like <del>a duck</del>\n<code>pg.Pool</code> then we\'ll trust you and treat it as a pg.Pool.</p>\n<h4 id="lots-of-hidden-features"><a href="#lots-of-hidden-features" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Lots of hidden features</h4>\n<p>There\'s absolutely loads of things going on under the hood that we\'ve not\nofficially exposed yet. You can use some of this goodness (e.g.\n<code>pgColumnFilter</code>) by tapping into the <code>graphileBuildOptions</code> setting, but\nyou\'ll currently have to go digging to see what they are and how they work; and\nuntil they\'re documented they\'re seen as experimental so there\'s no guarantees\nthat they won\'t be removed or modified.</p>',frontmatter:{path:"/postgraphile/v4-new-features/",title:"v4 Feature Guide"}},nav:{edges:[{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [0] >>> JSON",name:"graphile-build",sections:[{id:"guides",title:"Overview"},{id:"library-reference",title:"Using the Library"},{id:"plugin-reference",title:"Building a Plugin"}],pages:[{to:"/graphile-build/getting-started/",title:"Getting Started",sectionId:"guides"},{to:"/graphile-build/plugins/",title:"Plugins",sectionId:"guides"},{to:"/graphile-build/hooks/",title:"Hooks",sectionId:"guides"},{to:"/graphile-build/look-ahead/",title:"Look Ahead",sectionId:"guides"},{to:"/graphile-build/graphile-build/",title:"graphile-build",sectionId:"library-reference"},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"library-reference"},{to:"/graphile-build/plugin-options/",title:"Options",sectionId:"library-reference"},{to:"/graphile-build/default-plugins/",title:"Default Plugins",sectionId:"library-reference"},{to:"/graphile-build/omitting-plugins/",title:"Omitting Plugins",sectionId:"guides"},{to:"/graphile-build/all-hooks/",title:"All Hooks",sectionId:"plugin-reference"},{to:"/graphile-build/build-object/",title:"Build Object",sectionId:"plugin-reference"},{to:"/graphile-build/context-object/",title:"Context Object",sectionId:"plugin-reference"},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"plugin-reference"}]}},{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [1] >>> JSON",name:"postgraphile",sections:[{id:"overview",title:"Overview"},{id:"guides",title:"Guides"},{id:"usage",title:"Usage"}],pages:[{to:"/postgraphile/introduction/",title:"Introduction",sectionId:"overview"},{to:"/postgraphile/quick-start-guide/",title:"Quick Start Guide",sectionId:"overview"},{to:"/postgraphile/evaluating/",title:"Evaluating for your Project",sectionId:"guides"},{to:"/postgraphile/requirements/",title:"Requirements",sectionId:"overview"},{to:"/postgraphile/performance/",title:"Performance",sectionId:"overview"},{to:"/postgraphile/connections/",title:"Connections",sectionId:"overview"},{to:"/postgraphile/filtering/",title:"Filtering",sectionId:"overview"},{to:"/postgraphile/relations/",title:"Relations",sectionId:"overview"},{to:"/postgraphile/crud-mutations/",title:"CRUD Mutations",sectionId:"overview"},{to:"/postgraphile/computed-columns/",title:"Computed Columns",sectionId:"overview"},{to:"/postgraphile/custom-queries/",title:"Custom Queries",sectionId:"overview"},{to:"/postgraphile/custom-mutations/",title:"Custom Mutations",sectionId:"overview"},{to:"/postgraphile/smart-comments/",title:"Smart Comments",sectionId:"overview"},{to:"/postgraphile/security/",title:"Security",sectionId:"overview"},{to:"/postgraphile/introspection/",title:"Introspection",sectionId:"overview"},{to:"/postgraphile/extending/",title:"Extending PostGraphile",sectionId:"overview"},{to:"/postgraphile/jwt-guide/",title:"PostGraphile JWT Guide",sectionId:"guides"},{to:"/postgraphile/default-role/",title:"The Default Role",sectionId:"guides"},{to:"/postgraphile/procedures/",title:"PostgreSQL Procedures",sectionId:"guides"},{to:"/postgraphile/postgresql-schema-design/",title:"PostgreSQL Schema Design",sectionId:"guides"},{to:"/postgraphile/postgresql-indexes/",title:"PostgreSQL Indexes",sectionId:"guides"},{to:"/postgraphile/v4-new-features/",title:"v4 Feature Guide",sectionId:"guides"},{to:"/postgraphile/v3-migration/",title:"v3 → v4 Migration Guide",sectionId:"guides"},{to:"/postgraphile/usage-cli/",title:"CLI Usage",sectionId:"usage"},{to:"/postgraphile/usage-library/",title:"Library Usage",sectionId:"usage"},{to:"/postgraphile/usage-schema/",title:"Schema-only Usage",sectionId:"usage"}]}},{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [2] >>> JSON",name:"graphile-build-pg",sections:[{id:"usage",title:"Usage"}],pages:[{to:"/postgraphile/settings/",title:"Settings",sectionId:"usage"}]}}]}},pathContext:{layout:"page"}}}});
//# sourceMappingURL=path---postgraphile-v-4-new-features-cf885dab5576d6c6ed35.js.map