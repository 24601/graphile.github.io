webpackJsonp([34445096275681],{441:function(e,n){e.exports={data:{remark:{html:'<h2 id="inflection"><a href="#inflection" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Inflection</h2>\n<p>In PostGraphile, we have the concept of "inflection" which details how things\nin PostgreSQL are named in the generated GraphQL schema.</p>\n<p>The default inflections in PostGraphile attempts to map things to natural\nnames in GraphQL whilst attempting to avoid naming conflicts. For example:</p>\n<ul>\n<li>Table names are singularised and changed to UpperCamelCase: <code class="language-text">pending_users</code> → <code class="language-text">PendingUser</code></li>\n<li>Column names are changed to camelCase: <code class="language-text">created_at</code> → <code class="language-text">createdAt</code></li>\n<li>Relations reference the target type and the referencing columns: <code class="language-text">postsByAuthorId</code> (see "advice" below about making this shorter!)</li>\n</ul>\n<h3 id="overriding-inflection---one-off"><a href="#overriding-inflection---one-off" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overriding Inflection - One-off</h3>\n<p>If you want to rename just one field or type, your best bet is to use a <a href="/postgraphile/smart-comments/">smart\ncomment</a>; e.g. for a table you might do:</p>\n<div class="gatsby-highlight">\n      <pre class="language-sql"><code class="language-sql"><span class="token keyword">COMMENT</span> <span class="token keyword">ON</span> <span class="token keyword">TABLE</span> post <span class="token operator">IS</span> E<span class="token string">\'@name message\'</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3 id="overriding-inflection---general"><a href="#overriding-inflection---general" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overriding Inflection - General</h3>\n<p>It\'s possible to override individual inflectors with a plugin. Doing so\nis documented in the <a href="/postgraphile/make-add-inflectors-plugin/"><code class="language-text">makeAddInflectorsPlugin</code> article</a>.</p>\n<p>An example plugin looks something like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">makeAddInflectorsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n<span class="gatsby-highlight-code-line">  <span class="token function">patchType</span><span class="token punctuation">(</span>typeName<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n</span><span class="gatsby-highlight-code-line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">upperCamelCase</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>typeName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-change-set`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span><span class="gatsby-highlight-code-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3 id="advice"><a href="#advice" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Advice</h3>\n<p>The relation field names are quite explicit to avoid accidental conflicts,\nand can make your schema quite verbose, e.g. <code class="language-text">userByAuthorId</code>,\n<code class="language-text">userByEditorId</code>, <code class="language-text">userByPublisherId</code>, etc.</p>\n<p>Some people like this verbosity,\nhowever if you prefer shorter names we encourage you use <a href="https://github.com/graphile-contrib/pg-simplify-inflector">the\n<code class="language-text">@graphile-contrib/pg-simplify-inflector</code>\nplugin</a>. This\nwould automatically change those fields to be named <code class="language-text">author</code>, <code class="language-text">editor</code> and\n<code class="language-text">publisher</code> respectively.</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">postgraphile --append-plugins @graphile-contrib/pg-simplify-inflector</code></pre>\n      </div>\n<p>I, Benjie, prefer to use the pg-simplify-inflector in all my projects.</p>',frontmatter:{path:"/postgraphile/inflection/",title:"Inflection",showExamples:null}},nav:{edges:[{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [0] >>> JSON",name:"news",sections:[{id:"main",title:"Archive"},{id:"about",title:"About"}],pages:[{to:"/news/postgraphile-version-4/",title:"Version 4 Announcement",sectionId:"main",subpages:null},{to:"/news/press-kit/",title:"Press Kit",sectionId:"about",subpages:null}]}},{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [1] >>> JSON",name:"graphile-build",sections:[{id:"guides",title:"Overview"},{id:"library-reference",title:"Using the Library"},{id:"plugin-reference",title:"Building a Plugin"}],pages:[{to:"/graphile-build/getting-started/",title:"Getting Started",sectionId:"guides",subpages:[]},{to:"/graphile-build/plugins/",title:"Plugins",sectionId:"guides",subpages:[]},{to:"/graphile-build/hooks/",title:"Hooks",sectionId:"guides",subpages:[]},{to:"/graphile-build/look-ahead/",title:"Look Ahead",sectionId:"guides",subpages:[]},{to:"/graphile-build/graphile-build/",title:"graphile-build",sectionId:"library-reference",subpages:[]},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"library-reference",subpages:[]},{to:"/graphile-build/plugin-options/",title:"Options",sectionId:"library-reference",subpages:[]},{to:"/graphile-build/default-plugins/",title:"Default Plugins",sectionId:"library-reference",subpages:[]},{to:"/graphile-build/omitting-plugins/",title:"Omitting Plugins",sectionId:"guides",subpages:[]},{to:"/graphile-build/all-hooks/",title:"All Hooks",sectionId:"plugin-reference",subpages:[]},{to:"/graphile-build/build-object/",title:"Build Object",sectionId:"plugin-reference",subpages:[]},{to:"/graphile-build/context-object/",title:"Context Object",sectionId:"plugin-reference",subpages:[]},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"plugin-reference",subpages:[]}]}},{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [2] >>> JSON",name:"postgraphile",sections:[{id:"overview",title:"Overview"},{id:"basics",title:"Operation"},{id:"customising",title:"Customising"},{id:"guides",title:"Guides"},{id:"community",title:"Community"},{id:"faq",title:"FAQ"}],pages:[{to:"/postgraphile/introduction/",title:"Introduction",sectionId:"overview",subpages:[]},{to:"/postgraphile/examples/",title:"Example Gallery",sectionId:"overview",subpages:[]},{to:"/postgraphile/usage/",title:"Usage",sectionId:"overview",subpages:[{to:"/postgraphile/usage-cli/",title:"CLI Usage",sectionId:"overview"},{to:"/postgraphile/usage-library/",title:"Library Usage",sectionId:"overview"},{to:"/postgraphile/usage-schema/",title:"Schema-only Usage",sectionId:"overview"}]},{to:"/postgraphile/performance/",title:"Performance",sectionId:"overview",subpages:[]},{to:"/postgraphile/requirements/",title:"Requirements",sectionId:"overview",subpages:[]},{to:"/postgraphile/quick-start-guide/",title:"Quick Start Guide",sectionId:"basics",subpages:[]},{to:"/postgraphile/namespaces/",title:"Namespaces",sectionId:"basics",subpages:null},{to:"/postgraphile/inflection/",title:"Inflection",sectionId:"basics",subpages:null},{to:"/postgraphile/tables/",title:"Tables",sectionId:"basics",subpages:[{to:"/postgraphile/relations/",title:"Relations",sectionId:"basics"},{to:"/postgraphile/connections/",title:"Connections",sectionId:"basics"},{to:"/postgraphile/filtering/",title:"Filtering",sectionId:"basics"},{to:"/postgraphile/crud-mutations/",title:"CRUD Mutations",sectionId:"basics"},{to:"/postgraphile/node-id/",title:"nodeId / id",sectionId:"basics"}]},{to:"/postgraphile/functions/",title:"Functions",sectionId:"basics",subpages:[{to:"/postgraphile/computed-columns/",title:"Computed Columns",sectionId:"basics"},{to:"/postgraphile/custom-queries/",title:"Custom Queries",sectionId:"basics"},{to:"/postgraphile/custom-mutations/",title:"Custom Mutations",sectionId:"basics"},{to:"/postgraphile/function-restrictions/",title:"Function Restrictions",sectionId:"basics"},{to:"/postgraphile/function-gallery/",title:"Function Gallery",sectionId:"customising"}]},{to:"/postgraphile/postgresql-indexes/",title:"PostgreSQL Indexes",sectionId:"basics",subpages:[]},{to:"/postgraphile/security/",title:"Security",sectionId:"basics",subpages:[]},{to:"/postgraphile/subscriptions/",title:"Subscriptions",sectionId:"basics",subpages:[]},{to:"/postgraphile/reserved-keywords/",title:"Reserved Keywords",sectionId:"basics",subpages:[]},{to:"/postgraphile/debugging/",title:"Debugging",sectionId:"basics",subpages:[]},{to:"/postgraphile/smart-comments/",title:"Smart Comments",sectionId:"customising",subpages:[]},{to:"/postgraphile/extending/",title:"Schema Plugins",sectionId:"customising",subpages:[{to:"/postgraphile/make-extend-schema-plugin/",title:"makeExtendSchemaPlugin",sectionId:"customising"},{to:"/postgraphile/make-add-inflectors-plugin/",title:"makeAddInflectorsPlugin",sectionId:"customising"},{to:"/postgraphile/extending-raw/",title:"Graphile Engine",sectionId:"customising"},{to:"/postgraphile/plugin-gallery/",title:"Plugin Gallery",sectionId:"customising"}]},{to:"/postgraphile/plugins/",title:"Server Plugins",sectionId:"customising",subpages:[]},{to:"/postgraphile/evaluating/",title:"Evaluating for your Project",sectionId:"guides",subpages:[]},{to:"/postgraphile/postgresql-schema-design/",title:"PostgreSQL Schema Design",sectionId:"guides",subpages:[]},{to:"/postgraphile/production/",title:"Production Considerations",sectionId:"guides",subpages:[]},{to:"/postgraphile/jwt-guide/",title:"PostGraphile JWT Guide",sectionId:"guides",subpages:[]},{to:"/postgraphile/default-role/",title:"The Default Role",sectionId:"guides",subpages:[]},{to:"/postgraphile/v4-new-features/",title:"v4 Feature Guide",sectionId:"guides",subpages:[]},{to:"/postgraphile/v3-migration/",title:"v3 → v4 Migration Guide",sectionId:"guides",subpages:[]},{to:"/postgraphile/testing-jest/",title:"Testing with Jest",sectionId:"guides",subpages:[]},{to:"/postgraphile/community-plugins/",title:"Community Plugins",sectionId:"community",subpages:[]},{to:"/postgraphile/community-chat/",title:"Community Chat",sectionId:"community",subpages:[]},{to:"/postgraphile/code-of-conduct/",title:"Code of Conduct",sectionId:"community",subpages:[]},{to:"/postgraphile/introspection/",title:"Introspection?",sectionId:"faq",subpages:[]},{to:"/postgraphile/why-nullable/",title:"Why is it nullable?",sectionId:"faq",subpages:[]},{to:"/postgraphile/versioning-policy/",title:"Versioning policy?",sectionId:"faq",subpages:[]}]}},{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [3] >>> JSON",name:"graphile-build-pg",sections:[{id:"overview",title:"Usage"}],pages:[{to:"/graphile-build-pg/settings/",title:"Settings",sectionId:"overview",subpages:[]}]}}]},examples:{edges:[{node:{category:"functions",id:"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [0] >>> JSON",title:"Custom queries",examples:[{title:"Logged in user field",example:"create function viewer()\nreturns users\nas $$\n  select *\n  from users\n  where id = current_user_id();\n  /*\n   * current_user_id() is a function\n   * that returns the logged in user's\n   * id, e.g. by extracting from the JWT\n   * or indicated via pgSettings.\n   */\n$$ language sql stable set search_path from current;\n",exampleLanguage:"sql",result:"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1467,6 +1467,7 @@\n \n   # Chosen by fair dice roll. Guaranteed to be random. XKCD#221\n   randomNumber: Int\n+  viewer: User\n \n   # Reads a single `Forum` using its globally unique `ID`.\n   forum(\n",resultLanguage:"diff"}]}},{node:{category:"functions",id:"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [1] >>> JSON",title:"Computed columns",examples:[{title:"User primary email",example:'/*\n * Returns the primary email of the\n * current user; for all other users\n * this function will return null.\n */\ncreate function "users_primaryEmail"(u users)\nreturns text\nas $$\n  select email\n  from user_emails\n  where user_id = current_user_id()\n  and user_id = u.id\n  and is_verified is true\n  order by id asc\n  limit 1;\n$$ language sql stable set search_path from current;\n',exampleLanguage:"sql",result:"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -2578,6 +2578,7 @@\n     # A condition to be used in determining which values should be returned by the collection.\n     condition: QuizEntryCondition\n   ): QuizEntriesConnection!\n+  primaryEmail: String\n }\n \n # Contains information about the login providers this user has used, so that they may disconnect them should they wish.\n",resultLanguage:"diff"}]}},{node:{category:"functions",id:"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [2] >>> JSON",title:"Custom mutations",examples:[{title:"Insert multiple records",example:"/**\n * Occasionally you'll want to create a bunch of rows in different tables in a\n * single mutation. Here's an example of how to do that.\n *\n * Pretend we're registering quiz entries, and we want to store each answer in\n * its own table as we want to be able to operate on the answers independently\n * later.\n *\n * This means we want:\n *\n *  1. A mutation that takes input data for inserting one quiz entry and\n *  multiple answers.\n *  2. A function that inserts a new quiz entry, inserts an answer for each\n *  answer provided in the input data, and connects each answer to the created\n *  quiz entry.\n *  3. Finally, we want the function to return the inserted quiz entry itself.\n */\n\n/**\n * This type is used for input in the mutation\n */\ncreate type quiz_entry_input as (\n  question text,\n  answer int\n);\n\n/**\n * Here's the function that gets turned into a \"custom mutation\"\n */\ncreate function add_quiz_entry(\n  quiz_id int,\n  answers quiz_entry_input[]\n)\nreturns quiz_entry\nas $$\n  declare\n    q quiz_entry;\n    a quiz_entry_answer;\n  begin\n    insert into quiz_entry(user_id, quiz_id)\n      values(current_user_id(), quiz_id)\n      returning * into q;\n\n    foreach a in array answers loop\n      insert into quiz_entry_answer(quiz_entry_id, question, answer)\n        values (quiz_id, a.question, a.answer);\n    end loop;\n\n    return q;\n  end;\n$$ language plpgsql volatile strict set search_path from current;\n",exampleLanguage:"sql",result:"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1,3 +1,35 @@\n+# All input for the `addQuizEntry` mutation.\n+input AddQuizEntryInput {\n+  # An arbitrary string value with no semantic meaning. Will be included in the\n+  # payload verbatim. May be used to track mutations by the client.\n+  clientMutationId: String\n+  quizId: Int!\n+  answers: [QuizEntryInputRecordInput]!\n+}\n+\n+# The output of our `addQuizEntry` mutation.\n+type AddQuizEntryPayload {\n+  # The exact same `clientMutationId` that was provided in the mutation input,\n+  # unchanged and unused. May be used by a client to track mutations.\n+  clientMutationId: String\n+  quizEntry: QuizEntry\n+\n+  # Our root query field type. Allows us to run any query from our mutation payload.\n+  query: Query\n+\n+  # Reads a single `User` that is related to this `QuizEntry`.\n+  user: User\n+\n+  # Reads a single `Quiz` that is related to this `QuizEntry`.\n+  quiz: Quiz\n+\n+  # An edge for our `QuizEntry`. May be used by Relay 1.\n+  quizEntryEdge(\n+    # The method to use when ordering `QuizEntry`.\n+    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\n+  ): QuizEntriesEdge\n+}\n+\n # A floating point number that requires more precision than IEEE 754 binary 64\n scalar BigFloat\n \n@@ -1182,6 +1214,10 @@\n     # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n     input: DeleteUserByUsernameInput!\n   ): DeleteUserPayload\n+  addQuizEntry(\n+    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    input: AddQuizEntryInput!\n+  ): AddQuizEntryPayload\n \n   # If you've forgotten your password, give us one of your email addresses and we'\n   # send you a reset token. Note this only works if you have added an email address!\n@@ -1751,6 +1787,12 @@\n   quizId: Int!\n }\n \n+# An input for mutations affecting `QuizEntryInputRecord`\n+input QuizEntryInputRecordInput {\n+  question: String\n+  answer: Int\n+}\n+\n # Represents an update to a `QuizEntry`. Fields that are set will be updated.\n input QuizEntryPatch {\n   id: Int\n",resultLanguage:"diff"}]}},{node:{category:"plugins",id:"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [3] >>> JSON",title:"Inflector",examples:[{title:"PgRenamePatchToPatchSetPlugin",example:"/**\n * Simply renames the `UserPatch` and `PostPatch` type names to be called\n * `UserPatchSet` and `PostPatchSet` instead.\n *\n * Not particularly useful, just an example. ('PatchSet' chosen to minimise\n * diff to make example clearer.)\n *\n * Replaces this inflector:\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L309-L311\n */\nmodule.exports = function PgRenamePatchToPatchSetPlugin(\n  builder\n) {\n  builder.hook(\n    \"inflection\",\n    inflector => ({\n      // Retain the existing inflectors\n      ...inflector,\n\n      // Override the patchType inflector\n      patchType(typeName) {\n        // return this.upperCamelCase(`${typeName}-patch`);\n        return this.upperCamelCase(\n          `${typeName}-patch-set`\n        );\n      },\n    })\n  );\n};\n",exampleLanguage:"javascript",result:"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -805,7 +805,7 @@\n }\n \n # Represents an update to a `Forum`. Fields that are set will be updated.\n-input ForumPatch {\n+input ForumPatchSet {\n   id: Int\n \n   # An URL-safe alias for the `Forum`.\n@@ -1269,7 +1269,7 @@\n }\n \n # Represents an update to a `Post`. Fields that are set will be updated.\n-input PostPatch {\n+input PostPatchSet {\n   # The body of the `Topic`, which Posts reply to.\n   body: String\n }\n@@ -1685,7 +1685,7 @@\n }\n \n # Represents an update to a `QuizEntryAnswer`. Fields that are set will be updated.\n-input QuizEntryAnswerPatch {\n+input QuizEntryAnswerPatchSet {\n   id: Int\n   quizEntryId: Int\n   question: String\n@@ -1752,7 +1752,7 @@\n }\n \n # Represents an update to a `QuizEntry`. Fields that are set will be updated.\n-input QuizEntryPatch {\n+input QuizEntryPatchSet {\n   id: Int\n   userId: Int\n   quizId: Int\n@@ -1767,7 +1767,7 @@\n }\n \n # Represents an update to a `Quiz`. Fields that are set will be updated.\n-input QuizPatch {\n+input QuizPatchSet {\n   id: Int\n   name: String\n   precision12Scale2: BigFloat\n@@ -1929,7 +1929,7 @@\n }\n \n # Represents an update to a `Topic`. Fields that are set will be updated.\n-input TopicPatch {\n+input TopicPatchSet {\n   id: Int\n   forumId: Int\n   authorId: Int\n@@ -1995,7 +1995,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `Forum` being updated.\n-  forumPatch: ForumPatch!\n+  forumPatch: ForumPatchSet!\n   id: Int!\n }\n \n@@ -2006,7 +2006,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `Forum` being updated.\n-  forumPatch: ForumPatch!\n+  forumPatch: ForumPatchSet!\n \n   # An URL-safe alias for the `Forum`.\n   slug: String!\n@@ -2022,7 +2022,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `Forum` being updated.\n-  forumPatch: ForumPatch!\n+  forumPatch: ForumPatchSet!\n }\n \n # The output of our update `Forum` mutation.\n@@ -2051,7 +2051,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `Post` being updated.\n-  postPatch: PostPatch!\n+  postPatch: PostPatchSet!\n   id: Int!\n }\n \n@@ -2065,7 +2065,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `Post` being updated.\n-  postPatch: PostPatch!\n+  postPatch: PostPatchSet!\n }\n \n # The output of our update `Post` mutation.\n@@ -2100,7 +2100,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `Quiz` being updated.\n-  quizPatch: QuizPatch!\n+  quizPatch: QuizPatchSet!\n   id: Int!\n }\n \n@@ -2111,7 +2111,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n-  quizEntryAnswerPatch: QuizEntryAnswerPatch!\n+  quizEntryAnswerPatch: QuizEntryAnswerPatchSet!\n   id: Int!\n }\n \n@@ -2125,7 +2125,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n-  quizEntryAnswerPatch: QuizEntryAnswerPatch!\n+  quizEntryAnswerPatch: QuizEntryAnswerPatchSet!\n }\n \n # The output of our update `QuizEntryAnswer` mutation.\n@@ -2157,7 +2157,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `QuizEntry` being updated.\n-  quizEntryPatch: QuizEntryPatch!\n+  quizEntryPatch: QuizEntryPatchSet!\n   id: Int!\n }\n \n@@ -2171,7 +2171,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `QuizEntry` being updated.\n-  quizEntryPatch: QuizEntryPatch!\n+  quizEntryPatch: QuizEntryPatchSet!\n }\n \n # The output of our update `QuizEntry` mutation.\n@@ -2209,7 +2209,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `Quiz` being updated.\n-  quizPatch: QuizPatch!\n+  quizPatch: QuizPatchSet!\n }\n \n # The output of our update `Quiz` mutation.\n@@ -2238,7 +2238,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `Topic` being updated.\n-  topicPatch: TopicPatch!\n+  topicPatch: TopicPatchSet!\n   id: Int!\n }\n \n@@ -2252,7 +2252,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `Topic` being updated.\n-  topicPatch: TopicPatch!\n+  topicPatch: TopicPatchSet!\n }\n \n # The output of our update `Topic` mutation.\n@@ -2287,7 +2287,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `UserAuthentication` being updated.\n-  userAuthenticationPatch: UserAuthenticationPatch!\n+  userAuthenticationPatch: UserAuthenticationPatchSet!\n   id: Int!\n }\n \n@@ -2298,7 +2298,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `UserAuthentication` being updated.\n-  userAuthenticationPatch: UserAuthenticationPatch!\n+  userAuthenticationPatch: UserAuthenticationPatchSet!\n \n   # The login service used, e.g. `twitter` or `github`.\n   service: String!\n@@ -2317,7 +2317,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `UserAuthentication` being updated.\n-  userAuthenticationPatch: UserAuthenticationPatch!\n+  userAuthenticationPatch: UserAuthenticationPatchSet!\n }\n \n # The output of our update `UserAuthentication` mutation.\n@@ -2346,7 +2346,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `User` being updated.\n-  userPatch: UserPatch!\n+  userPatch: UserPatchSet!\n \n   # Unique identifier for the user.\n   id: Int!\n@@ -2359,7 +2359,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `User` being updated.\n-  userPatch: UserPatch!\n+  userPatch: UserPatchSet!\n \n   # Public-facing username (or 'handle') of the user.\n   username: String!\n@@ -2372,7 +2372,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `UserEmail` being updated.\n-  userEmailPatch: UserEmailPatch!\n+  userEmailPatch: UserEmailPatchSet!\n   id: Int!\n }\n \n@@ -2383,7 +2383,7 @@\n   clientMutationId: String\n \n   # An object where the defined keys will be set on the `UserEmail` being updated.\n-  userEmailPatch: UserEmailPatch!\n+  userEmailPatch: UserEmailPatchSet!\n   userId: Int!\n \n   # The users email address, in `a@b.c` format.\n@@ -2400,7 +2400,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `UserEmail` being updated.\n-  userEmailPatch: UserEmailPatch!\n+  userEmailPatch: UserEmailPatchSet!\n }\n \n # The output of our update `UserEmail` mutation.\n@@ -2435,7 +2435,7 @@\n   nodeId: ID!\n \n   # An object where the defined keys will be set on the `User` being updated.\n-  userPatch: UserPatch!\n+  userPatch: UserPatchSet!\n }\n \n # The output of our update `User` mutation.\n@@ -2609,7 +2609,7 @@\n }\n \n # Represents an update to a `UserAuthentication`. Fields that are set will be updated.\n-input UserAuthenticationPatch {\n+input UserAuthenticationPatchSet {\n   id: Int\n \n   # The login service used, e.g. `twitter` or `github`.\n@@ -2705,7 +2705,7 @@\n }\n \n # Represents an update to a `UserEmail`. Fields that are set will be updated.\n-input UserEmailPatch {\n+input UserEmailPatchSet {\n   id: Int\n   userId: Int\n \n@@ -2783,7 +2783,7 @@\n }\n \n # Represents an update to a `User`. Fields that are set will be updated.\n-input UserPatch {\n+input UserPatchSet {\n   # Unique identifier for the user.\n   id: Int\n \n",resultLanguage:"diff"},{title:"PgShortenAllRowsInflectorPlugin",example:'/**\n * Simply renames the `allUsers` and `allPosts` Query fields to `users` and\n * `posts` respectively.\n *\n * Not particularly useful, just an example.\n *\n * Replaces this inflector:\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L460-L464\n */\nmodule.exports = function PgShortenAllRowsInflectorPlugin(\n  builder\n) {\n  builder.hook(\n    "inflection",\n    inflector => ({\n      // Retain the existing inflectors\n      ...inflector,\n\n      // Override the allRows inflector\n      allRows(table) {\n        return this.camelCase(\n          // Was: `all-${this.pluralize(this._singularizedTableName(table))}`\n          // Now:\n          this.pluralize(\n            this._singularizedTableName(\n              table\n            )\n          )\n        );\n      },\n    })\n  );\n};\n',exampleLanguage:"javascript",result:"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1333,7 +1333,7 @@\n   ): Node\n \n   # Reads and enables pagination through a set of `Forum`.\n-  allForums(\n+  forums(\n     # Only read the first `n` values of the set.\n     first: Int\n \n@@ -1358,7 +1358,7 @@\n   ): ForumsConnection\n \n   # Reads and enables pagination through a set of `Quiz`.\n-  allQuizzes(\n+  quizzes(\n     # Only read the first `n` values of the set.\n     first: Int\n \n@@ -1383,7 +1383,7 @@\n   ): QuizzesConnection\n \n   # Reads and enables pagination through a set of `QuizEntry`.\n-  allQuizEntries(\n+  quizEntries(\n     # Only read the first `n` values of the set.\n     first: Int\n \n@@ -1408,7 +1408,7 @@\n   ): QuizEntriesConnection\n \n   # Reads and enables pagination through a set of `QuizEntryAnswer`.\n-  allQuizEntryAnswers(\n+  quizEntryAnswers(\n     # Only read the first `n` values of the set.\n     first: Int\n \n",resultLanguage:"diff"}]}},{node:{category:"plugins",id:"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [4] >>> JSON",title:"Types",examples:[{title:"PgNumericToFloatPlugin",example:'/**\n * Use of this plugin is NOT recommended, please see\n * PgSmallNumericToFloatPlugin for a more appropriate replacement if you need\n * one.\n *\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\n * for *all* DECIMAL / NUMERIC values, for making PostGraphile v4 slightly more\n * backwards-compatible with v3.\n *\n * It\'s generally a bad idea to use floating point numbers to represent\n * arbitrary precision numbers such as NUMERIC because loss of precision can\n * occur.\n */\nmodule.exports = function PgNumericToFloatPlugin(\n  builder\n) {\n  builder.hook(\n    "init",\n    (_init, build) => {\n      // Register a type handler for NUMERIC / DECIMAL (oid = 1700), always\n      // returning the GraphQLFloat type\n      build.pgRegisterGqlTypeByTypeId(\n        "1700",\n        () =>\n          build.graphql.GraphQLFloat\n      );\n      return _init;\n    }\n  );\n};\n',exampleLanguage:"javascript",result:"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1,6 +1,3 @@\n-# A floating point number that requires more precision than IEEE 754 binary 64\n-scalar BigFloat\n-\n # All input for the create `Forum` mutation.\n input CreateForumInput {\n   # An arbitrary string value with no semantic meaning. Will be included in the\n@@ -1528,8 +1525,8 @@\n   nodeId: ID!\n   id: Int!\n   name: String!\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n+  precision12Scale2: Float\n+  precision200Scale100: Float\n \n   # Reads and enables pagination through a set of `QuizEntry`.\n   quizEntries(\n@@ -1566,10 +1563,10 @@\n   name: String\n \n   # Checks for equality with the object’s `precision12Scale2` field.\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n \n   # Checks for equality with the object’s `precision200Scale100` field.\n-  precision200Scale100: BigFloat\n+  precision200Scale100: Float\n }\n \n # A connection to a list of `QuizEntry` values.\n@@ -1762,16 +1759,16 @@\n input QuizInput {\n   id: Int\n   name: String!\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n+  precision12Scale2: Float\n+  precision200Scale100: Float\n }\n \n # Represents an update to a `Quiz`. Fields that are set will be updated.\n input QuizPatch {\n   id: Int\n   name: String\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n+  precision12Scale2: Float\n+  precision200Scale100: Float\n }\n \n # A connection to a list of `Quiz` values.\n",
resultLanguage:"diff"},{title:"PgSmallNumericToFloatPlugin",example:'/**\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\n * for DECIMAL / NUMERIC values that have a precision and scale under the given\n * limits (currently 12 and 2 respectively).\n *\n * It\'s generally a bad idea to use floating point numbers to represent\n * arbitrary precision numbers such as NUMERIC because loss of precision can\n * occur; however some systems are okay with this compromise.\n */\nmodule.exports = function PgSmallNumericToFloatPlugin(\n  builder,\n  {\n    pgNumericToFloatPrecisionCap = 12,\n    pgNumericToFloatScaleCap = 2,\n  }\n) {\n  builder.hook(\n    "init",\n    (_init, build) => {\n      // Register a type handler for NUMERIC / DECIMAL (oid = 1700)\n      build.pgRegisterGqlTypeByTypeId(\n        "1700",\n        (_set, modifier) => {\n          if (\n            modifier &&\n            typeof modifier ===\n              "number" &&\n            modifier > 0\n          ) {\n            // Ref: https://stackoverflow.com/a/3351120/141284\n            const precision =\n              ((modifier - 4) >> 16) &\n              65535;\n            const scale =\n              (modifier - 4) & 65535;\n            if (\n              precision <=\n                pgNumericToFloatPrecisionCap &&\n              scale <=\n                pgNumericToFloatScaleCap\n            ) {\n              // This number is no more precise than our cap, so we\'re declaring\n              // that we can handle it as a float:\n              return build.graphql\n                .GraphQLFloat;\n            }\n          }\n          // If all else fails, let PostGraphile do it\'s default handling - i.e.\n          // BigFloat\n          return null;\n        }\n      );\n\n      // We didn\'t modify _init, but we still must return it.\n      return _init;\n    }\n  );\n};\n',exampleLanguage:"javascript",result:"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1528,7 +1528,7 @@\n   nodeId: ID!\n   id: Int!\n   name: String!\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n   precision200Scale100: BigFloat\n \n   # Reads and enables pagination through a set of `QuizEntry`.\n@@ -1566,7 +1566,7 @@\n   name: String\n \n   # Checks for equality with the object’s `precision12Scale2` field.\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n \n   # Checks for equality with the object’s `precision200Scale100` field.\n   precision200Scale100: BigFloat\n@@ -1762,7 +1762,7 @@\n input QuizInput {\n   id: Int\n   name: String!\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n   precision200Scale100: BigFloat\n }\n \n@@ -1770,7 +1770,7 @@\n input QuizPatch {\n   id: Int\n   name: String\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n   precision200Scale100: BigFloat\n }\n \n",resultLanguage:"diff"}]}},{node:{category:"queries",id:"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [5] >>> JSON",title:"Basic",examples:[{title:"Forums",example:"{\n  allForums {\n    nodes {\n      nodeId\n      id\n      slug\n      name\n      description\n    }\n  }\n}\n",exampleLanguage:"graphql",result:'{\n  "allForums": {\n    "nodes": [\n      {\n        "nodeId": "WyJmb3J1bXMiLDFd",\n        "id": 1,\n        "slug": "cat-life",\n        "name": "Cat Life",\n        "description":\n          "A forum all about cats and how fluffy they are and how they completely ignore their owners unless there is food. Or yarn."\n      },\n      {\n        "nodeId": "WyJmb3J1bXMiLDJd",\n        "id": 2,\n        "slug": "dog-life",\n        "name": "Dog Life",\n        "description": ""\n      },\n      {\n        "nodeId": "WyJmb3J1bXMiLDNd",\n        "id": 3,\n        "slug": "slug-life",\n        "name": "Slug Life",\n        "description": ""\n      }\n    ]\n  }\n}\n',resultLanguage:"json"},{title:"Forum by slug",example:'{\n  forumBySlug(slug: "slug-life") {\n    nodeId\n    id\n    slug\n    name\n    description\n  }\n}\n',exampleLanguage:"graphql",result:'{\n  "forumBySlug": {\n    "nodeId": "WyJmb3J1bXMiLDNd",\n    "id": 3,\n    "slug": "slug-life",\n    "name": "Slug Life",\n    "description": ""\n  }\n}\n',resultLanguage:"json"}]}},{node:{category:"queries",id:"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [6] >>> JSON",title:"Collections",examples:[{title:"First offset",example:"{\n  allForums(first: 1, offset: 1) {\n    nodes {\n      nodeId\n      id\n      name\n    }\n  }\n}\n",exampleLanguage:"graphql",result:'{\n  "allForums": {\n    "nodes": [\n      {\n        "nodeId": "WyJmb3J1bXMiLDJd",\n        "id": 2,\n        "name": "Dog Life"\n      }\n    ]\n  }\n}\n',resultLanguage:"json"},{title:"Relation condition",example:'{\n  forumBySlug(slug: "cat-life") {\n    nodeId\n    id\n    name\n    topics(\n      condition: { authorId: 1 }\n    ) {\n      nodes {\n        nodeId\n        id\n        title\n      }\n    }\n  }\n}\n',exampleLanguage:"graphql",result:'{\n  "forumBySlug": {\n    "nodeId": "WyJmb3J1bXMiLDFd",\n    "id": 1,\n    "name": "Cat Life",\n    "topics": {\n      "nodes": [\n        {\n          "nodeId":\n            "WyJ0b3BpY3MiLDFd",\n          "id": 1,\n          "title": "cats cats cats"\n        },\n        {\n          "nodeId":\n            "WyJ0b3BpY3MiLDJd",\n          "id": 2,\n          "title": "snooze life"\n        },\n        {\n          "nodeId":\n            "WyJ0b3BpY3MiLDNd",\n          "id": 3,\n          "title": "too hot"\n        }\n      ]\n    }\n  }\n}\n',resultLanguage:"json"}]}},{node:{category:"queries",id:"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [7] >>> JSON",title:"Relations",examples:[{title:"Forums topics posts",example:"{\n  forumById(id: 1) {\n    name\n    topics(\n      first: 1\n      orderBy: [CREATED_AT_ASC]\n    ) {\n      nodes {\n        id\n        title\n        bodySummary\n        author {\n          id\n          username\n        }\n        posts(\n          first: 1\n          orderBy: [ID_DESC]\n        ) {\n          nodes {\n            id\n            author {\n              id\n              username\n            }\n            body\n          }\n        }\n      }\n    }\n  }\n}\n",exampleLanguage:"graphql",result:'{\n  "forumById": {\n    "name": "Cat Life",\n    "topics": {\n      "nodes": [\n        {\n          "id": 1,\n          "title": "cats cats cats",\n          "bodySummary":\n            "lets discuss cats because t...",\n          "author": {\n            "id": 1,\n            "username": "user"\n          },\n          "posts": {\n            "nodes": [\n              {\n                "id": 3,\n                "author": {\n                  "id": 1,\n                  "username": "user"\n                },\n                "body":\n                  "I love it when they completely ignore you until they want something. So much better than dogs am I rite?"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n',resultLanguage:"json"}]}},{node:{category:"queries",id:"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [8] >>> JSON",title:"Mutations",examples:[{title:"Create",example:'mutation {\n  createTopic(\n    input: {\n      topic: {\n        forumId: 1\n        title: "My question relates to mutations..."\n        body: "How do you write them?"\n      }\n    }\n  ) {\n    topic {\n      nodeId\n      id\n      forumId\n      title\n      body\n    }\n  }\n}\n',exampleLanguage:"graphql",result:'{\n  "createTopic": {\n    "topic": {\n      "nodeId": "WyJ0b3BpY3MiLDRd",\n      "id": 4,\n      "forumId": 1,\n      "title":\n        "My question relates to mutations...",\n      "body": "How do you write them?"\n    }\n  }\n}\n',resultLanguage:"json"},{title:"Update",example:"mutation {\n  updateTopicById(\n    input: {\n      id: 1\n      topicPatch: {\n        title: \"My (edited) title\"\n      }\n    }\n  ) {\n    topic {\n      nodeId\n      id\n      title\n      body\n    }\n  }\n}\n\n# Works for a table like:\n#\n#   create table app_public.topics (\n#     id serial primary key,\n#     forum_id integer NOT NULL references app_public.forums on delete cascade,\n#     title text NOT NULL,\n#     body text DEFAULT ''::text NOT NULL\n#   );\n",exampleLanguage:"graphql",result:'{\n  "updateTopicById": {\n    "topic": {\n      "nodeId": "WyJ0b3BpY3MiLDFd",\n      "id": 1,\n      "title": "My (edited) title",\n      "body":\n        "lets discuss cats because theyre totally cool"\n    }\n  }\n}\n',resultLanguage:"json"},{title:"Delete",example:"mutation {\n  deleteTopicById(input: { id: 1 }) {\n    deletedTopicId\n  }\n}\n",exampleLanguage:"graphql",result:'{\n  "deleteTopicById": {\n    "deletedTopicId":\n      "WyJ0b3BpY3MiLDFd"\n  }\n}\n',resultLanguage:"json"}]}},{node:{category:"queries",id:"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [9] >>> JSON",title:"Custom queries",examples:[{title:"Single scalar",example:"{\n  randomNumber\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.random_number() returns int\n#  language sql stable\n#  as $$\n#    select 4; -- Chosen by fair dice roll. Guaranteed to be random. XKCD#221\n#  $$;\n#\n",exampleLanguage:"graphql",result:'{ "randomNumber": 4 }\n',resultLanguage:"json"},{title:"Single row",example:"{\n  currentUser {\n    nodeId\n    id\n    username\n  }\n}\n\n# Added to the GraphQL schema via\n# this SQL:\n#\n#   create function current_user()\n#   returns app_public.users\n#   language sql stable\n#   as $$\n#     select users.*\n#     from app_public.users\n#     where id = current_user_id();\n#   $$;\n",exampleLanguage:"graphql",result:'{\n  "currentUser": {\n    "nodeId": "WyJ1c2VycyIsMV0=",\n    "id": 1,\n    "username": "user"\n  }\n}\n',resultLanguage:"json"},{title:"Rows connection",example:"{\n  forumsAboutCats {\n    nodes {\n      nodeId\n      id\n      name\n      slug\n    }\n  }\n}\n\n# Created from SQL like:\n#\n#  create function app_public.forums_about_cats()\n#  returns setof app_public.forums\n#  language sql stable\n#  as $$\n#    select *\n#    from app_public.forums\n#    where slug like 'cat-%';\n#  $$;\n",exampleLanguage:"graphql",result:'{\n  "forumsAboutCats": {\n    "nodes": [\n      {\n        "nodeId": "WyJmb3J1bXMiLDFd",\n        "id": 1,\n        "name": "Cat Life",\n        "slug": "cat-life"\n      }\n    ]\n  }\n}\n',resultLanguage:"json"}]}},{node:{category:"queries",id:"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [10] >>> JSON",title:"Custom mutations",examples:[{title:"Forgot password",example:"mutation {\n  forgotPassword(\n    input: {\n      email: \"user@example.com\"\n    }\n  ) {\n    success\n  }\n}\n\n# Generated with SQL like this:\n#\n#  create function forgot_password(email text)\n#  returns boolean\n#  language plpgsql volatile\n#  as $$\n#    ...\n#  $$;\n#\n#  -- Optionally rename the result field:\n#  comment on function\n#    forgot_password(email text)\n#    is '@resultFieldName success';\n",exampleLanguage:"graphql",result:'{\n  "forgotPassword": {\n    "success": true\n  }\n}\n',resultLanguage:"json"}]}},{node:{category:"queries",id:"/Users/benjiegillam/Dev/graphile.org/src/data/examples.json absPath of file [11] >>> JSON",title:"Computed columns",examples:[{title:"Topic summary",example:"{\n  topicById(id: 2) {\n    body\n    bodySummary\n  }\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.topics_body_summary(\n#    t app_public.topics,\n#    max_length int = 30\n#  )\n#  returns text\n#  language sql stable\n#  as $$\n#    select case\n#      when length(t.body) > max_length\n#      then left(t.body, max_length - 3)\n#             || '...'\n#      else t.body\n#      end;\n#  $$;\n",exampleLanguage:"graphql",result:'{\n  "topicById": {\n    "body":\n      "do you find your cat just sleeps everywhere",\n    "bodySummary":\n      "do you find your cat just s..."\n  }\n}\n',resultLanguage:"json"},{title:"Topic summary with arg",example:"{\n  topicById(id: 2) {\n    body\n    bodySummary(maxLength: 20)\n  }\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.topics_body_summary(\n#    t app_public.topics,\n#    max_length int = 30\n#  )\n#  returns text\n#  language sql stable\n#  as $$\n#    select case\n#      when length(t.body) > max_length\n#      then left(t.body, max_length - 3)\n#             || '...'\n#      else t.body\n#      end;\n#  $$;\n",exampleLanguage:"graphql",result:'{\n  "topicById": {\n    "body":\n      "do you find your cat just sleeps everywhere",\n    "bodySummary":\n      "do you find your ..."\n  }\n}\n',resultLanguage:"json"}]}}]}},pathContext:{layout:"page"}}}});
//# sourceMappingURL=path---postgraphile-inflection-bd4280a370e8b788dd71.js.map