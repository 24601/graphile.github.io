webpackJsonp([1465359564156],{413:function(n,s){n.exports={data:{remark:{html:'<h2 id="graphql-schema-plugins"><a href="#graphql-schema-plugins" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>GraphQL Schema Plugins</h2>\n<p><em>NOTE: This page relates to changing your GraphQL schema. If you\'re instead looking to change how the web layer of PostGraphile works (e.g. for validating web requests), see <a href="/postgraphile/plugins/">Server Plugins</a>.</em></p>\n<p><em>NOTE: if you\'re looking for an easy way to remove/rename things, check out <a href="/postgraphile/smart-comments/">smart comments</a>.</em></p>\n<p>PostGraphile\'s schema generator is built from a number of <a href="/graphile-build/plugins/">Graphile Build\nplugins</a>. You can write your own plugins (see below),\nbut we also make some helpers available in <code class="language-text">graphile-utils</code> that help you to\ndo common tasks.</p>\n<h3 id="the-easy-way-graphile-utils"><a href="#the-easy-way-graphile-utils" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The easy way: <code class="language-text">graphile-utils</code></h3>\n<p>The <code class="language-text">graphile-utils</code> module contains some helpers for extending your\nPostGraphile (or Graphile Build) GraphQL schema without having to understand\nthe complex plugin system.</p>\n<p>The main one you\'ll care about to start with is <code class="language-text">makeExtendSchemaPlugin</code>.</p>\n<h4 id="makeextendschemaplugin"><a href="#makeextendschemaplugin" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>makeExtendSchemaPlugin</h4>\n<p>Using makeExtendSchemaPlugin you can write a plugin that will merge additional\nGraphQL types and resolvers into your schema using a similar syntax to\n<code class="language-text">graphql-tools</code>. You just need to provide the <code class="language-text">typeDefs</code> and <code class="language-text">resolvers</code> to\nuse. Your plugin will likely take a shape like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span>\n  makeExtendSchemaPlugin<span class="token punctuation">,</span>\n  gql<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'graphile-utils\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> MySchemaExtensionPlugin <span class="token operator">=</span>\n  <span class="token function">makeExtendSchemaPlugin</span><span class="token punctuation">(</span>\n    build <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n<span class="gatsby-highlight-code-line">      typeDefs<span class="token punctuation">:</span> gql<span class="token template-string"><span class="token string">`...`</span></span><span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">      resolvers<span class="token punctuation">:</span> <span class="token operator">...</span>\n</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> MySchemaExtensionPlugin<span class="token punctuation">;</span></code></pre>\n      </div>\n<p>And would be added to your PostGraphile instance via</p>\n<ul>\n<li>CLI: <code class="language-text">--append-plugins `pwd`/MySchemaExtensionPlugin.js</code></li>\n<li>Library: <code class="language-text">appendPlugins: [require(&#39;./MySchemaExtensionPlugin&#39;)]</code></li>\n</ul>\n<p>The <code class="language-text">build</code> argument to the makeExtendSchemaPlugin callback contains lots of\ninformation and helpers defined by various plugins, most importantly it\nincludes the introspection results (<code class="language-text">build.pgIntrospectionResultsByKind</code>),\ninflection functions (<code class="language-text">build.inflection</code>), and SQL helper (<code class="language-text">build.pgSql</code>, which\nis just an instance of <a href="https://www.npmjs.com/package/pg-sql2">pg-sql2</a>).</p>\n<p>The callback should return an object with two keys:</p>\n<ul>\n<li><code class="language-text">typeDefs</code>: a graphql AST generated with the <code class="language-text">gql</code> helper from\n<code class="language-text">graphile-utils</code> (note this is NOT from the <code class="language-text">graphql-tag</code> library, ours works\nin a slightly different way).</li>\n<li><code class="language-text">resolvers</code>: an object that\'s keyed by the GraphQL type names of types\ndefined (or extended) in <code class="language-text">typeDefs</code>, the values of which are objects keyed by\nthe field names with values that are resolver functions.</li>\n</ul>\n<p>For a larger example of how typeDefs and resolvers work, have a look at the\n<a href="https://www.apollographql.com/docs/graphql-tools/generate-schema.html">graphql-tools\ndocs</a> -\nours work in a similar way.</p>\n<p>Note that the resolve functions defined in <code class="language-text">resolvers</code> will be sent the\nstandard 4 GraphQL resolve arguments (<code class="language-text">parent</code>, <code class="language-text">args</code>, <code class="language-text">context</code>,\n<code class="language-text">resolveInfo</code>); but in addition they will be passed a 5th argument that\ncontains graphile-specific helpers. One such helper is\n<code class="language-text">selectGraphQLResultFromTable</code>, which inspects the incoming GraphQL query and\nautomatically pulls down the relevant rows from the database (including nested\nrelations) - which you can then return from the resolver. You can use the\n<code class="language-text">sqlBuilder</code> object to customise the generated query, changing the order,\nadding <code class="language-text">where</code> clauses, <code class="language-text">limit</code>s, etc.</p>\n<p>The <code class="language-text">sqlBuilder</code> has a number of methods which affect the query which will be generated. The main ones you\'re like to want are:</p>\n<ul>\n<li><code class="language-text">where(sqlFragment)</code>; e.g. <code class="language-text">sqlBuilder.where(build.pgSql.fragment`is_admin is true`)</code></li>\n<li><code class="language-text">orderBy(() =&gt; sqlFragment, ascending)</code>; e.g. <code class="language-text">sqlBuilder.orderBy(() =&gt; build.pgSql.fragment`created_at`, false)</code></li>\n<li><code class="language-text">limit(number)</code>; e.g. <code class="language-text">sqlBuilder.limit(1)</code></li>\n<li><code class="language-text">offset(number)</code>; e.g. <code class="language-text">sqlBuilder.offset(1)</code></li>\n<li><code class="language-text">select(() =&gt; sqlFragment, alias)</code>; e.g. <code class="language-text">sqlBuilder.select(() =&gt; build.pgSql.fragment`gen_random_uuid()`, &#39;__my_random_uuid&#39;)</code> - it\'s advised to start your alias with two underscores to prevent it clashing with any potential columns exposed as GraphQL fields.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> postgraphile <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"postgraphile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> makeExtendSchemaPlugin<span class="token punctuation">,</span> gql <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"graphile-utils"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="gatsby-highlight-code-line"><span class="token keyword">const</span> MyRandomUserPlugin <span class="token operator">=</span> <span class="token function">makeExtendSchemaPlugin</span><span class="token punctuation">(</span>build <span class="token operator">=></span> <span class="token punctuation">{</span>\n</span><span class="gatsby-highlight-code-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> pgSql<span class="token punctuation">:</span> sql <span class="token punctuation">}</span> <span class="token operator">=</span> build<span class="token punctuation">;</span>\n</span><span class="gatsby-highlight-code-line">  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n</span><span class="gatsby-highlight-code-line">    typeDefs<span class="token punctuation">:</span> gql<span class="token template-string"><span class="token string">`\n</span><span class="gatsby-highlight-code-line">      extend type Query {\n</span><span class="gatsby-highlight-code-line">        randomUser: User\n</span><span class="gatsby-highlight-code-line">      }\n</span><span class="gatsby-highlight-code-line">    `</span></span><span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">    resolvers<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n</span><span class="gatsby-highlight-code-line">      Query<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n</span><span class="gatsby-highlight-code-line">        randomUser<span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>\n</span><span class="gatsby-highlight-code-line">          _query<span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">          args<span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">          context<span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">          resolveInfo<span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">          <span class="token punctuation">{</span> selectGraphQLResultFromTable <span class="token punctuation">}</span>\n</span><span class="gatsby-highlight-code-line">        <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n</span><span class="gatsby-highlight-code-line">          <span class="token keyword">const</span> rows <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">selectGraphQLResultFromTable</span><span class="token punctuation">(</span>\n</span><span class="gatsby-highlight-code-line">            sql<span class="token punctuation">.</span>fragment<span class="token template-string"><span class="token string">`app_public.users`</span></span><span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token punctuation">(</span>tableAlias<span class="token punctuation">,</span> sqlBuilder<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n</span><span class="gatsby-highlight-code-line">              sqlBuilder<span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span>sql<span class="token punctuation">.</span>fragment<span class="token template-string"><span class="token string">`random()`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span><span class="gatsby-highlight-code-line">              sqlBuilder<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token punctuation">}</span>\n</span><span class="gatsby-highlight-code-line">          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span><span class="gatsby-highlight-code-line">          <span class="token keyword">return</span> rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</span><span class="gatsby-highlight-code-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span><span class="gatsby-highlight-code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n  <span class="token function">postgraphile</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DATABASE_URL</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"app_public"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    graphiql<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    appendPlugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>MyRandomUserPlugin<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3030</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>The above is a simple and fairly pointless example which would have been better\nserved by a <a href="/postgraphile/custom-queries/#custom-query-sql-procedures">Custom Query SQL\nProcedure</a>; however\nyou can also use this system to define mutations or to call out to external\nservices. For example, you might want to add a custom <code class="language-text">registerUser</code> mutation\nwhich inserts the new user into the database and also sends them an email:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> MyRegisterUserMutationPlugin <span class="token operator">=</span>\n<span class="token function">makeExtendSchemaPlugin</span><span class="token punctuation">(</span>build <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> pgSql<span class="token punctuation">:</span> sql <span class="token punctuation">}</span> <span class="token operator">=</span> build<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    typeDefs<span class="token punctuation">:</span> gql<span class="token template-string"><span class="token string">`\n      input RegisterUserInput {\n        name: String!\n        email: String!\n        bio: String\n      }\n\n      type RegisterUserPayload {\n        user: User @recurseDataGenerators\n      }\n\n      extend type Mutation {\n<span class="gatsby-highlight-code-line">        registerUser(input: RegisterUserInput!):\n</span>          RegisterUserPayload\n      }\n    `</span></span><span class="token punctuation">,</span>\n    resolvers<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      Mutation<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n<span class="gatsby-highlight-code-line">        registerUser<span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>\n</span><span class="gatsby-highlight-code-line">          _query<span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">          args<span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">          context<span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">          resolveInfo<span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">          <span class="token punctuation">{</span> selectGraphQLResultFromTable <span class="token punctuation">}</span>\n</span><span class="gatsby-highlight-code-line">        <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n</span><span class="gatsby-highlight-code-line">          <span class="token keyword">const</span> <span class="token punctuation">{</span> pgClient <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">;</span>\n</span><span class="gatsby-highlight-code-line">          <span class="token comment">// Start a sub-transaction</span>\n</span><span class="gatsby-highlight-code-line">          <span class="token keyword">await</span> pgClient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"SAVEPOINT graphql_mutation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span><span class="gatsby-highlight-code-line">          <span class="token keyword">try</span> <span class="token punctuation">{</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token comment">// Our custom logic to register the user:</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token keyword">const</span> <span class="token punctuation">{</span> rows<span class="token punctuation">:</span> <span class="token punctuation">[</span>user<span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> pgClient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>\n</span><span class="gatsby-highlight-code-line">              <span class="token template-string"><span class="token string">`INSERT INTO app_public.users(\n</span><span class="gatsby-highlight-code-line">                name, email, bio\n</span><span class="gatsby-highlight-code-line">              ) VALUES ($1, $2, $3)\n</span><span class="gatsby-highlight-code-line">              RETURNING *`</span></span><span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">              <span class="token punctuation">[</span>\n</span><span class="gatsby-highlight-code-line">                args<span class="token punctuation">.</span>input<span class="token punctuation">.</span>name<span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">                args<span class="token punctuation">.</span>input<span class="token punctuation">.</span>email<span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">                args<span class="token punctuation">.</span>input<span class="token punctuation">.</span>bio<span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">              <span class="token punctuation">]</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span><span class="gatsby-highlight-code-line">\n</span><span class="gatsby-highlight-code-line">            <span class="token comment">// Now we fetch the result that the GraphQL</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token comment">// client requested, using the new user</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token comment">// account as the source of the data.</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token keyword">const</span> <span class="token punctuation">[</span>row<span class="token punctuation">]</span> <span class="token operator">=</span>\n</span><span class="gatsby-highlight-code-line">              <span class="token keyword">await</span> <span class="token function">selectGraphQLResultFromTable</span><span class="token punctuation">(</span>\n</span><span class="gatsby-highlight-code-line">                sql<span class="token punctuation">.</span>fragment<span class="token template-string"><span class="token string">`app_public.users`</span></span><span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">                <span class="token punctuation">(</span>tableAlias<span class="token punctuation">,</span> sqlBuilder<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n</span><span class="gatsby-highlight-code-line">                  sqlBuilder<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>\n</span><span class="gatsby-highlight-code-line">                    sql<span class="token punctuation">.</span>fragment<span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tableAlias<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.id = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n</span><span class="gatsby-highlight-code-line">                      sql<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n</span><span class="gatsby-highlight-code-line">                    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>\n</span><span class="gatsby-highlight-code-line">                  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span><span class="gatsby-highlight-code-line">                <span class="token punctuation">}</span>\n</span><span class="gatsby-highlight-code-line">              <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span><span class="gatsby-highlight-code-line">\n</span><span class="gatsby-highlight-code-line">            <span class="token comment">// Finally we send the email. If this</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token comment">// fails then we\'ll catch the error</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token comment">// and roll back the transaction, and</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token comment">// it will be as if the user never</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token comment">// registered</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token keyword">await</span> <span class="token function">mockSendEmail</span><span class="token punctuation">(</span>\n</span><span class="gatsby-highlight-code-line">              args<span class="token punctuation">.</span>input<span class="token punctuation">.</span>email<span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">              <span class="token string">"Welcome to my site"</span><span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">              <span class="token template-string"><span class="token string">`You\'re user </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - `</span></span> <span class="token operator">+</span>\n</span><span class="gatsby-highlight-code-line">                <span class="token template-string"><span class="token string">`thanks for being awesome`</span></span>\n</span><span class="gatsby-highlight-code-line">            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span><span class="gatsby-highlight-code-line">\n</span><span class="gatsby-highlight-code-line">            <span class="token comment">// Success! Write the user to the database.</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token keyword">await</span> pgClient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"RELEASE SAVEPOINT graphql_mutation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span><span class="gatsby-highlight-code-line">\n</span><span class="gatsby-highlight-code-line">            <span class="token comment">// We pass the fetched result via the</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token comment">// `user` field to match the</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token comment">// @recurseDataGenerators directive</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token comment">// used above. GraphQL mutation</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token comment">// payloads typically have additional</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token comment">// fields.</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token keyword">return</span> <span class="token punctuation">{</span>\n</span><span class="gatsby-highlight-code-line">              user<span class="token punctuation">:</span> row<span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span><span class="gatsby-highlight-code-line">          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token comment">// Oh noes! If at first you don\'t succeed,</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token comment">// destroy all evidence you ever tried.</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token keyword">await</span> pgClient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"ROLLBACK TO SAVEPOINT graphql_mutation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span><span class="gatsby-highlight-code-line">            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>\n</span><span class="gatsby-highlight-code-line">          <span class="token punctuation">}</span>\n</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Note that the <code class="language-text">@recurseDataGenerators</code> directive here tells PostGraphile to act\nas if the RegisterUserPayload didn\'t exist and instead the <code class="language-text">user</code> field was\nreturned by the mutation directly. This is because we often add other fields to\nmutation payloads, such as <code class="language-text">query</code> for the root Query type.</p>\n<h3 id="loading-additional-plugins"><a href="#loading-additional-plugins" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Loading additional plugins</h3>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token comment"># For a local file:</span>\npostgraphile \\\n  --append-plugins <span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span>/add-http-bin-plugin.js \\\n  -c postgres://localhost/mydb\n\n<span class="token comment"># Or, for an npm plugin:</span>\npostgraphile \\\n  --append-plugins postgraphile-plugin-connection-filter \\\n  -c postgres://localhost/mydb</code></pre>\n      </div>\n<p>If you\'re using the CLI you can use option <code class="language-text">--append-plugins</code> to load additional\nplugins.  You specify a comma separated list of module specs. A module spec is\na path to a JS file to load, optionally followed by a colon and the name of the\nexport (you must omit this if the function is exported via\n<code class="language-text">module.exports = function MyPlugin(...){...}</code>). E.g.</p>\n<ul>\n<li><code class="language-text">--append-plugins my-npm-module</code> (requires <code class="language-text">module.exports = function NpmPlugin(...) {...}</code>)</li>\n<li><code class="language-text">--append-plugins /path/to/local/module.js:MyPlugin</code> (requires <code class="language-text">exports.MyPlugin = function MyPlugin(...) {...}</code>)</li>\n</ul>\n<p>If you\'re using postgraphile as a library you can instead use the appendPlugins\noption which is simply an array of functions (<em>you perform your own requiring</em>!)</p>\n<p>Remember: multiple versions of graphql in your <code class="language-text">node_modules</code> will cause\nproblems; so we recommend using the <code class="language-text">graphql</code> object that\'s available on the\n<code class="language-text">Build</code> object (second argument to hooks).</p>\n<h3 id="writing-your-own-plugins"><a href="#writing-your-own-plugins" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Writing your own plugins</h3>\n<p>The core PG-related plugins can be found here:</p>\n<p><a href="https://github.com/graphile/graphile-build/tree/master/packages/graphile-build-pg/src/plugins">https://github.com/graphile/graphile-build/tree/master/packages/graphile-build-pg/src/plugins</a></p>\n<p>These plugins introduce small amounts of functionality, and build upon each\nother. The order in which the plugins are loaded is significant, and can be\nfound from the <code class="language-text">defaultPlugins</code> export in\n<a href="https://github.com/graphile/graphile-build/blob/master/packages/graphile-build-pg/src/index.js"><code class="language-text">src/index.js</code></a>\nof the <code class="language-text">graphile-build-pg</code> module.</p>\n<p>You can extend PostGraphile\'s GraphQL schema by adding plugins before or after\nthe default plugins. You may even opt to replace the entire list of plugins\nused to build the schema. Graphile Build plugins are built on top of the\n<a href="http://graphql.org/graphql-js/">GraphQL reference JS implementation</a>, so it is\nrecommended that you have familiarity with that before attempting to write your\nown plugins.</p>\n<h3 id="adding-root-querymutation-fields"><a href="#adding-root-querymutation-fields" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Adding root query/mutation fields</h3>\n<p>A common request is to add additional root-level fields to your schema, for\nexample to integrate external services. To do this we must add a\n\'GraphQLObjectType:fields\' hook and then add our new field:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// add-http-bin-plugin.js</span>\n<span class="token keyword">const</span> fetch <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"node-fetch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">AddHttpBinPlugin</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> <span class="token punctuation">{</span> pgExtendedTypes <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  builder<span class="token punctuation">.</span><span class="token function">hook</span><span class="token punctuation">(</span>\n    <span class="token string">"GraphQLObjectType:fields"</span><span class="token punctuation">,</span>\n    <span class="token punctuation">(</span>\n      fields<span class="token punctuation">,</span> <span class="token comment">// Input object - the fields for this GraphQLObjectType</span>\n      <span class="token punctuation">{</span> extend<span class="token punctuation">,</span> getTypeByName <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// Build object - handy utils</span>\n      <span class="token punctuation">{</span> scope<span class="token punctuation">:</span> <span class="token punctuation">{</span> isRootQuery <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment">// Context object - used for filtering</span>\n    <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRootQuery<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// This isn\'t the object we want to modify:</span>\n        <span class="token comment">// return the input object unmodified</span>\n        <span class="token keyword">return</span> fields<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// We don\'t want to introduce a new JSON type as that will clash,</span>\n      <span class="token comment">// so let\'s find the JSON type that other fields use:</span>\n      <span class="token keyword">const</span> JSONType <span class="token operator">=</span> <span class="token function">getTypeByName</span><span class="token punctuation">(</span><span class="token string">"JSON"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">return</span> <span class="token function">extend</span><span class="token punctuation">(</span>fields<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        httpBinHeaders<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          type<span class="token punctuation">:</span> JSONType<span class="token punctuation">,</span>\n          <span class="token keyword">async</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://httpbin.org/headers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>pgExtendedTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token comment">// This setting is enabled through postgraphile\'s</span>\n              <span class="token comment">// `--dynamic-json` option, if enabled return JSON:</span>\n              <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n              <span class="token comment">// If Dynamic JSON is not enabled, we want a JSON string instead</span>\n              <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> AddHttpBinPlugin<span class="token punctuation">;</span></code></pre>\n      </div>\n<p>(If you wanted to add a mutation you\'d use <code class="language-text">isRootMutation</code> rather than <code class="language-text">isRootQuery</code>.)</p>\n<p>We can then load our plugin into PostGraphile via:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">postgraphile --append-plugins `pwd`/add-http-bin-plugin.js -c postgres://localhost/mydb</code></pre>\n      </div>\n<p>Note that the return types of added fields (e.g. <code class="language-text">JSONType</code> above) do not need\nto be implemented via Graphile Build\'s\n<a href="/graphile-build/build-object/#newwithhookstype-spec-scope"><code class="language-text">newWithHooks</code></a> -\nyou can use standard GraphQL objects too. (However, if you do not use\n<code class="language-text">newWithHooks</code> then the objects referenced cannot be extended via plugins.)</p>\n<h3 id="wrapping-an-existing-resolver"><a href="#wrapping-an-existing-resolver" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Wrapping an existing resolver</h3>\n<p>Sometimes you might want to override what an existing field does. Due to the\nway that PostGraphile works (where the root Query field resolvers are the only\nones who perform SQL queries) this is generally most useful at the top level.</p>\n<p>The following example modifies the \'createLink\' mutation so that it performs\nsome additional validation (thrown an error if the link\'s <code class="language-text">title</code> is too short)\nand performs an action after the link has been saved. You could use a plugin\nlike this to achieve many different tasks, including emailing a user after\ntheir account is created or logging failed authentication attempts.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">performAnotherTask</span><span class="token punctuation">(</span>linkId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`We created link </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>linkId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">CreateLinkWrapPlugin</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  builder<span class="token punctuation">.</span><span class="token function">hook</span><span class="token punctuation">(</span>\n    <span class="token string">"GraphQLObjectType:fields:field"</span><span class="token punctuation">,</span>\n    <span class="token punctuation">(</span>\n      field<span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> pgSql<span class="token punctuation">:</span> sql <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> scope<span class="token punctuation">:</span> <span class="token punctuation">{</span> isRootMutation<span class="token punctuation">,</span> fieldName <span class="token punctuation">}</span><span class="token punctuation">,</span> addArgDataGenerator <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRootMutation <span class="token operator">||</span> fieldName <span class="token operator">!==</span> <span class="token string">"createLink"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// If it\'s not the root mutation, or the mutation isn\'t the \'createLink\'</span>\n        <span class="token comment">// mutation then we don\'t want to modify it - so return the input object</span>\n        <span class="token comment">// unmodified.</span>\n        <span class="token keyword">return</span> field<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// We\'re going to need link.id for our `performAnotherTask`; so we\'re going</span>\n      <span class="token comment">// to abuse addArgDataGenerator to make sure that this field is ALWAYS</span>\n      <span class="token comment">// requested, even if the user doesn\'t specify it. We\'re careful to alias</span>\n      <span class="token comment">// the result to a field that begins with `__` as that\'s forbidden by</span>\n      <span class="token comment">// GraphQL and thus cannot clash with a user\'s fields.</span>\n      <span class="token function">addArgDataGenerator</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        pgQuery<span class="token punctuation">:</span> queryBuilder <span class="token operator">=></span> <span class="token punctuation">{</span>\n          queryBuilder<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>\n            <span class="token comment">// Select this value from the result of the INSERT:</span>\n            sql<span class="token punctuation">.</span>query<span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>queryBuilder<span class="token punctuation">.</span><span class="token function">getTableAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.id`</span></span><span class="token punctuation">,</span>\n            <span class="token comment">// And give it this name in the result data:</span>\n            <span class="token string">"__createdRecordId"</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// It\'s possible that `resolve` isn\'t specified on a field, so in that case</span>\n      <span class="token comment">// we fall back to a default resolver.</span>\n      <span class="token keyword">const</span> <span class="token function-variable function">defaultResolver</span> <span class="token operator">=</span> obj <span class="token operator">=></span> obj<span class="token punctuation">[</span>fieldName<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// Extract the old resolver from `field`</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> resolve<span class="token punctuation">:</span> oldResolve <span class="token operator">=</span> defaultResolver<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span> <span class="token operator">=</span> field<span class="token punctuation">;</span>\n\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Copy over everything except \'resolve\'</span>\n        <span class="token operator">...</span>rest<span class="token punctuation">,</span>\n\n        <span class="token comment">// Add our new resolver which wraps the old resolver</span>\n        <span class="token keyword">async</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token operator">...</span>resolveParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// Perform some validation (or any other action you want to do before</span>\n          <span class="token comment">// calling the old resolver)</span>\n          <span class="token keyword">const</span> <span class="token constant">RESOLVE_ARGS_INDEX</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n          <span class="token keyword">const</span> <span class="token punctuation">{</span> input<span class="token punctuation">:</span> <span class="token punctuation">{</span> link<span class="token punctuation">:</span> <span class="token punctuation">{</span> title <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> resolveParams<span class="token punctuation">[</span>\n            <span class="token constant">RESOLVE_ARGS_INDEX</span>\n          <span class="token punctuation">]</span><span class="token punctuation">;</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>title<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Title is too short!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n\n          <span class="token comment">// Call the old resolver (you SHOULD NOT modify the arguments it</span>\n          <span class="token comment">// receives unless you also manipulate the AST it gets passed as the</span>\n          <span class="token comment">// 4th argument; which is quite a lot of effort) and store the result.</span>\n          <span class="token keyword">const</span> oldResolveResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">oldResolve</span><span class="token punctuation">(</span><span class="token operator">...</span>resolveParams<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n          <span class="token comment">// Perform any tasks we want to do after the record is created.</span>\n          <span class="token keyword">await</span> <span class="token function">performAnotherTask</span><span class="token punctuation">(</span>oldResolveResult<span class="token punctuation">.</span>data<span class="token punctuation">.</span>__createdRecordId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n          <span class="token comment">// Finally return the result.</span>\n          <span class="token keyword">return</span> oldResolveResult<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3 id="removing-things-from-the-schema"><a href="#removing-things-from-the-schema" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Removing things from the schema</h3>\n<p><strong>If you\'re looking for an easy way to remove a few things, check out <a href="/postgraphile/smart-comments/">smart\ncomments</a>.</strong>\nIf you want to remove a class of things from the schema then you can remove\nthe plugin that adds them; for example if you no longer wanted to allow\nordering by all the columns of a table (i.e. only allow ordering by the primary\nkey) you could omit\n<a href="https://github.com/graphile/graphile-build/blob/master/packages/graphile-build-pg/src/plugins/PgOrderAllColumnsPlugin.js">PgOrderAllColumnsPlugin</a>.\nIf you didn\'t want computed columns added you could omit\n<a href="https://github.com/graphile/graphile-build/blob/master/packages/graphile-build-pg/src/plugins/PgComputedColumnsPlugin.js">PgComputedColumnsPlugin</a>.</p>\n<p>However, sometimes you need more surgical precision, and you only want to\nremove one specific type of thing. To achieve this you need to add a hook to the\nthing that owns the thing you wish to remove - for example if you\nwant to remove a field <code class="language-text">bar</code> from an object type <code class="language-text">Foo</code> you could hook\n<code class="language-text">GraphQLObjectType:fields</code> and return the set of fields less the one you want\nremoved. </p>\n<p>Here\'s an example of a plugin generator you could use to generate plugins to\nremove individual fields. This is just to demonstrate how a plugin to do this\nmight work, <a href="/postgraphile/smart-comments/">smart comments</a> are likely a better\napproach.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> omit <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"lodash/omit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">removeFieldPluginGenerator</span><span class="token punctuation">(</span>objectName<span class="token punctuation">,</span> fieldName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    builder<span class="token punctuation">.</span><span class="token function">hook</span><span class="token punctuation">(</span><span class="token string">"GraphQLObjectType:fields"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>fields<span class="token punctuation">,</span> _<span class="token punctuation">,</span> <span class="token punctuation">{</span> Self <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>Self<span class="token punctuation">.</span>name <span class="token operator">!==</span> objectName<span class="token punctuation">)</span> <span class="token keyword">return</span> fields<span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token function">omit</span><span class="token punctuation">(</span>fields<span class="token punctuation">,</span> <span class="token punctuation">[</span>fieldName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// For debugging:</span>\n  fn<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token template-string"><span class="token string">`RemoveFieldPlugin:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>objectName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fieldName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> fn<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> RemoveFooDotBarPlugin <span class="token operator">=</span> <span class="token function">removeFieldPluginGenerator</span><span class="token punctuation">(</span><span class="token string">"Foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> RemoveFooDotBarPlugin<span class="token punctuation">;</span></code></pre>\n      </div>',
frontmatter:{path:"/postgraphile/extending/",title:"GraphQL Schema Plugins"}},nav:{edges:[{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [0] >>> JSON",name:"graphile-build",sections:[{id:"guides",title:"Overview"},{id:"library-reference",title:"Using the Library"},{id:"plugin-reference",title:"Building a Plugin"}],pages:[{to:"/graphile-build/getting-started/",title:"Getting Started",sectionId:"guides"},{to:"/graphile-build/plugins/",title:"Plugins",sectionId:"guides"},{to:"/graphile-build/hooks/",title:"Hooks",sectionId:"guides"},{to:"/graphile-build/look-ahead/",title:"Look Ahead",sectionId:"guides"},{to:"/graphile-build/graphile-build/",title:"graphile-build",sectionId:"library-reference"},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"library-reference"},{to:"/graphile-build/plugin-options/",title:"Options",sectionId:"library-reference"},{to:"/graphile-build/default-plugins/",title:"Default Plugins",sectionId:"library-reference"},{to:"/graphile-build/omitting-plugins/",title:"Omitting Plugins",sectionId:"guides"},{to:"/graphile-build/all-hooks/",title:"All Hooks",sectionId:"plugin-reference"},{to:"/graphile-build/build-object/",title:"Build Object",sectionId:"plugin-reference"},{to:"/graphile-build/context-object/",title:"Context Object",sectionId:"plugin-reference"},{to:"/graphile-build/schema-builder/",title:"SchemaBuilder",sectionId:"plugin-reference"}]}},{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [1] >>> JSON",name:"postgraphile",sections:[{id:"overview",title:"Overview"},{id:"guides",title:"Guides"},{id:"usage",title:"Usage"},{id:"community",title:"Community"}],pages:[{to:"/postgraphile/introduction/",title:"Introduction",sectionId:"overview"},{to:"/postgraphile/quick-start-guide/",title:"Quick Start Guide",sectionId:"overview"},{to:"/postgraphile/evaluating/",title:"Evaluating for your Project",sectionId:"guides"},{to:"/postgraphile/requirements/",title:"Requirements",sectionId:"overview"},{to:"/postgraphile/performance/",title:"Performance",sectionId:"overview"},{to:"/postgraphile/connections/",title:"Connections",sectionId:"overview"},{to:"/postgraphile/filtering/",title:"Filtering",sectionId:"overview"},{to:"/postgraphile/relations/",title:"Relations",sectionId:"overview"},{to:"/postgraphile/crud-mutations/",title:"CRUD Mutations",sectionId:"overview"},{to:"/postgraphile/computed-columns/",title:"Computed Columns",sectionId:"overview"},{to:"/postgraphile/custom-queries/",title:"Custom Queries",sectionId:"overview"},{to:"/postgraphile/custom-mutations/",title:"Custom Mutations",sectionId:"overview"},{to:"/postgraphile/smart-comments/",title:"Smart Comments",sectionId:"overview"},{to:"/postgraphile/security/",title:"Security",sectionId:"overview"},{to:"/postgraphile/introspection/",title:"Introspection",sectionId:"overview"},{to:"/postgraphile/extending/",title:"Schema Plugins",sectionId:"overview"},{to:"/postgraphile/plugins/",title:"Server Plugins",sectionId:"overview"},{to:"/postgraphile/subscriptions/",title:"Subscriptions",sectionId:"overview"},{to:"/postgraphile/production/",title:"Production Considerations",sectionId:"overview"},{to:"/postgraphile/reserved-keywords/",title:"Reserved Keywords",sectionId:"overview"},{to:"/postgraphile/debugging/",title:"Debugging",sectionId:"overview"},{to:"/postgraphile/jwt-guide/",title:"PostGraphile JWT Guide",sectionId:"guides"},{to:"/postgraphile/default-role/",title:"The Default Role",sectionId:"guides"},{to:"/postgraphile/procedures/",title:"PostgreSQL Procedures",sectionId:"guides"},{to:"/postgraphile/postgresql-schema-design/",title:"PostgreSQL Schema Design",sectionId:"guides"},{to:"/postgraphile/postgresql-indexes/",title:"PostgreSQL Indexes",sectionId:"guides"},{to:"/postgraphile/v4-new-features/",title:"v4 Feature Guide",sectionId:"guides"},{to:"/postgraphile/v3-migration/",title:"v3 → v4 Migration Guide",sectionId:"guides"},{to:"/postgraphile/usage-cli/",title:"CLI Usage",sectionId:"usage"},{to:"/postgraphile/usage-library/",title:"Library Usage",sectionId:"usage"},{to:"/postgraphile/usage-schema/",title:"Schema-only Usage",sectionId:"usage"},{to:"/postgraphile/community-plugins/",title:"Community Plugins",sectionId:"community"},{to:"/postgraphile/community-chat/",title:"Community Chat",sectionId:"community"},{to:"/postgraphile/code-of-conduct/",title:"Code of Conduct",sectionId:"community"}]}},{node:{id:"/Users/benjiegillam/Dev/graphile.org/src/data/nav.json absPath of file [2] >>> JSON",name:"graphile-build-pg",sections:[{id:"usage",title:"Usage"}],pages:[{to:"/postgraphile/settings/",title:"Settings",sectionId:"usage"}]}}]}},pathContext:{layout:"page"}}}});
//# sourceMappingURL=path---postgraphile-extending-01f9ed8f9859af3b0a2a.js.map