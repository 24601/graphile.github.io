{"data":{"remark":{"html":"<h2 id=\"postgresql-functions\"><a href=\"#postgresql-functions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PostgreSQL Functions</h2>\n<p>One of the easiest ways to add more capabilities to your PostGraphile schema\nis with PostgreSQL functions. The three main methods are:</p>\n<ul>\n<li><a href=\"/postgraphile/computed-columns/\">Computed Columns</a> enable you to add a computed field to a table type</li>\n<li><a href=\"/postgraphile/custom-queries/\">Custom Queries</a> enable you to add a root level Query field which can return a scalar, list, custom type, table row or even a table connection</li>\n<li><a href=\"/postgraphile/custom-mutations/\">Custom Mutations</a> enable you to add a root level Mutation field which can cause modifications to your database and return nothing (<code class=\"language-text\">void</code>), a scalar, list, custom type, table row or list of table rows (but not a connection, since you cannot paginate over a mutation)</li>\n</ul>\n<h3 id=\"understanding-functions\"><a href=\"#understanding-functions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Understanding Functions</h3>\n<p>In order to make the most powerful PostGraphile server you can, it's very\nimportant to understand PostgreSQL functions. Functions allow you to define\nbusiness logic in the database using SQL or one of many other scripting\nlanguages. Putting your business logic in the database will often be more\nperformant then doing so in the application layer as PostgreSQL is finely\ntuned for data intensive uses.</p>\n<p>For some function examples, you can refer to the <a href=\"https://github.com/graphile/postgraphile/blob/master/examples/forum/schema.sql\">forum example SQL\nschema</a>.</p>\n<h3 id=\"recommended-reading\"><a href=\"#recommended-reading\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Reading</h3>\n<ul>\n<li>PostgreSQL <a href=\"http://www.postgresql.org/docs/current/static/sql-createfunction.html\"><code class=\"language-text\">CREATE FUNCTION</code></a> documentation for actually creating functions.</li>\n<li>PostgreSQL <a href=\"http://www.postgresql.org/docs/current/static/sql-createtrigger.html\"><code class=\"language-text\">CREATE TRIGGER</code></a> documentation.</li>\n<li>StackOverflow answer describing <a href=\"http://stackoverflow.com/a/11166268/1568890\">computed columns in PostgreSQL</a>.</li>\n</ul>\n<h3 id=\"procedural-languages\"><a href=\"#procedural-languages\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Procedural Languages</h3>\n<p>Functions in PostgreSQL require you to use either SQL or a procedural\nlanguage. The most common procedural language in PostgreSQL is\n<a href=\"http://www.postgresql.org/docs/current/static/plpgsql.html\">PL/pgSQL</a>. SQL is probably the easiest to use as you are most\nlikely already familiar with it. PL/pgSQL is PostgreSQL’s custom procedural\nlanguage, it's fairly easy to pick up and there are plenty of StackOverflow\nand other resources for this language. You’ll need to learn PL/pgSQL (or one\nof the other procedural languages) if you want to write any triggers, because\nSQL can’t be used for triggers. Don’t worry - you can definitely make awesome\napplications without a deep knowledge of PL/pgSQL.</p>\n<p>A simple function written with <code class=\"language-text\">LANGUAGE sql</code> looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token keyword\">add</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> b <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">AS</span> $$\n  <span class=\"token keyword\">select</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n$$ <span class=\"token keyword\">LANGUAGE</span> <span class=\"token keyword\">sql</span> IMMUTABLE STRICT<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The same function with <code class=\"language-text\">LANGUAGE plpgsql</code> could look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token keyword\">add</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> b <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">AS</span> $$\n<span class=\"token keyword\">BEGIN</span>\n  <span class=\"token keyword\">RETURN</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span>\n$$ <span class=\"token keyword\">LANGUAGE</span> plpgsql IMMUTABLE STRICT<span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you don’t want to use PL/pgSQL or SQL, many popular scripting languages can be used <em>inside</em> PostgreSQL to write your functions! You can see a few of these projects here:</p>\n<ul>\n<li><a href=\"https://github.com/plv8/plv8\">JavaScript (plv8)</a></li>\n<li><a href=\"https://github.com/knu/postgresql-plruby\">Ruby (plruby)</a></li>\n</ul>\n<p>For example, a function defined using JavaScript could look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- This does look the exact same as the PL/pgSQL example…</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token keyword\">add</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> b <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">AS</span> $$\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n$$ <span class=\"token keyword\">LANGUAGE</span> plv8 IMMUTABLE STRICT<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Here’s a better example from the plv8 repo…</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> plv8_test<span class=\"token punctuation\">(</span><span class=\"token keyword\">keys</span> <span class=\"token keyword\">text</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> vals <span class=\"token keyword\">text</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">text</span> <span class=\"token keyword\">AS</span> $$\n  var object <span class=\"token operator\">=</span> {}\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>var i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">keys</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span> {\n    object<span class=\"token punctuation\">[</span><span class=\"token keyword\">keys</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> vals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n  }\n  <span class=\"token keyword\">return</span> JSON<span class=\"token punctuation\">.</span>stringify<span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span>\n$$ <span class=\"token keyword\">LANGUAGE</span> plv8 IMMUTABLE STRICT<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"named-arguments\"><a href=\"#named-arguments\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Named Arguments</h3>\n<p>PostgreSQL allows you to mix named and positional (unnamed) arguments in your functions. However, GraphQL will <em>only</em> allow named arguments. So if you don’t name an argument, PostGraphile will give it a name like <code class=\"language-text\">arg1</code>, <code class=\"language-text\">arg2</code>, <code class=\"language-text\">arg3</code>, and so on. An example of a function with unnamed arguments is as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token keyword\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">AS</span> $$\n  <span class=\"token keyword\">SELECT</span> $<span class=\"token number\">1</span> <span class=\"token operator\">+</span> $<span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n$$ <span class=\"token keyword\">LANGUAGE</span> <span class=\"token keyword\">sql</span> IMMUTABLE STRICT<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Whereas named arguments look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token keyword\">add</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> b <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">AS</span> $$\n  <span class=\"token keyword\">select</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n$$ <span class=\"token keyword\">LANGUAGE</span> <span class=\"token keyword\">sql</span> IMMUTABLE STRICT<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"volatile-mutation-functions\"><a href=\"#volatile-mutation-functions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VOLATILE (Mutation) Functions</h3>\n<p>By default, a function is “volatile”. For example, a function defined as:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> my_function<span class=\"token punctuation\">(</span>a <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> b <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">AS</span> $$ … $$ <span class=\"token keyword\">LANGUAGE</span> <span class=\"token keyword\">sql</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Is equivalent to a function defined as:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> my_function<span class=\"token punctuation\">(</span>a <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> b <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">AS</span> $$ … $$ <span class=\"token keyword\">LANGUAGE</span> <span class=\"token keyword\">sql</span> VOLATILE<span class=\"token punctuation\">;</span></code></pre></div>\n<p>From the PostgreSQL docs:</p>\n<blockquote>\n<p><code class=\"language-text\">VOLATILE</code> indicates that the function value can change even within a single table scan, so no optimizations can be made… But note that any function that has side-effects must be classified volatile, even if its result is quite predictable, to prevent calls from being optimized away; an example is <code class=\"language-text\">setval()</code>.</p>\n</blockquote>\n<p>In simpler terms <code class=\"language-text\">VOLATILE</code> basically means you are changing data or storing state.</p>\n<p>Anyone familiar with HTTP could compare a <code class=\"language-text\">VOLATILE</code> function to “unsafe” HTTP methods like <code class=\"language-text\">POST</code>, <code class=\"language-text\">PUT</code>, <code class=\"language-text\">PATCH</code>, and <code class=\"language-text\">DELETE</code>.</p>\n<p>Certain VOLATILE functions will be exposed by PostGraphile as <a href=\"/postgraphile/custom-mutations/\">custom mutations</a>.</p>\n<h3 id=\"stableimmutable-query-functions\"><a href=\"#stableimmutable-query-functions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STABLE/IMMUTABLE (Query) Functions</h3>\n<p>If your function does not modify any data or state, you should declare it as <code class=\"language-text\">STABLE</code>. (If your function depends only on its arguments and does not fetch data from other sources such as tables, then you can declare it as <code class=\"language-text\">IMMUTABLE</code> which is a stricter form of <code class=\"language-text\">STABLE</code>.)</p>\n<p>By marking your function as <code class=\"language-text\">STABLE</code> or <code class=\"language-text\">IMMUTABLE</code>, PostgreSQL knows that it can apply a number of optimisations,\nincluding memoization to avoiding calling it multiple times for the same inputs during the same statement.</p>\n<p>Here's examples of defining functions as STABLE/IMMUTABLE:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> my_function<span class=\"token punctuation\">(</span>a <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> b <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">AS</span> $$ … $$ <span class=\"token keyword\">LANGUAGE</span> <span class=\"token keyword\">sql</span> STABLE<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- or…</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> my_function<span class=\"token punctuation\">(</span>a <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> b <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">AS</span> $$ … $$ <span class=\"token keyword\">LANGUAGE</span> <span class=\"token keyword\">sql</span> IMMUTABLE<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- or if you wanted to return a row from a table…</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> my_function<span class=\"token punctuation\">(</span>a <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> b <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> my_table <span class=\"token keyword\">AS</span> $$ … $$ <span class=\"token keyword\">LANGUAGE</span> <span class=\"token keyword\">sql</span> STABLE<span class=\"token punctuation\">;</span></code></pre></div>\n<p>From the PostgreSQL docs:</p>\n<blockquote>\n<p><code class=\"language-text\">IMMUTABLE</code> indicates that the function cannot modify the database and always returns the same result when given the same argument values; that is, it does not do database lookups or otherwise use information not directly present in its argument list. If this option is given, any call of the function with all-constant arguments can be immediately replaced with the function value.</p>\n</blockquote>\n<p>and…</p>\n<blockquote>\n<p><code class=\"language-text\">STABLE</code> indicates that the function cannot modify the database, and that within a single table scan it will consistently return the same result for the same argument values, but that its result could change across SQL statements. This is the appropriate selection for functions whose results depend on database lookups, parameter variables (such as the current time zone), etc. (It is inappropriate for AFTER triggers that wish to query rows modified by the current command).</p>\n</blockquote>\n<p>To use the HTTP analogy again, <code class=\"language-text\">IMMUTABLE</code> and <code class=\"language-text\">STABLE</code> are comparable to “safe” HTTP methods like <code class=\"language-text\">GET</code> and <code class=\"language-text\">HEAD</code>.</p>\n<p>Certain STABLE/IMMUTABLE functions will be exposed by PostGraphile as <a href=\"/postgraphile/custom-queries/\">custom queries</a> or <a href=\"/postgraphile/computed-columns/\">computed columns</a>.</p>\n<h3 id=\"setof-functions---connections\"><a href=\"#setof-functions---connections\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SETOF Functions - Connections</h3>\n<p>As well as scalars, compound types, and arrays of these, PostgreSQL functions\ncan also return sets. Sets emulate tables, and so it's natural for\nPostGraphile to expose these to GraphQL using\n<a href=\"/postgraphile/connections/\">connections</a>.</p>\n<p>SETOF functions can be a powerful way of exposing data to the user that may\nbe too much for them to handle all at once and require pagination.</p>\n<p>To create a function that returns a connection, you could use SQL such as this:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- Assuming we already have a table named `person`…</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> my_function<span class=\"token punctuation\">(</span>a <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> b <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> SETOF person <span class=\"token keyword\">AS</span> $$ … $$ <span class=\"token keyword\">LANGUAGE</span> <span class=\"token keyword\">sql</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This function would be recognised as a <a href=\"/postgraphile/custom-queries/\">custom\nquery</a>, and could be queried like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  myFunction<span class=\"token punctuation\">(</span><span class=\"token attr-name\">a</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">b</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">first</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>    pageInfo <span class=\"token punctuation\">{</span>\n      hasNextPage\n      hasPrevPage\n    <span class=\"token punctuation\">}</span>\n    edges <span class=\"token punctuation\">{</span>\n      cursor\n      node <span class=\"token punctuation\">{</span>\n        id\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>More information on constructing advanced queries can be found\n<a href=\"/postgraphile/custom-queries/\">here</a>.</p>\n<hr>\n<p><em>This article was originally written by <a href=\"https://twitter.com/calebmer\">Caleb Meredith</a> but has been heavily edited since.</em></p>","frontmatter":{"path":"/postgraphile/functions/","title":"Functions","showExamples":null}},"nav":{"edges":[{"node":{"id":"9bbe991b-c663-586e-8e81-7b2e8de70cff","name":"news","sections":[{"id":"main","title":"Archive"},{"id":"about","title":"About"}],"pages":[{"to":"/news/postgraphile-version-4-1/","title":"Version 4.1 - Better Webpackability","sectionId":"main","subpages":null},{"to":"/news/postgraphile-version-4/","title":"Version 4 - Fantastic Performance","sectionId":"main","subpages":null},{"to":"/news/press-kit/","title":"Press Kit","sectionId":"about","subpages":null}]}},{"node":{"id":"c381a13f-6887-5a2b-9a97-0a1b838ea122","name":"graphile-build","sections":[{"id":"guides","title":"Overview"},{"id":"library-reference","title":"Using the Library"},{"id":"plugin-reference","title":"Building a Plugin"}],"pages":[{"to":"/graphile-build/getting-started/","title":"Getting Started","sectionId":"guides","subpages":[]},{"to":"/graphile-build/plugins/","title":"Plugins","sectionId":"guides","subpages":[]},{"to":"/graphile-build/hooks/","title":"Hooks","sectionId":"guides","subpages":[]},{"to":"/graphile-build/look-ahead/","title":"Look Ahead","sectionId":"guides","subpages":[]},{"to":"/graphile-build/graphile-build/","title":"graphile-build","sectionId":"library-reference","subpages":[]},{"to":"/graphile-build/schema-builder/","title":"SchemaBuilder","sectionId":"library-reference","subpages":[]},{"to":"/graphile-build/plugin-options/","title":"Options","sectionId":"library-reference","subpages":[]},{"to":"/graphile-build/default-plugins/","title":"Default Plugins","sectionId":"library-reference","subpages":[]},{"to":"/graphile-build/omitting-plugins/","title":"Omitting Plugins","sectionId":"guides","subpages":[]},{"to":"/graphile-build/all-hooks/","title":"All Hooks","sectionId":"plugin-reference","subpages":[]},{"to":"/graphile-build/build-object/","title":"Build Object","sectionId":"plugin-reference","subpages":[]},{"to":"/graphile-build/context-object/","title":"Context Object","sectionId":"plugin-reference","subpages":[]},{"to":"/graphile-build/schema-builder/","title":"SchemaBuilder","sectionId":"plugin-reference","subpages":[]}]}},{"node":{"id":"880fa42f-04a9-5f12-b32b-0c0b09e34af0","name":"postgraphile","sections":[{"id":"overview","title":"Overview"},{"id":"basics","title":"Operation"},{"id":"customising","title":"Customising"},{"id":"guides","title":"Guides"},{"id":"community","title":"Community"},{"id":"faq","title":"FAQ"}],"pages":[{"to":"/postgraphile/introduction/","title":"Introduction","sectionId":"overview","subpages":[]},{"to":"/postgraphile/examples/","title":"Example Gallery","sectionId":"overview","subpages":[]},{"to":"/postgraphile/usage/","title":"Usage","sectionId":"overview","subpages":[{"to":"/postgraphile/usage-cli/","title":"CLI Usage","sectionId":"overview"},{"to":"/postgraphile/usage-library/","title":"Library Usage","sectionId":"overview"},{"to":"/postgraphile/usage-schema/","title":"Schema-only Usage","sectionId":"overview"}]},{"to":"/postgraphile/performance/","title":"Performance","sectionId":"overview","subpages":[]},{"to":"/postgraphile/requirements/","title":"Requirements","sectionId":"overview","subpages":[]},{"to":"/postgraphile/quick-start-guide/","title":"Quick Start Guide","sectionId":"basics","subpages":[]},{"to":"/postgraphile/namespaces/","title":"Namespaces","sectionId":"basics","subpages":null},{"to":"/postgraphile/inflection/","title":"Inflection","sectionId":"basics","subpages":null},{"to":"/postgraphile/tables/","title":"Tables","sectionId":"basics","subpages":[{"to":"/postgraphile/relations/","title":"Relations","sectionId":"basics"},{"to":"/postgraphile/connections/","title":"Connections","sectionId":"basics"},{"to":"/postgraphile/filtering/","title":"Filtering","sectionId":"basics"},{"to":"/postgraphile/crud-mutations/","title":"CRUD Mutations","sectionId":"basics"},{"to":"/postgraphile/node-id/","title":"nodeId / id","sectionId":"basics"}]},{"to":"/postgraphile/functions/","title":"Functions","sectionId":"basics","subpages":[{"to":"/postgraphile/computed-columns/","title":"Computed Columns","sectionId":"basics"},{"to":"/postgraphile/custom-queries/","title":"Custom Queries","sectionId":"basics"},{"to":"/postgraphile/custom-mutations/","title":"Custom Mutations","sectionId":"basics"},{"to":"/postgraphile/function-restrictions/","title":"Function Restrictions","sectionId":"basics"},{"to":"/postgraphile/function-gallery/","title":"Function Gallery","sectionId":"customising"}]},{"to":"/postgraphile/views/","title":"Views","sectionId":"basics","subpages":[]},{"to":"/postgraphile/postgresql-indexes/","title":"PostgreSQL Indexes","sectionId":"basics","subpages":[]},{"to":"/postgraphile/security/","title":"Security","sectionId":"basics","subpages":[]},{"to":"/postgraphile/realtime/","title":"Realtime","sectionId":"basics","subpages":[{"to":"/postgraphile/subscriptions/","title":"Subscriptions","sectionId":"basics"},{"to":"/postgraphile/live-queries/","title":"Live Queries","sectionId":"basics"}]},{"to":"/postgraphile/reserved-keywords/","title":"Reserved Keywords","sectionId":"basics","subpages":[]},{"to":"/postgraphile/debugging/","title":"Debugging","sectionId":"basics","subpages":[]},{"to":"/postgraphile/smart-comments/","title":"Smart Comments","sectionId":"customising","subpages":[]},{"to":"/postgraphile/extending/","title":"Schema Plugins","sectionId":"customising","subpages":[{"to":"/postgraphile/make-add-inflectors-plugin/","title":"makeAddInflectorsPlugin","sectionId":"customising"},{"to":"/postgraphile/make-change-nullability-plugin/","title":"makeChangeNullabilityPlugin","sectionId":"customising"},{"to":"/postgraphile/make-extend-schema-plugin/","title":"makeExtendSchemaPlugin","sectionId":"customising"},{"to":"/postgraphile/make-process-schema-plugin/","title":"makeProcessSchemaPlugin","sectionId":"customising"},{"to":"/postgraphile/make-wrap-resolvers-plugin/","title":"makeWrapResolversPlugin","sectionId":"customising"},{"to":"/postgraphile/make-plugin-by-combining-plugins/","title":"makePluginByCombiningPlugins","sectionId":"customising"},{"to":"/postgraphile/extending-raw/","title":"Graphile Engine","sectionId":"customising"},{"to":"/postgraphile/plugin-gallery/","title":"Plugin Gallery","sectionId":"customising"},{"to":"/postgraphile/community-plugins/","title":"Community Plugins","sectionId":"customising"}]},{"to":"/postgraphile/plugins/","title":"Server Plugins","sectionId":"customising","subpages":[]},{"to":"/postgraphile/postgresql-schema-design/","title":"PostgreSQL Schema Design","sectionId":"guides","subpages":[]},{"to":"/postgraphile/evaluating/","title":"Evaluating for your Project","sectionId":"guides","subpages":[]},{"to":"/postgraphile/best-practices/","title":"Best Practices","sectionId":"guides","subpages":[]},{"to":"/postgraphile/production/","title":"Production Considerations","sectionId":"guides","subpages":[]},{"to":"/postgraphile/jwt-guide/","title":"PostGraphile JWT Guide","sectionId":"guides","subpages":[]},{"to":"/postgraphile/jwk-verification/","title":"JWK Verification (e.g. Auth0)","sectionId":"guides","subpages":[]},{"to":"/postgraphile/default-role/","title":"The Default Role","sectionId":"guides","subpages":[]},{"to":"/postgraphile/v4-new-features/","title":"v4 Feature Guide","sectionId":"guides","subpages":[]},{"to":"/postgraphile/v3-migration/","title":"v3 → v4 Migration Guide","sectionId":"guides","subpages":[]},{"to":"/postgraphile/testing-jest/","title":"Testing with Jest","sectionId":"guides","subpages":[]},{"to":"/postgraphile/community-contributions/","title":"Community Contributions","sectionId":"community","subpages":[]},{"to":"/postgraphile/community-chat/","title":"Community Chat","sectionId":"community","subpages":[]},{"to":"/postgraphile/code-of-conduct/","title":"Code of Conduct","sectionId":"community","subpages":[]},{"to":"/postgraphile/introspection/","title":"Introspection?","sectionId":"faq","subpages":[]},{"to":"/postgraphile/why-nullable/","title":"Why is it nullable?","sectionId":"faq","subpages":[]},{"to":"/postgraphile/versioning-policy/","title":"Versioning policy?","sectionId":"faq","subpages":[]}]}},{"node":{"id":"3e71fc2f-bdc0-5e8d-a1d7-aba118117d0f","name":"graphile-build-pg","sections":[{"id":"overview","title":"Usage"}],"pages":[{"to":"/graphile-build-pg/settings/","title":"Settings","sectionId":"overview","subpages":[]}]}}]},"examples":{"edges":[{"node":{"category":"functions","id":"48d3e146-a69f-590f-ab77-e7937a84bf62","title":"Custom queries","examples":[{"title":"Logged in user field","example":"create function viewer()\nreturns users\nas $$\n  select *\n  from users\n  where id = current_user_id();\n  /*\n   * current_user_id() is a function\n   * that returns the logged in user's\n   * id, e.g. by extracting from the JWT\n   * or indicated via pgSettings.\n   */\n$$ language sql stable set search_path from current;\n","exampleLanguage":"sql","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1799,6 +1799,7 @@\n \n   \"\"\"Chosen by fair dice roll. Guaranteed to be random. XKCD#221\"\"\"\n   randomNumber: Int\n+  viewer: User\n \n   \"\"\"Reads a single `Forum` using its globally unique `ID`.\"\"\"\n   forum(\n","resultLanguage":"diff"}]}},{"node":{"category":"functions","id":"dd364008-19c3-5692-9e91-a23e830f1df7","title":"Computed columns","examples":[{"title":"User primary email","example":"/*\n * Returns the primary email of the\n * current user; for all other users\n * this function will return null.\n */\ncreate function \"users_primaryEmail\"(u users)\nreturns text\nas $$\n  select email\n  from user_emails\n  where user_id = current_user_id()\n  and user_id = u.id\n  and is_verified is true\n  order by id asc\n  limit 1;\n$$ language sql stable set search_path from current;\n","exampleLanguage":"sql","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -3140,6 +3140,7 @@\n     \"\"\"\n     condition: QuizEntryCondition\n   ): QuizEntriesConnection!\n+  primaryEmail: String\n }\n \n \"\"\"\n","resultLanguage":"diff"}]}},{"node":{"category":"functions","id":"480e1844-694a-50cf-8d45-86fb89ec6627","title":"Custom mutations","examples":[{"title":"Insert multiple records","example":"/**\n * Occasionally you'll want to create a bunch of rows in different tables in a\n * single mutation. Here's an example of how to do that.\n *\n * Pretend we're registering quiz entries, and we want to store each answer in\n * its own table as we want to be able to operate on the answers independently\n * later.\n *\n * This means we want:\n *\n *  1. A mutation that takes input data for inserting one quiz entry and\n *  multiple answers.\n *  2. A function that inserts a new quiz entry, inserts an answer for each\n *  answer provided in the input data, and connects each answer to the created\n *  quiz entry.\n *  3. Finally, we want the function to return the inserted quiz entry itself.\n */\n\n/**\n * This type is used for input in the mutation\n */\ncreate type quiz_entry_input as (\n  question text,\n  answer int\n);\n\n/**\n * Here's the function that gets turned into a \"custom mutation\"\n */\ncreate function add_quiz_entry(\n  quiz_id int,\n  answers quiz_entry_input[]\n)\nreturns quiz_entry\nas $$\n  declare\n    q quiz_entry;\n    a quiz_entry_answer;\n  begin\n    insert into quiz_entry(user_id, quiz_id)\n      values(current_user_id(), quiz_id)\n      returning * into q;\n\n    foreach a in array answers loop\n      insert into quiz_entry_answer(quiz_entry_id, question, answer)\n        values (quiz_id, a.question, a.answer);\n    end loop;\n\n    return q;\n  end;\n$$ language plpgsql volatile strict set search_path from current;\n","exampleLanguage":"sql","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1,3 +1,41 @@\n+\"\"\"All input for the `addQuizEntry` mutation.\"\"\"\n+input AddQuizEntryInput {\n+  \"\"\"\n+  An arbitrary string value with no semantic meaning. Will be included in the\n+  payload verbatim. May be used to track mutations by the client.\n+  \"\"\"\n+  clientMutationId: String\n+  quizId: Int!\n+  answers: [QuizEntryInputRecordInput]!\n+}\n+\n+\"\"\"The output of our `addQuizEntry` mutation.\"\"\"\n+type AddQuizEntryPayload {\n+  \"\"\"\n+  The exact same `clientMutationId` that was provided in the mutation input,\n+  unchanged and unused. May be used by a client to track mutations.\n+  \"\"\"\n+  clientMutationId: String\n+  quizEntry: QuizEntry\n+\n+  \"\"\"\n+  Our root query field type. Allows us to run any query from our mutation payload.\n+  \"\"\"\n+  query: Query\n+\n+  \"\"\"Reads a single `User` that is related to this `QuizEntry`.\"\"\"\n+  user: User\n+\n+  \"\"\"Reads a single `Quiz` that is related to this `QuizEntry`.\"\"\"\n+  quiz: Quiz\n+\n+  \"\"\"An edge for our `QuizEntry`. May be used by Relay 1.\"\"\"\n+  quizEntryEdge(\n+    \"\"\"The method to use when ordering `QuizEntry`.\"\"\"\n+    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\n+  ): QuizEntriesEdge\n+}\n+\n \"\"\"\n A floating point number that requires more precision than IEEE 754 binary 64\n \"\"\"\n@@ -1474,6 +1512,12 @@\n     \"\"\"\n     input: DeleteUserByUsernameInput!\n   ): DeleteUserPayload\n+  addQuizEntry(\n+    \"\"\"\n+    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n+    \"\"\"\n+    input: AddQuizEntryInput!\n+  ): AddQuizEntryPayload\n \n   \"\"\"\n   If you've forgotten your password, give us one of your email addresses and we'\n@@ -2123,6 +2167,12 @@\n   quizId: Int!\n }\n \n+\"\"\"An input for mutations affecting `QuizEntryInputRecord`\"\"\"\n+input QuizEntryInputRecordInput {\n+  question: String\n+  answer: Int\n+}\n+\n \"\"\"\n Represents an update to a `QuizEntry`. Fields that are set will be updated.\n \"\"\"\n","resultLanguage":"diff"}]}},{"node":{"category":"plugins","id":"ad2344bd-bebf-561f-8cb0-69db1270c9bb","title":"Inflector","examples":[{"title":"PgRenamePatchToPatchSetPlugin","example":"/**\n * Simply renames the `UserPatch` and `PostPatch` type names to be called\n * `UserPatchSet` and `PostPatchSet` instead.\n *\n * Not particularly useful, just an example. ('PatchSet' chosen to minimise\n * diff to make example clearer.)\n *\n * Replaces this inflector:\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L309-L311\n */\nmodule.exports = function PgRenamePatchToPatchSetPlugin(\n  builder\n) {\n  builder.hook(\n    \"inflection\",\n    inflector => ({\n      // Retain the existing inflectors\n      ...inflector,\n\n      // Override the patchType inflector\n      patchType(typeName) {\n        // return this.upperCamelCase(`${typeName}-patch`);\n        return this.upperCamelCase(\n          `${typeName}-patch-set`\n        );\n      },\n    })\n  );\n};\n","exampleLanguage":"javascript","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -979,7 +979,7 @@\n \"\"\"\n Represents an update to a `Forum`. Fields that are set will be updated.\n \"\"\"\n-input ForumPatch {\n+input ForumPatchSet {\n   id: Int\n \n   \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n@@ -1577,7 +1577,7 @@\n \"\"\"\n Represents an update to a `Post`. Fields that are set will be updated.\n \"\"\"\n-input PostPatch {\n+input PostPatchSet {\n   \"\"\"The body of the `Topic`, which Posts reply to.\"\"\"\n   body: String\n }\n@@ -2051,7 +2051,7 @@\n \"\"\"\n Represents an update to a `QuizEntryAnswer`. Fields that are set will be updated.\n \"\"\"\n-input QuizEntryAnswerPatch {\n+input QuizEntryAnswerPatchSet {\n   id: Int\n   quizEntryId: Int\n   question: String\n@@ -2126,7 +2126,7 @@\n \"\"\"\n Represents an update to a `QuizEntry`. Fields that are set will be updated.\n \"\"\"\n-input QuizEntryPatch {\n+input QuizEntryPatchSet {\n   id: Int\n   userId: Int\n   quizId: Int\n@@ -2144,7 +2144,7 @@\n \"\"\"\n Represents an update to a `Quiz`. Fields that are set will be updated.\n \"\"\"\n-input QuizPatch {\n+input QuizPatchSet {\n   id: Int\n   name: String\n   updatedAt: Datetime\n@@ -2327,7 +2327,7 @@\n \"\"\"\n Represents an update to a `Topic`. Fields that are set will be updated.\n \"\"\"\n-input TopicPatch {\n+input TopicPatchSet {\n   id: Int\n   forumId: Int\n   authorId: Int\n@@ -2399,7 +2399,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Forum` being updated.\n   \"\"\"\n-  patch: ForumPatch!\n+  patch: ForumPatchSet!\n   id: Int!\n }\n \n@@ -2414,7 +2414,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Forum` being updated.\n   \"\"\"\n-  patch: ForumPatch!\n+  patch: ForumPatchSet!\n \n   \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n   slug: String!\n@@ -2436,7 +2436,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Forum` being updated.\n   \"\"\"\n-  patch: ForumPatch!\n+  patch: ForumPatchSet!\n }\n \n \"\"\"The output of our update `Forum` mutation.\"\"\"\n@@ -2473,7 +2473,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Post` being updated.\n   \"\"\"\n-  patch: PostPatch!\n+  patch: PostPatchSet!\n   id: Int!\n }\n \n@@ -2493,7 +2493,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Post` being updated.\n   \"\"\"\n-  patch: PostPatch!\n+  patch: PostPatchSet!\n }\n \n \"\"\"The output of our update `Post` mutation.\"\"\"\n@@ -2536,7 +2536,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Quiz` being updated.\n   \"\"\"\n-  patch: QuizPatch!\n+  patch: QuizPatchSet!\n   id: Int!\n }\n \n@@ -2551,7 +2551,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n   \"\"\"\n-  patch: QuizEntryAnswerPatch!\n+  patch: QuizEntryAnswerPatchSet!\n   id: Int!\n }\n \n@@ -2571,7 +2571,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n   \"\"\"\n-  patch: QuizEntryAnswerPatch!\n+  patch: QuizEntryAnswerPatchSet!\n }\n \n \"\"\"The output of our update `QuizEntryAnswer` mutation.\"\"\"\n@@ -2611,7 +2611,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `QuizEntry` being updated.\n   \"\"\"\n-  patch: QuizEntryPatch!\n+  patch: QuizEntryPatchSet!\n   id: Int!\n }\n \n@@ -2631,7 +2631,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `QuizEntry` being updated.\n   \"\"\"\n-  patch: QuizEntryPatch!\n+  patch: QuizEntryPatchSet!\n }\n \n \"\"\"The output of our update `QuizEntry` mutation.\"\"\"\n@@ -2679,7 +2679,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Quiz` being updated.\n   \"\"\"\n-  patch: QuizPatch!\n+  patch: QuizPatchSet!\n }\n \n \"\"\"The output of our update `Quiz` mutation.\"\"\"\n@@ -2716,7 +2716,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Topic` being updated.\n   \"\"\"\n-  patch: TopicPatch!\n+  patch: TopicPatchSet!\n   id: Int!\n }\n \n@@ -2736,7 +2736,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `Topic` being updated.\n   \"\"\"\n-  patch: TopicPatch!\n+  patch: TopicPatchSet!\n }\n \n \"\"\"The output of our update `Topic` mutation.\"\"\"\n@@ -2779,7 +2779,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserAuthentication` being updated.\n   \"\"\"\n-  patch: UserAuthenticationPatch!\n+  patch: UserAuthenticationPatchSet!\n   id: Int!\n }\n \n@@ -2796,7 +2796,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserAuthentication` being updated.\n   \"\"\"\n-  patch: UserAuthenticationPatch!\n+  patch: UserAuthenticationPatchSet!\n \n   \"\"\"The login service used, e.g. `twitter` or `github`.\"\"\"\n   service: String!\n@@ -2821,7 +2821,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserAuthentication` being updated.\n   \"\"\"\n-  patch: UserAuthenticationPatch!\n+  patch: UserAuthenticationPatchSet!\n }\n \n \"\"\"The output of our update `UserAuthentication` mutation.\"\"\"\n@@ -2858,7 +2858,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `User` being updated.\n   \"\"\"\n-  patch: UserPatch!\n+  patch: UserPatchSet!\n \n   \"\"\"Unique identifier for the user.\"\"\"\n   id: Int!\n@@ -2875,7 +2875,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `User` being updated.\n   \"\"\"\n-  patch: UserPatch!\n+  patch: UserPatchSet!\n \n   \"\"\"Public-facing username (or 'handle') of the user.\"\"\"\n   username: String!\n@@ -2892,7 +2892,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserEmail` being updated.\n   \"\"\"\n-  patch: UserEmailPatch!\n+  patch: UserEmailPatchSet!\n   id: Int!\n }\n \n@@ -2907,7 +2907,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserEmail` being updated.\n   \"\"\"\n-  patch: UserEmailPatch!\n+  patch: UserEmailPatchSet!\n   userId: Int!\n \n   \"\"\"The users email address, in `a@b.c` format.\"\"\"\n@@ -2930,7 +2930,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `UserEmail` being updated.\n   \"\"\"\n-  patch: UserEmailPatch!\n+  patch: UserEmailPatchSet!\n }\n \n \"\"\"The output of our update `UserEmail` mutation.\"\"\"\n@@ -2975,7 +2975,7 @@\n   \"\"\"\n   An object where the defined keys will be set on the `User` being updated.\n   \"\"\"\n-  patch: UserPatch!\n+  patch: UserPatchSet!\n }\n \n \"\"\"The output of our update `User` mutation.\"\"\"\n@@ -3177,7 +3177,7 @@\n \"\"\"\n Represents an update to a `UserAuthentication`. Fields that are set will be updated.\n \"\"\"\n-input UserAuthenticationPatch {\n+input UserAuthenticationPatchSet {\n   id: Int\n \n   \"\"\"The login service used, e.g. `twitter` or `github`.\"\"\"\n@@ -3283,7 +3283,7 @@\n \"\"\"\n Represents an update to a `UserEmail`. Fields that are set will be updated.\n \"\"\"\n-input UserEmailPatch {\n+input UserEmailPatchSet {\n   id: Int\n   userId: Int\n \n@@ -3367,7 +3367,7 @@\n \"\"\"\n Represents an update to a `User`. Fields that are set will be updated.\n \"\"\"\n-input UserPatch {\n+input UserPatchSet {\n   \"\"\"Unique identifier for the user.\"\"\"\n   id: Int\n \n","resultLanguage":"diff"},{"title":"PgShortenAllRowsInflectorPlugin","example":"/**\n * Simply renames the `allUsers` and `allPosts` Query fields to `users` and\n * `posts` respectively.\n *\n * Not particularly useful, just an example.\n *\n * Replaces this inflector:\n * https://github.com/graphile/graphile-engine/blob/f3fb3878692c6959e481e517375da66503428dc5/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L460-L464\n */\nmodule.exports = function PgShortenAllRowsInflectorPlugin(\n  builder\n) {\n  builder.hook(\n    \"inflection\",\n    inflector => ({\n      // Retain the existing inflectors\n      ...inflector,\n\n      // Override the allRows inflector\n      allRows(table) {\n        return this.camelCase(\n          // Was: `all-${this.pluralize(this._singularizedTableName(table))}`\n          // Now:\n          this.pluralize(\n            this._singularizedTableName(\n              table\n            )\n          )\n        );\n      },\n    })\n  );\n};\n","exampleLanguage":"javascript","result":"","resultLanguage":"diff"}]}},{"node":{"category":"plugins","id":"4f96cdae-24d6-5277-a7a3-0df69363b25c","title":"Types","examples":[{"title":"PgNumericToFloatPlugin","example":"/**\n * Use of this plugin is NOT recommended, please see\n * PgSmallNumericToFloatPlugin for a more appropriate replacement if you need\n * one.\n *\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\n * for *all* DECIMAL / NUMERIC values, for making PostGraphile v4 slightly more\n * backwards-compatible with v3.\n *\n * It's generally a bad idea to use floating point numbers to represent\n * arbitrary precision numbers such as NUMERIC because loss of precision can\n * occur.\n */\nmodule.exports = function PgNumericToFloatPlugin(\n  builder\n) {\n  builder.hook(\"build\", build => {\n    // Register a type handler for NUMERIC / DECIMAL (oid = 1700), always\n    // returning the GraphQLFloat type\n    build.pgRegisterGqlTypeByTypeId(\n      \"1700\",\n      () => build.graphql.GraphQLFloat\n    );\n    return build;\n  });\n};\n","exampleLanguage":"javascript","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1,8 +1,3 @@\n-\"\"\"\n-A floating point number that requires more precision than IEEE 754 binary 64\n-\"\"\"\n-scalar BigFloat\n-\n \"\"\"All input for the create `Forum` mutation.\"\"\"\n input CreateForumInput {\n   \"\"\"\n@@ -1871,8 +1866,8 @@\n   id: Int!\n   name: String!\n   updatedAt: Datetime!\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n+  precision12Scale2: Float\n+  precision200Scale100: Float\n \n   \"\"\"Reads and enables pagination through a set of `QuizEntry`.\"\"\"\n   quizEntries(\n@@ -1918,10 +1913,10 @@\n   updatedAt: Datetime\n \n   \"\"\"Checks for equality with the object’s `precision12Scale2` field.\"\"\"\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n \n   \"\"\"Checks for equality with the object’s `precision200Scale100` field.\"\"\"\n-  precision200Scale100: BigFloat\n+  precision200Scale100: Float\n }\n \n \"\"\"A connection to a list of `QuizEntry` values.\"\"\"\n@@ -2137,8 +2132,8 @@\n   id: Int\n   name: String!\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n+  precision12Scale2: Float\n+  precision200Scale100: Float\n }\n \n \"\"\"\n@@ -2148,8 +2143,8 @@\n   id: Int\n   name: String\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n+  precision12Scale2: Float\n+  precision200Scale100: Float\n }\n \n \"\"\"A connection to a list of `Quiz` values.\"\"\"\n","resultLanguage":"diff"},{"title":"PgSmallNumericToFloatPlugin","example":"/**\n * This plugin will have PostGraphile use `GraphQLFloat` instead of `BigFloat`\n * for DECIMAL / NUMERIC values that have a precision and scale under the given\n * limits (currently 12 and 2 respectively).\n *\n * It's generally a bad idea to use floating point numbers to represent\n * arbitrary precision numbers such as NUMERIC because loss of precision can\n * occur; however some systems are okay with this compromise.\n */\nmodule.exports = function PgSmallNumericToFloatPlugin(\n  builder,\n  {\n    pgNumericToFloatPrecisionCap = 12,\n    pgNumericToFloatScaleCap = 2,\n  }\n) {\n  builder.hook(\"build\", build => {\n    // Register a type handler for NUMERIC / DECIMAL (oid = 1700)\n    build.pgRegisterGqlTypeByTypeId(\n      \"1700\",\n      (_set, modifier) => {\n        if (\n          modifier &&\n          typeof modifier ===\n            \"number\" &&\n          modifier > 0\n        ) {\n          // Ref: https://stackoverflow.com/a/3351120/141284\n          const precision =\n            ((modifier - 4) >> 16) &\n            65535;\n          const scale =\n            (modifier - 4) & 65535;\n          if (\n            precision <=\n              pgNumericToFloatPrecisionCap &&\n            scale <=\n              pgNumericToFloatScaleCap\n          ) {\n            // This number is no more precise than our cap, so we're declaring\n            // that we can handle it as a float:\n            return build.graphql\n              .GraphQLFloat;\n          }\n        }\n        // If all else fails, let PostGraphile do it's default handling - i.e.\n        // BigFloat\n        return null;\n      }\n    );\n\n    // We didn't modify _init, but we still must return it.\n    return build;\n  });\n};\n","exampleLanguage":"javascript","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1871,7 +1871,7 @@\n   id: Int!\n   name: String!\n   updatedAt: Datetime!\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n   precision200Scale100: BigFloat\n \n   \"\"\"Reads and enables pagination through a set of `QuizEntry`.\"\"\"\n@@ -1918,7 +1918,7 @@\n   updatedAt: Datetime\n \n   \"\"\"Checks for equality with the object’s `precision12Scale2` field.\"\"\"\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n \n   \"\"\"Checks for equality with the object’s `precision200Scale100` field.\"\"\"\n   precision200Scale100: BigFloat\n@@ -2137,7 +2137,7 @@\n   id: Int\n   name: String!\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n   precision200Scale100: BigFloat\n }\n \n@@ -2148,7 +2148,7 @@\n   id: Int\n   name: String\n   updatedAt: Datetime\n-  precision12Scale2: BigFloat\n+  precision12Scale2: Float\n   precision200Scale100: BigFloat\n }\n \n","resultLanguage":"diff"},{"title":"SetInputObjectDefaultValue","example":"/**\n * This plugin sets a defaultValue on all input object fields that match the\n * given criteria (specifically the 'create' input types, for columns named\n * 'name')\n */\nmodule.exports = function SetInputObjectDefaultValue(\n  builder\n) {\n  builder.hook(\n    \"GraphQLInputObjectType:fields:field\",\n    (field, build, context) => {\n      const {\n        scope: {\n          isPgRowType,\n          isInputType,\n          isPgPatch,\n          pgFieldIntrospection: attr,\n        },\n      } = context;\n      if (\n        !isPgRowType ||\n        !isInputType ||\n        isPgPatch ||\n        !attr ||\n        attr.kind !== \"attribute\" ||\n        attr.name !== \"name\"\n      ) {\n        return field;\n      }\n\n      return {\n        ...field,\n        type: build.graphql.getNamedType(\n          field.type\n        ), // Since it has a default, it can be nullable\n        defaultValue:\n          // attr.tags.defaultValue: enables overriding this with a\n          // `@defaultValue Alice Smith` smart comment\n          attr.tags.defaultValue ||\n          \"Bobby Tables\",\n      };\n    }\n  );\n};\n","exampleLanguage":"javascript","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -968,7 +968,7 @@\n   slug: String!\n \n   \"\"\"The name of the `Forum` (indicates its subject matter).\"\"\"\n-  name: String!\n+  name: String = \"Bobby Tables\"\n \n   \"\"\"A brief description of the `Forum` including it's purpose.\"\"\"\n   description: String\n@@ -2135,7 +2135,7 @@\n \"\"\"An input for mutations affecting `Quiz`\"\"\"\n input QuizInput {\n   id: Int\n-  name: String!\n+  name: String = \"Bobby Tables\"\n   updatedAt: Datetime\n   precision12Scale2: BigFloat\n   precision200Scale100: BigFloat\n@@ -3353,7 +3353,7 @@\n   username: String!\n \n   \"\"\"Public-facing name (or pseudonym) of the user.\"\"\"\n-  name: String\n+  name: String = \"Bobby Tables\"\n \n   \"\"\"Optional avatar URL.\"\"\"\n   avatarUrl: String\n","resultLanguage":"diff"}]}},{"node":{"category":"plugins","id":"e26cc8a1-2fc8-5bce-aad0-bc414d60ad34","title":"Mutation wrappers","examples":[{"title":"OverrideArgValuePlugin","example":"/**\n * This plugin sets the `input.quizPatch.updatedAt` to the current timestamp in\n * the `updateQuiz*` mutations IFF it's not already set.\n */\nmodule.exports = function SetInputObjectDefaultValue(\n  builder\n) {\n  builder.hook(\n    \"GraphQLObjectType:fields:field\",\n    (field, build, context) => {\n      const {\n        scope: {\n          isPgUpdateMutationField,\n          pgFieldIntrospection: table,\n        },\n      } = context;\n      if (\n        !isPgUpdateMutationField ||\n        table.kind !== \"class\" ||\n        table.name !== \"quiz\"\n      ) {\n        return field;\n      }\n\n      const oldResolve =\n        field.resolve;\n\n      return {\n        ...field,\n        resolve(\n          _mutation,\n          args,\n          context,\n          info\n        ) {\n          // Override the `updatedAt` field if it's not already set.\n          if (\n            args.input.quizPatch\n              .updatedAt == null\n          ) {\n            args.input.quizPatch.updatedAt = new Date().toISOString();\n          }\n          return oldResolve(\n            _mutation,\n            args,\n            context,\n            info\n          );\n        },\n      };\n    }\n  );\n};\n\n// Tested via:\n// npx postgraphile --append-plugins @graphile-contrib/pg-simplify-inflector,`pwd`/examples/plugins/0300_mutation_wrappers/OverrideArgValuePlugin.js -c graphile_org_demo -s app_public\n","exampleLanguage":"javascript","result":"","resultLanguage":"diff"}]}},{"node":{"category":"plugins","id":"c218e92f-d992-5b34-8876-51135bdda75a","title":"Customisation","examples":[{"title":"OmitMutationsByDefaultPlugin","example":"/**\n * This plugin treats any table that doesn't have an `@omit` comment as if it\n * had `@omit create,update,delete` (thereby disabling mutations).\n *\n * Override it by adding a smart comment to the table. To restore all\n * mutations, do `COMMENT ON my_table IS E'@omit :';` (the `:` is special\n * syntax for \"nothing\").\n */\nmodule.exports = function OmitMutationsByDefaultPlugin(\n  builder\n) {\n  builder.hook(\"build\", build => {\n    const {\n      pgIntrospectionResultsByKind,\n    } = build;\n    pgIntrospectionResultsByKind.class\n      .filter(\n        table =>\n          table.isSelectable &&\n          table.namespace\n      )\n      .forEach(table => {\n        if (!(\"omit\" in table.tags)) {\n          table.tags.omit =\n            \"create,update,delete\";\n        }\n      });\n    return build;\n  });\n};\n\n// Tested via:\n// npx postgraphile --append-plugins @graphile-contrib/pg-simplify-inflector,`pwd`/examples/plugins/0400_customisation/OmitMutationsByDefaultPlugin.js -c graphile_org_demo -s app_public\n","exampleLanguage":"javascript","result":"--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -3,41 +3,6 @@\n \"\"\"\n scalar BigFloat\n \n-\"\"\"All input for the create `Forum` mutation.\"\"\"\n-input CreateForumInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Forum` to be created by this mutation.\"\"\"\n-  forum: ForumInput!\n-}\n-\n-\"\"\"The output of our create `Forum` mutation.\"\"\"\n-type CreateForumPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Forum` that was created by this mutation.\"\"\"\n-  forum: Forum\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Forum`. May be used by Relay 1.\"\"\"\n-  forumEdge(\n-    \"\"\"The method to use when ordering `Forum`.\"\"\"\n-    orderBy: [ForumsOrderBy!] = PRIMARY_KEY_ASC\n-  ): ForumsEdge\n-}\n-\n \"\"\"All input for the create `Post` mutation.\"\"\"\n input CreatePostInput {\n   \"\"\"\n@@ -79,120 +44,6 @@\n   ): PostsEdge\n }\n \n-\"\"\"All input for the create `QuizEntryAnswer` mutation.\"\"\"\n-input CreateQuizEntryAnswerInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntryAnswer` to be created by this mutation.\"\"\"\n-  quizEntryAnswer: QuizEntryAnswerInput!\n-}\n-\n-\"\"\"The output of our create `QuizEntryAnswer` mutation.\"\"\"\n-type CreateQuizEntryAnswerPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntryAnswer` that was created by this mutation.\"\"\"\n-  quizEntryAnswer: QuizEntryAnswer\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\"\"\"\n-  quizEntry: QuizEntry\n-\n-  \"\"\"An edge for our `QuizEntryAnswer`. May be used by Relay 1.\"\"\"\n-  quizEntryAnswerEdge(\n-    \"\"\"The method to use when ordering `QuizEntryAnswer`.\"\"\"\n-    orderBy: [QuizEntryAnswersOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntryAnswersEdge\n-}\n-\n-\"\"\"All input for the create `QuizEntry` mutation.\"\"\"\n-input CreateQuizEntryInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntry` to be created by this mutation.\"\"\"\n-  quizEntry: QuizEntryInput!\n-}\n-\n-\"\"\"The output of our create `QuizEntry` mutation.\"\"\"\n-type CreateQuizEntryPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntry` that was created by this mutation.\"\"\"\n-  quizEntry: QuizEntry\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `User` that is related to this `QuizEntry`.\"\"\"\n-  user: User\n-\n-  \"\"\"Reads a single `Quiz` that is related to this `QuizEntry`.\"\"\"\n-  quiz: Quiz\n-\n-  \"\"\"An edge for our `QuizEntry`. May be used by Relay 1.\"\"\"\n-  quizEntryEdge(\n-    \"\"\"The method to use when ordering `QuizEntry`.\"\"\"\n-    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntriesEdge\n-}\n-\n-\"\"\"All input for the create `Quiz` mutation.\"\"\"\n-input CreateQuizInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Quiz` to be created by this mutation.\"\"\"\n-  quiz: QuizInput!\n-}\n-\n-\"\"\"The output of our create `Quiz` mutation.\"\"\"\n-type CreateQuizPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Quiz` that was created by this mutation.\"\"\"\n-  quiz: Quiz\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Quiz`. May be used by Relay 1.\"\"\"\n-  quizEdge(\n-    \"\"\"The method to use when ordering `Quiz`.\"\"\"\n-    orderBy: [QuizzesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizzesEdge\n-}\n-\n \"\"\"All input for the create `Topic` mutation.\"\"\"\n input CreateTopicInput {\n   \"\"\"\n@@ -351,66 +202,6 @@\n \"\"\"\n scalar Datetime\n \n-\"\"\"All input for the `deleteForumById` mutation.\"\"\"\n-input DeleteForumByIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-\"\"\"All input for the `deleteForumBySlug` mutation.\"\"\"\n-input DeleteForumBySlugInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n-  slug: String!\n-}\n-\n-\"\"\"All input for the `deleteForum` mutation.\"\"\"\n-input DeleteForumInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `Forum` to be deleted.\n-  \"\"\"\n-  nodeId: ID!\n-}\n-\n-\"\"\"The output of our delete `Forum` mutation.\"\"\"\n-type DeleteForumPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Forum` that was deleted by this mutation.\"\"\"\n-  forum: Forum\n-  deletedForumId: ID\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Forum`. May be used by Relay 1.\"\"\"\n-  forumEdge(\n-    \"\"\"The method to use when ordering `Forum`.\"\"\"\n-    orderBy: [ForumsOrderBy!] = PRIMARY_KEY_ASC\n-  ): ForumsEdge\n-}\n-\n \"\"\"All input for the `deletePostById` mutation.\"\"\"\n input DeletePostByIdInput {\n   \"\"\"\n@@ -465,159 +256,6 @@\n   ): PostsEdge\n }\n \n-\"\"\"All input for the `deleteQuizById` mutation.\"\"\"\n-input DeleteQuizByIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-\"\"\"All input for the `deleteQuizEntryAnswerById` mutation.\"\"\"\n-input DeleteQuizEntryAnswerByIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-\"\"\"All input for the `deleteQuizEntryAnswer` mutation.\"\"\"\n-input DeleteQuizEntryAnswerInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `QuizEntryAnswer` to be deleted.\n-  \"\"\"\n-  nodeId: ID!\n-}\n-\n-\"\"\"The output of our delete `QuizEntryAnswer` mutation.\"\"\"\n-type DeleteQuizEntryAnswerPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntryAnswer` that was deleted by this mutation.\"\"\"\n-  quizEntryAnswer: QuizEntryAnswer\n-  deletedQuizEntryAnswerId: ID\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\"\"\"\n-  quizEntry: QuizEntry\n-\n-  \"\"\"An edge for our `QuizEntryAnswer`. May be used by Relay 1.\"\"\"\n-  quizEntryAnswerEdge(\n-    \"\"\"The method to use when ordering `QuizEntryAnswer`.\"\"\"\n-    orderBy: [QuizEntryAnswersOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntryAnswersEdge\n-}\n-\n-\"\"\"All input for the `deleteQuizEntryById` mutation.\"\"\"\n-input DeleteQuizEntryByIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-  id: Int!\n-}\n-\n-\"\"\"All input for the `deleteQuizEntry` mutation.\"\"\"\n-input DeleteQuizEntryInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `QuizEntry` to be deleted.\n-  \"\"\"\n-  nodeId: ID!\n-}\n-\n-\"\"\"The output of our delete `QuizEntry` mutation.\"\"\"\n-type DeleteQuizEntryPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntry` that was deleted by this mutation.\"\"\"\n-  quizEntry: QuizEntry\n-  deletedQuizEntryId: ID\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `User` that is related to this `QuizEntry`.\"\"\"\n-  user: User\n-\n-  \"\"\"Reads a single `Quiz` that is related to this `QuizEntry`.\"\"\"\n-  quiz: Quiz\n-\n-  \"\"\"An edge for our `QuizEntry`. May be used by Relay 1.\"\"\"\n-  quizEntryEdge(\n-    \"\"\"The method to use when ordering `QuizEntry`.\"\"\"\n-    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntriesEdge\n-}\n-\n-\"\"\"All input for the `deleteQuiz` mutation.\"\"\"\n-input DeleteQuizInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `Quiz` to be deleted.\n-  \"\"\"\n-  nodeId: ID!\n-}\n-\n-\"\"\"The output of our delete `Quiz` mutation.\"\"\"\n-type DeleteQuizPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Quiz` that was deleted by this mutation.\"\"\"\n-  quiz: Quiz\n-  deletedQuizId: ID\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Quiz`. May be used by Relay 1.\"\"\"\n-  quizEdge(\n-    \"\"\"The method to use when ordering `Quiz`.\"\"\"\n-    orderBy: [QuizzesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizzesEdge\n-}\n-\n \"\"\"All input for the `deleteTopicById` mutation.\"\"\"\n input DeleteTopicByIdInput {\n   \"\"\"\n@@ -960,40 +598,6 @@\n   updatedAt: Datetime\n }\n \n-\"\"\"An input for mutations affecting `Forum`\"\"\"\n-input ForumInput {\n-  id: Int\n-\n-  \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n-  slug: String!\n-\n-  \"\"\"The name of the `Forum` (indicates its subject matter).\"\"\"\n-  name: String!\n-\n-  \"\"\"A brief description of the `Forum` including it's purpose.\"\"\"\n-  description: String\n-  createdAt: Datetime\n-  updatedAt: Datetime\n-}\n-\n-\"\"\"\n-Represents an update to a `Forum`. Fields that are set will be updated.\n-\"\"\"\n-input ForumPatch {\n-  id: Int\n-\n-  \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n-  slug: String\n-\n-  \"\"\"The name of the `Forum` (indicates its subject matter).\"\"\"\n-  name: String\n-\n-  \"\"\"A brief description of the `Forum` including it's purpose.\"\"\"\n-  description: String\n-  createdAt: Datetime\n-  updatedAt: Datetime\n-}\n-\n \"\"\"A connection to a list of `Forum` values.\"\"\"\n type ForumsConnection {\n   \"\"\"A list of `Forum` objects.\"\"\"\n@@ -1043,14 +647,6 @@\n The root mutation type which contains root level fields which mutate data.\n \"\"\"\n type Mutation {\n-  \"\"\"Creates a single `Forum`.\"\"\"\n-  createForum(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: CreateForumInput!\n-  ): CreateForumPayload\n-\n   \"\"\"Creates a single `Post`.\"\"\"\n   createPost(\n     \"\"\"\n@@ -1059,30 +655,6 @@\n     input: CreatePostInput!\n   ): CreatePostPayload\n \n-  \"\"\"Creates a single `Quiz`.\"\"\"\n-  createQuiz(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: CreateQuizInput!\n-  ): CreateQuizPayload\n-\n-  \"\"\"Creates a single `QuizEntry`.\"\"\"\n-  createQuizEntry(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: CreateQuizEntryInput!\n-  ): CreateQuizEntryPayload\n-\n-  \"\"\"Creates a single `QuizEntryAnswer`.\"\"\"\n-  createQuizEntryAnswer(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: CreateQuizEntryAnswerInput!\n-  ): CreateQuizEntryAnswerPayload\n-\n   \"\"\"Creates a single `Topic`.\"\"\"\n   createTopic(\n     \"\"\"\n@@ -1115,30 +687,6 @@\n     input: CreateUserInput!\n   ): CreateUserPayload\n \n-  \"\"\"Updates a single `Forum` using its globally unique id and a patch.\"\"\"\n-  updateForum(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateForumInput!\n-  ): UpdateForumPayload\n-\n-  \"\"\"Updates a single `Forum` using a unique key and a patch.\"\"\"\n-  updateForumById(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateForumByIdInput!\n-  ): UpdateForumPayload\n-\n-  \"\"\"Updates a single `Forum` using a unique key and a patch.\"\"\"\n-  updateForumBySlug(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateForumBySlugInput!\n-  ): UpdateForumPayload\n-\n   \"\"\"Updates a single `Post` using its globally unique id and a patch.\"\"\"\n   updatePost(\n     \"\"\"\n@@ -1155,58 +703,6 @@\n     input: UpdatePostByIdInput!\n   ): UpdatePostPayload\n \n-  \"\"\"Updates a single `Quiz` using its globally unique id and a patch.\"\"\"\n-  updateQuiz(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizInput!\n-  ): UpdateQuizPayload\n-\n-  \"\"\"Updates a single `Quiz` using a unique key and a patch.\"\"\"\n-  updateQuizById(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizByIdInput!\n-  ): UpdateQuizPayload\n-\n-  \"\"\"\n-  Updates a single `QuizEntry` using its globally unique id and a patch.\n-  \"\"\"\n-  updateQuizEntry(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizEntryInput!\n-  ): UpdateQuizEntryPayload\n-\n-  \"\"\"Updates a single `QuizEntry` using a unique key and a patch.\"\"\"\n-  updateQuizEntryById(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizEntryByIdInput!\n-  ): UpdateQuizEntryPayload\n-\n-  \"\"\"\n-  Updates a single `QuizEntryAnswer` using its globally unique id and a patch.\n-  \"\"\"\n-  updateQuizEntryAnswer(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizEntryAnswerInput!\n-  ): UpdateQuizEntryAnswerPayload\n-\n-  \"\"\"Updates a single `QuizEntryAnswer` using a unique key and a patch.\"\"\"\n-  updateQuizEntryAnswerById(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateQuizEntryAnswerByIdInput!\n-  ): UpdateQuizEntryAnswerPayload\n-\n   \"\"\"Updates a single `Topic` using its globally unique id and a patch.\"\"\"\n   updateTopic(\n     \"\"\"\n@@ -1260,132 +756,60 @@\n   ): UpdateUserEmailPayload\n \n   \"\"\"Updates a single `UserEmail` using a unique key and a patch.\"\"\"\n-  updateUserEmailById(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateUserEmailByIdInput!\n-  ): UpdateUserEmailPayload\n-\n-  \"\"\"Updates a single `UserEmail` using a unique key and a patch.\"\"\"\n-  updateUserEmailByUserIdAndEmail(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateUserEmailByUserIdAndEmailInput!\n-  ): UpdateUserEmailPayload\n-\n-  \"\"\"Updates a single `User` using its globally unique id and a patch.\"\"\"\n-  updateUser(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateUserInput!\n-  ): UpdateUserPayload\n-\n-  \"\"\"Updates a single `User` using a unique key and a patch.\"\"\"\n-  updateUserById(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateUserByIdInput!\n-  ): UpdateUserPayload\n-\n-  \"\"\"Updates a single `User` using a unique key and a patch.\"\"\"\n-  updateUserByUsername(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: UpdateUserByUsernameInput!\n-  ): UpdateUserPayload\n-\n-  \"\"\"Deletes a single `Forum` using its globally unique id.\"\"\"\n-  deleteForum(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteForumInput!\n-  ): DeleteForumPayload\n-\n-  \"\"\"Deletes a single `Forum` using a unique key.\"\"\"\n-  deleteForumById(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteForumByIdInput!\n-  ): DeleteForumPayload\n-\n-  \"\"\"Deletes a single `Forum` using a unique key.\"\"\"\n-  deleteForumBySlug(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeleteForumBySlugInput!\n-  ): DeleteForumPayload\n-\n-  \"\"\"Deletes a single `Post` using its globally unique id.\"\"\"\n-  deletePost(\n-    \"\"\"\n-    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n-    \"\"\"\n-    input: DeletePostInput!\n-  ): DeletePostPayload\n-\n-  \"\"\"Deletes a single `Post` using a unique key.\"\"\"\n-  deletePostById(\n+  updateUserEmailById(\n     \"\"\"\n     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n     \"\"\"\n-    input: DeletePostByIdInput!\n-  ): DeletePostPayload\n+    input: UpdateUserEmailByIdInput!\n+  ): UpdateUserEmailPayload\n \n-  \"\"\"Deletes a single `Quiz` using its globally unique id.\"\"\"\n-  deleteQuiz(\n+  \"\"\"Updates a single `UserEmail` using a unique key and a patch.\"\"\"\n+  updateUserEmailByUserIdAndEmail(\n     \"\"\"\n     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n     \"\"\"\n-    input: DeleteQuizInput!\n-  ): DeleteQuizPayload\n+    input: UpdateUserEmailByUserIdAndEmailInput!\n+  ): UpdateUserEmailPayload\n \n-  \"\"\"Deletes a single `Quiz` using a unique key.\"\"\"\n-  deleteQuizById(\n+  \"\"\"Updates a single `User` using its globally unique id and a patch.\"\"\"\n+  updateUser(\n     \"\"\"\n     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n     \"\"\"\n-    input: DeleteQuizByIdInput!\n-  ): DeleteQuizPayload\n+    input: UpdateUserInput!\n+  ): UpdateUserPayload\n \n-  \"\"\"Deletes a single `QuizEntry` using its globally unique id.\"\"\"\n-  deleteQuizEntry(\n+  \"\"\"Updates a single `User` using a unique key and a patch.\"\"\"\n+  updateUserById(\n     \"\"\"\n     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n     \"\"\"\n-    input: DeleteQuizEntryInput!\n-  ): DeleteQuizEntryPayload\n+    input: UpdateUserByIdInput!\n+  ): UpdateUserPayload\n \n-  \"\"\"Deletes a single `QuizEntry` using a unique key.\"\"\"\n-  deleteQuizEntryById(\n+  \"\"\"Updates a single `User` using a unique key and a patch.\"\"\"\n+  updateUserByUsername(\n     \"\"\"\n     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n     \"\"\"\n-    input: DeleteQuizEntryByIdInput!\n-  ): DeleteQuizEntryPayload\n+    input: UpdateUserByUsernameInput!\n+  ): UpdateUserPayload\n \n-  \"\"\"Deletes a single `QuizEntryAnswer` using its globally unique id.\"\"\"\n-  deleteQuizEntryAnswer(\n+  \"\"\"Deletes a single `Post` using its globally unique id.\"\"\"\n+  deletePost(\n     \"\"\"\n     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n     \"\"\"\n-    input: DeleteQuizEntryAnswerInput!\n-  ): DeleteQuizEntryAnswerPayload\n+    input: DeletePostInput!\n+  ): DeletePostPayload\n \n-  \"\"\"Deletes a single `QuizEntryAnswer` using a unique key.\"\"\"\n-  deleteQuizEntryAnswerById(\n+  \"\"\"Deletes a single `Post` using a unique key.\"\"\"\n+  deletePostById(\n     \"\"\"\n     The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.\n     \"\"\"\n-    input: DeleteQuizEntryAnswerByIdInput!\n-  ): DeleteQuizEntryAnswerPayload\n+    input: DeletePostByIdInput!\n+  ): DeletePostPayload\n \n   \"\"\"Deletes a single `Topic` using its globally unique id.\"\"\"\n   deleteTopic(\n@@ -2040,24 +1464,6 @@\n   answer: Int\n }\n \n-\"\"\"An input for mutations affecting `QuizEntryAnswer`\"\"\"\n-input QuizEntryAnswerInput {\n-  id: Int\n-  quizEntryId: Int!\n-  question: String!\n-  answer: Int\n-}\n-\n-\"\"\"\n-Represents an update to a `QuizEntryAnswer`. Fields that are set will be updated.\n-\"\"\"\n-input QuizEntryAnswerPatch {\n-  id: Int\n-  quizEntryId: Int\n-  question: String\n-  answer: Int\n-}\n-\n \"\"\"A connection to a list of `QuizEntryAnswer` values.\"\"\"\n type QuizEntryAnswersConnection {\n   \"\"\"A list of `QuizEntryAnswer` objects.\"\"\"\n@@ -2116,42 +1522,6 @@\n   quizId: Int\n }\n \n-\"\"\"An input for mutations affecting `QuizEntry`\"\"\"\n-input QuizEntryInput {\n-  id: Int\n-  userId: Int!\n-  quizId: Int!\n-}\n-\n-\"\"\"\n-Represents an update to a `QuizEntry`. Fields that are set will be updated.\n-\"\"\"\n-input QuizEntryPatch {\n-  id: Int\n-  userId: Int\n-  quizId: Int\n-}\n-\n-\"\"\"An input for mutations affecting `Quiz`\"\"\"\n-input QuizInput {\n-  id: Int\n-  name: String!\n-  updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n-}\n-\n-\"\"\"\n-Represents an update to a `Quiz`. Fields that are set will be updated.\n-\"\"\"\n-input QuizPatch {\n-  id: Int\n-  name: String\n-  updatedAt: Datetime\n-  precision12Scale2: BigFloat\n-  precision200Scale100: BigFloat\n-}\n-\n \"\"\"A connection to a list of `Quiz` values.\"\"\"\n type QuizzesConnection {\n   \"\"\"A list of `Quiz` objects.\"\"\"\n@@ -2388,80 +1758,6 @@\n   PRIMARY_KEY_DESC\n }\n \n-\"\"\"All input for the `updateForumById` mutation.\"\"\"\n-input UpdateForumByIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `Forum` being updated.\n-  \"\"\"\n-  patch: ForumPatch!\n-  id: Int!\n-}\n-\n-\"\"\"All input for the `updateForumBySlug` mutation.\"\"\"\n-input UpdateForumBySlugInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `Forum` being updated.\n-  \"\"\"\n-  patch: ForumPatch!\n-\n-  \"\"\"An URL-safe alias for the `Forum`.\"\"\"\n-  slug: String!\n-}\n-\n-\"\"\"All input for the `updateForum` mutation.\"\"\"\n-input UpdateForumInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `Forum` to be updated.\n-  \"\"\"\n-  nodeId: ID!\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `Forum` being updated.\n-  \"\"\"\n-  patch: ForumPatch!\n-}\n-\n-\"\"\"The output of our update `Forum` mutation.\"\"\"\n-type UpdateForumPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Forum` that was updated by this mutation.\"\"\"\n-  forum: Forum\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Forum`. May be used by Relay 1.\"\"\"\n-  forumEdge(\n-    \"\"\"The method to use when ordering `Forum`.\"\"\"\n-    orderBy: [ForumsOrderBy!] = PRIMARY_KEY_ASC\n-  ): ForumsEdge\n-}\n-\n \"\"\"All input for the `updatePostById` mutation.\"\"\"\n input UpdatePostByIdInput {\n   \"\"\"\n@@ -2525,186 +1821,6 @@\n   ): PostsEdge\n }\n \n-\"\"\"All input for the `updateQuizById` mutation.\"\"\"\n-input UpdateQuizByIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `Quiz` being updated.\n-  \"\"\"\n-  patch: QuizPatch!\n-  id: Int!\n-}\n-\n-\"\"\"All input for the `updateQuizEntryAnswerById` mutation.\"\"\"\n-input UpdateQuizEntryAnswerByIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n-  \"\"\"\n-  patch: QuizEntryAnswerPatch!\n-  id: Int!\n-}\n-\n-\"\"\"All input for the `updateQuizEntryAnswer` mutation.\"\"\"\n-input UpdateQuizEntryAnswerInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `QuizEntryAnswer` to be updated.\n-  \"\"\"\n-  nodeId: ID!\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `QuizEntryAnswer` being updated.\n-  \"\"\"\n-  patch: QuizEntryAnswerPatch!\n-}\n-\n-\"\"\"The output of our update `QuizEntryAnswer` mutation.\"\"\"\n-type UpdateQuizEntryAnswerPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntryAnswer` that was updated by this mutation.\"\"\"\n-  quizEntryAnswer: QuizEntryAnswer\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `QuizEntry` that is related to this `QuizEntryAnswer`.\"\"\"\n-  quizEntry: QuizEntry\n-\n-  \"\"\"An edge for our `QuizEntryAnswer`. May be used by Relay 1.\"\"\"\n-  quizEntryAnswerEdge(\n-    \"\"\"The method to use when ordering `QuizEntryAnswer`.\"\"\"\n-    orderBy: [QuizEntryAnswersOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntryAnswersEdge\n-}\n-\n-\"\"\"All input for the `updateQuizEntryById` mutation.\"\"\"\n-input UpdateQuizEntryByIdInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `QuizEntry` being updated.\n-  \"\"\"\n-  patch: QuizEntryPatch!\n-  id: Int!\n-}\n-\n-\"\"\"All input for the `updateQuizEntry` mutation.\"\"\"\n-input UpdateQuizEntryInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `QuizEntry` to be updated.\n-  \"\"\"\n-  nodeId: ID!\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `QuizEntry` being updated.\n-  \"\"\"\n-  patch: QuizEntryPatch!\n-}\n-\n-\"\"\"The output of our update `QuizEntry` mutation.\"\"\"\n-type UpdateQuizEntryPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `QuizEntry` that was updated by this mutation.\"\"\"\n-  quizEntry: QuizEntry\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"Reads a single `User` that is related to this `QuizEntry`.\"\"\"\n-  user: User\n-\n-  \"\"\"Reads a single `Quiz` that is related to this `QuizEntry`.\"\"\"\n-  quiz: Quiz\n-\n-  \"\"\"An edge for our `QuizEntry`. May be used by Relay 1.\"\"\"\n-  quizEntryEdge(\n-    \"\"\"The method to use when ordering `QuizEntry`.\"\"\"\n-    orderBy: [QuizEntriesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizEntriesEdge\n-}\n-\n-\"\"\"All input for the `updateQuiz` mutation.\"\"\"\n-input UpdateQuizInput {\n-  \"\"\"\n-  An arbitrary string value with no semantic meaning. Will be included in the\n-  payload verbatim. May be used to track mutations by the client.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"\n-  The globally unique `ID` which will identify a single `Quiz` to be updated.\n-  \"\"\"\n-  nodeId: ID!\n-\n-  \"\"\"\n-  An object where the defined keys will be set on the `Quiz` being updated.\n-  \"\"\"\n-  patch: QuizPatch!\n-}\n-\n-\"\"\"The output of our update `Quiz` mutation.\"\"\"\n-type UpdateQuizPayload {\n-  \"\"\"\n-  The exact same `clientMutationId` that was provided in the mutation input,\n-  unchanged and unused. May be used by a client to track mutations.\n-  \"\"\"\n-  clientMutationId: String\n-\n-  \"\"\"The `Quiz` that was updated by this mutation.\"\"\"\n-  quiz: Quiz\n-\n-  \"\"\"\n-  Our root query field type. Allows us to run any query from our mutation payload.\n-  \"\"\"\n-  query: Query\n-\n-  \"\"\"An edge for our `Quiz`. May be used by Relay 1.\"\"\"\n-  quizEdge(\n-    \"\"\"The method to use when ordering `Quiz`.\"\"\"\n-    orderBy: [QuizzesOrderBy!] = PRIMARY_KEY_ASC\n-  ): QuizzesEdge\n-}\n-\n \"\"\"All input for the `updateTopicById` mutation.\"\"\"\n input UpdateTopicByIdInput {\n   \"\"\"\n","resultLanguage":"diff"}]}},{"node":{"category":"queries","id":"057de3cd-0bcb-52dd-880f-ca179c7d43c7","title":"Basic","examples":[{"title":"Forums","example":"{\n  forums {\n    nodes {\n      nodeId\n      id\n      slug\n      name\n      description\n    }\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"forums\": {\n    \"nodes\": [\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDFd\",\n        \"id\": 1,\n        \"slug\": \"testimonials\",\n        \"name\": \"Testimonials\",\n        \"description\": \"How do you rate PostGraphile?\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDJd\",\n        \"id\": 2,\n        \"slug\": \"feedback\",\n        \"name\": \"Feedback\",\n        \"description\": \"How are you finding PostGraphile?\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDNd\",\n        \"id\": 3,\n        \"slug\": \"cat-life\",\n        \"name\": \"Cat Life\",\n        \"description\": \"A forum all about cats and how fluffy they are and how they completely ignore their owners unless there is food. Or yarn.\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDRd\",\n        \"id\": 4,\n        \"slug\": \"cat-help\",\n        \"name\": \"Cat Help\",\n        \"description\": \"A forum to seek advice if your cat is becoming troublesome.\"\n      }\n    ]\n  }\n}\n","resultLanguage":"json"},{"title":"Forum by slug","example":"{\n  forumBySlug(slug: \"testimonials\") {\n    nodeId\n    id\n    slug\n    name\n    description\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"forumBySlug\": {\n    \"nodeId\": \"WyJmb3J1bXMiLDFd\",\n    \"id\": 1,\n    \"slug\": \"testimonials\",\n    \"name\": \"Testimonials\",\n    \"description\": \"How do you rate PostGraphile?\"\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"db54ecfc-9a64-59ba-83c5-5ebc75c79366","title":"Collections","examples":[{"title":"First offset","example":"{\n  forums(first: 1, offset: 1) {\n    nodes {\n      nodeId\n      id\n      name\n    }\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"forums\": {\n    \"nodes\": [\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDJd\",\n        \"id\": 2,\n        \"name\": \"Feedback\"\n      }\n    ]\n  }\n}\n","resultLanguage":"json"},{"title":"Relation condition","example":"{\n  forumBySlug(slug: \"testimonials\") {\n    nodeId\n    id\n    name\n    topics(\n      condition: { authorId: 2 }\n    ) {\n      nodes {\n        nodeId\n        id\n        title\n        body\n      }\n    }\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"forumBySlug\": {\n    \"nodeId\": \"WyJmb3J1bXMiLDFd\",\n    \"id\": 1,\n    \"name\": \"Testimonials\",\n    \"topics\": {\n      \"nodes\": [\n        {\n          \"nodeId\": \"WyJ0b3BpY3MiLDFd\",\n          \"id\": 1,\n          \"title\": \"Thank you!\",\n          \"body\": \"500-1500 requests per second on a single server is pretty awesome.\"\n        }\n      ]\n    }\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"c0ebe54e-48a6-5458-8700-62c60595037e","title":"Relations","examples":[{"title":"Forums topics posts","example":"{\n  forumBySlug(slug: \"cat-life\") {\n    name\n    topics(\n      first: 1\n      orderBy: [CREATED_AT_ASC]\n    ) {\n      nodes {\n        id\n        title\n        bodySummary\n        author {\n          id\n          username\n        }\n        posts(\n          first: 1\n          orderBy: [ID_DESC]\n        ) {\n          nodes {\n            id\n            author {\n              id\n              username\n            }\n            body\n          }\n        }\n      }\n    }\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"forumBySlug\": {\n    \"name\": \"Cat Life\",\n    \"topics\": {\n      \"nodes\": [\n        {\n          \"id\": 4,\n          \"title\": \"I love cats!\",\n          \"bodySummary\": \"They're the best!\",\n          \"author\": {\n            \"id\": 1,\n            \"username\": \"user\"\n          },\n          \"posts\": {\n            \"nodes\": [\n              {\n                \"id\": 6,\n                \"author\": {\n                  \"id\": 3,\n                  \"username\": \"Bradley_A\"\n                },\n                \"body\": \"I love it when they completely ignore you until they want something. So much better than dogs am I rite?\"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"834458b4-1b3a-55aa-b3b6-ad6374b85e00","title":"Mutations","examples":[{"title":"Create","example":"mutation {\n  createTopic(\n    input: {\n      topic: {\n        forumId: 2\n        title: \"My question relates to mutations...\"\n        body: \"How do you write them?\"\n      }\n    }\n  ) {\n    topic {\n      nodeId\n      id\n      forumId\n      title\n      body\n    }\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"createTopic\": {\n    \"topic\": {\n      \"nodeId\": \"WyJ0b3BpY3MiLDVd\",\n      \"id\": 5,\n      \"forumId\": 2,\n      \"title\": \"My question relates to mutations...\",\n      \"body\": \"How do you write them?\"\n    }\n  }\n}\n","resultLanguage":"json"},{"title":"Update","example":"mutation {\n  updateTopicById(\n    input: {\n      id: 1\n      patch: {\n        title: \"My (edited) title\"\n      }\n    }\n  ) {\n    topic {\n      nodeId\n      id\n      title\n      body\n    }\n  }\n}\n\n# Works for a table like:\n#\n#   create table app_public.topics (\n#     id serial primary key,\n#     forum_id integer NOT NULL references app_public.forums on delete cascade,\n#     title text NOT NULL,\n#     body text DEFAULT ''::text NOT NULL\n#   );\n","exampleLanguage":"graphql","result":"{\n  \"updateTopicById\": {\n    \"topic\": {\n      \"nodeId\": \"WyJ0b3BpY3MiLDFd\",\n      \"id\": 1,\n      \"title\": \"My (edited) title\",\n      \"body\": \"500-1500 requests per second on a single server is pretty awesome.\"\n    }\n  }\n}\n","resultLanguage":"json"},{"title":"Delete","example":"mutation {\n  deleteTopicById(input: { id: 1 }) {\n    deletedTopicId\n  }\n}\n","exampleLanguage":"graphql","result":"{\n  \"deleteTopicById\": {\n    \"deletedTopicId\": \"WyJ0b3BpY3MiLDFd\"\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"e8e24065-2c08-5002-9a76-ecc5409bb46f","title":"Custom queries","examples":[{"title":"Single scalar","example":"{\n  randomNumber\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.random_number() returns int\n#  language sql stable\n#  as $$\n#    select 4; -- Chosen by fair dice roll. Guaranteed to be random. XKCD#221\n#  $$;\n#\n","exampleLanguage":"graphql","result":"{ \"randomNumber\": 4 }\n","resultLanguage":"json"},{"title":"Single row","example":"{\n  currentUser {\n    nodeId\n    id\n    username\n  }\n}\n\n# Added to the GraphQL schema via\n# this SQL:\n#\n#   create function current_user()\n#   returns app_public.users\n#   language sql stable\n#   as $$\n#     select users.*\n#     from app_public.users\n#     where id = current_user_id();\n#   $$;\n","exampleLanguage":"graphql","result":"{\n  \"currentUser\": {\n    \"nodeId\": \"WyJ1c2VycyIsMV0=\",\n    \"id\": 1,\n    \"username\": \"user\"\n  }\n}\n","resultLanguage":"json"},{"title":"Rows connection","example":"{\n  forumsAboutCats {\n    nodes {\n      nodeId\n      id\n      name\n      slug\n    }\n  }\n}\n\n# Created from SQL like:\n#\n#  create function app_public.forums_about_cats()\n#  returns setof app_public.forums\n#  language sql stable\n#  as $$\n#    select *\n#    from app_public.forums\n#    where slug like 'cat-%';\n#  $$;\n","exampleLanguage":"graphql","result":"{\n  \"forumsAboutCats\": {\n    \"nodes\": [\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDNd\",\n        \"id\": 3,\n        \"name\": \"Cat Life\",\n        \"slug\": \"cat-life\"\n      },\n      {\n        \"nodeId\": \"WyJmb3J1bXMiLDRd\",\n        \"id\": 4,\n        \"name\": \"Cat Help\",\n        \"slug\": \"cat-help\"\n      }\n    ]\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"ae7e54b0-0524-5453-becc-8aecdd71a0db","title":"Custom mutations","examples":[{"title":"Forgot password","example":"mutation {\n  forgotPassword(\n    input: {\n      email: \"benjie@example.com\"\n    }\n  ) {\n    success\n  }\n}\n\n# Generated with SQL like this:\n#\n#  create function forgot_password(email text)\n#  returns boolean\n#  language plpgsql volatile\n#  as $$\n#    ...\n#  $$;\n#\n#  -- Optionally rename the result field:\n#  comment on function\n#    forgot_password(email text)\n#    is '@resultFieldName success';\n","exampleLanguage":"graphql","result":"{\n  \"forgotPassword\": {\n    \"success\": true\n  }\n}\n","resultLanguage":"json"}]}},{"node":{"category":"queries","id":"38eb986c-3c4f-5471-9c30-63367620c6bf","title":"Computed columns","examples":[{"title":"Topic summary","example":"{\n  topicById(id: 2) {\n    body\n    bodySummary\n  }\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.topics_body_summary(\n#    t app_public.topics,\n#    max_length int = 30\n#  )\n#  returns text\n#  language sql stable\n#  as $$\n#    select case\n#      when length(t.body) > max_length\n#      then left(t.body, max_length - 3)\n#             || '...'\n#      else t.body\n#      end;\n#  $$;\n","exampleLanguage":"graphql","result":"{\n  \"topicById\": {\n    \"body\": \"PostGraphile is a powerful, idomatic, and elegant tool.\",\n    \"bodySummary\": \"PostGraphile is a powerful,...\"\n  }\n}\n","resultLanguage":"json"},{"title":"Topic summary with arg","example":"{\n  topicById(id: 2) {\n    body\n    bodySummary(maxLength: 20)\n  }\n}\n\n# Generated by SQL like:\n#\n#  create function app_public.topics_body_summary(\n#    t app_public.topics,\n#    max_length int = 30\n#  )\n#  returns text\n#  language sql stable\n#  as $$\n#    select case\n#      when length(t.body) > max_length\n#      then left(t.body, max_length - 3)\n#             || '...'\n#      else t.body\n#      end;\n#  $$;\n","exampleLanguage":"graphql","result":"{\n  \"topicById\": {\n    \"body\": \"PostGraphile is a powerful, idomatic, and elegant tool.\",\n    \"bodySummary\": \"PostGraphile is a...\"\n  }\n}\n","resultLanguage":"json"}]}}]}},"pageContext":{"slug":"/postgraphile/functions/","layout":"page"}}